
BMS10S10P-F103RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104ac  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000904  08010698  08010698  00020698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f9c  08010f9c  00030218  2**0
                  CONTENTS
  4 .ARM          00000000  08010f9c  08010f9c  00030218  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010f9c  08010f9c  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f9c  08010f9c  00020f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010fa0  08010fa0  00020fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08010fa4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  20000218  080111bc  00030218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  080111bc  00030938  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e01c  00000000  00000000  00030241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bec  00000000  00000000  0004e25d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00051e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  00053148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001efd1  00000000  00000000  000542a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a76c  00000000  00000000  00073271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aab1b  00000000  00000000  0008d9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001384f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b4  00000000  00000000  0013854c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000218 	.word	0x20000218
 8000204:	00000000 	.word	0x00000000
 8000208:	0801067c 	.word	0x0801067c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000021c 	.word	0x2000021c
 8000224:	0801067c 	.word	0x0801067c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_f2uiz>:
 8001234:	0042      	lsls	r2, r0, #1
 8001236:	d20e      	bcs.n	8001256 <__aeabi_f2uiz+0x22>
 8001238:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800123c:	d30b      	bcc.n	8001256 <__aeabi_f2uiz+0x22>
 800123e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001242:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001246:	d409      	bmi.n	800125c <__aeabi_f2uiz+0x28>
 8001248:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800124c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001250:	fa23 f002 	lsr.w	r0, r3, r2
 8001254:	4770      	bx	lr
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	4770      	bx	lr
 800125c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001260:	d101      	bne.n	8001266 <__aeabi_f2uiz+0x32>
 8001262:	0242      	lsls	r2, r0, #9
 8001264:	d102      	bne.n	800126c <__aeabi_f2uiz+0x38>
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	4770      	bx	lr
 800126c:	f04f 0000 	mov.w	r0, #0
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <__aeabi_d2lz>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	460c      	mov	r4, r1
 8001278:	4605      	mov	r5, r0
 800127a:	4621      	mov	r1, r4
 800127c:	4628      	mov	r0, r5
 800127e:	2200      	movs	r2, #0
 8001280:	2300      	movs	r3, #0
 8001282:	f7ff fc07 	bl	8000a94 <__aeabi_dcmplt>
 8001286:	b928      	cbnz	r0, 8001294 <__aeabi_d2lz+0x20>
 8001288:	4628      	mov	r0, r5
 800128a:	4621      	mov	r1, r4
 800128c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001290:	f000 b80a 	b.w	80012a8 <__aeabi_d2ulz>
 8001294:	4628      	mov	r0, r5
 8001296:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800129a:	f000 f805 	bl	80012a8 <__aeabi_d2ulz>
 800129e:	4240      	negs	r0, r0
 80012a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012a4:	bd38      	pop	{r3, r4, r5, pc}
 80012a6:	bf00      	nop

080012a8 <__aeabi_d2ulz>:
 80012a8:	b5d0      	push	{r4, r6, r7, lr}
 80012aa:	2200      	movs	r2, #0
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <__aeabi_d2ulz+0x34>)
 80012ae:	4606      	mov	r6, r0
 80012b0:	460f      	mov	r7, r1
 80012b2:	f7ff f97d 	bl	80005b0 <__aeabi_dmul>
 80012b6:	f7ff fc53 	bl	8000b60 <__aeabi_d2uiz>
 80012ba:	4604      	mov	r4, r0
 80012bc:	f7ff f8fe 	bl	80004bc <__aeabi_ui2d>
 80012c0:	2200      	movs	r2, #0
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <__aeabi_d2ulz+0x38>)
 80012c4:	f7ff f974 	bl	80005b0 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4630      	mov	r0, r6
 80012ce:	4639      	mov	r1, r7
 80012d0:	f7fe ffb6 	bl	8000240 <__aeabi_dsub>
 80012d4:	f7ff fc44 	bl	8000b60 <__aeabi_d2uiz>
 80012d8:	4621      	mov	r1, r4
 80012da:	bdd0      	pop	{r4, r6, r7, pc}
 80012dc:	3df00000 	.word	0x3df00000
 80012e0:	41f00000 	.word	0x41f00000

080012e4 <Batt_Discharge_Mode>:
extern float Pack_SOC, Delta_VCell,Bat_Pow_Out, Pack_Cap;
extern uint16_t LifeTime;
extern uint8_t BATT_State;

void Batt_Discharge_Mode(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON||
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <Batt_Discharge_Mode+0x7c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d01b      	beq.n	8001328 <Batt_Discharge_Mode+0x44>
			flag_trip_overtemperature==ON||
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <Batt_Discharge_Mode+0x80>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON||
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d017      	beq.n	8001328 <Batt_Discharge_Mode+0x44>
			flag_trip_undertemperature==ON||
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <Batt_Discharge_Mode+0x84>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON||
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d013      	beq.n	8001328 <Batt_Discharge_Mode+0x44>
			flag_trip_overcurrentdischarge==ON||
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <Batt_Discharge_Mode+0x88>)
 8001302:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON||
 8001304:	2b01      	cmp	r3, #1
 8001306:	d00f      	beq.n	8001328 <Batt_Discharge_Mode+0x44>
			flag_trip_SOCOverDischarge==ON||
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <Batt_Discharge_Mode+0x8c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 800130c:	2b01      	cmp	r3, #1
 800130e:	d00b      	beq.n	8001328 <Batt_Discharge_Mode+0x44>
			flag_trip_shortcircuit==ON||
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <Batt_Discharge_Mode+0x90>)
 8001312:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON||
 8001314:	2b01      	cmp	r3, #1
 8001316:	d007      	beq.n	8001328 <Batt_Discharge_Mode+0x44>
			flag_trip_unbalance==ON||
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <Batt_Discharge_Mode+0x94>)
 800131a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON||
 800131c:	2b01      	cmp	r3, #1
 800131e:	d003      	beq.n	8001328 <Batt_Discharge_Mode+0x44>
			flag_trip_systemfailure==ON)
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <Batt_Discharge_Mode+0x98>)
 8001322:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON||
 8001324:	2b01      	cmp	r3, #1
 8001326:	d102      	bne.n	800132e <Batt_Discharge_Mode+0x4a>
	{
		Batt_Open_Mode();
 8001328:	f000 f908 	bl	800153c <Batt_Open_Mode>
 800132c:	e015      	b.n	800135a <Batt_Discharge_Mode+0x76>
	}
	else
	{
		HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001334:	4812      	ldr	r0, [pc, #72]	; (8001380 <Batt_Discharge_Mode+0x9c>)
 8001336:	f008 f82e 	bl	8009396 <HAL_GPIO_WritePin>
		BATT_State=STATE_DISCHARGE;
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <Batt_Discharge_Mode+0xa0>)
 800133c:	2202      	movs	r2, #2
 800133e:	701a      	strb	r2, [r3, #0]

		charge_state=0;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <Batt_Discharge_Mode+0xa4>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <Batt_Discharge_Mode+0xa8>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <Batt_Discharge_Mode+0xac>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
		flag_write_cycle = 0;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <Batt_Discharge_Mode+0xb0>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
	}


}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000301 	.word	0x20000301
 8001364:	20000278 	.word	0x20000278
 8001368:	20000300 	.word	0x20000300
 800136c:	20000314 	.word	0x20000314
 8001370:	20000338 	.word	0x20000338
 8001374:	2000025c 	.word	0x2000025c
 8001378:	20000259 	.word	0x20000259
 800137c:	20000264 	.word	0x20000264
 8001380:	40010800 	.word	0x40010800
 8001384:	20000699 	.word	0x20000699
 8001388:	20000348 	.word	0x20000348
 800138c:	20000284 	.word	0x20000284
 8001390:	20000394 	.word	0x20000394
 8001394:	20000250 	.word	0x20000250

08001398 <Batt_Charge_Mode>:

void Batt_Charge_Mode(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	if(flag_trip_overvoltage==ON			||
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <Batt_Charge_Mode+0x94>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d017      	beq.n	80013d4 <Batt_Charge_Mode+0x3c>
			flag_trip_overtemperature==ON	||
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <Batt_Charge_Mode+0x98>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_overvoltage==ON			||
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d013      	beq.n	80013d4 <Batt_Charge_Mode+0x3c>
			flag_trip_undertemperature==ON	||
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <Batt_Charge_Mode+0x9c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d00f      	beq.n	80013d4 <Batt_Charge_Mode+0x3c>
			flag_trip_overcurrentcharge==ON	||
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <Batt_Charge_Mode+0xa0>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d00b      	beq.n	80013d4 <Batt_Charge_Mode+0x3c>
			flag_trip_SOCOverCharge==ON		||
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <Batt_Charge_Mode+0xa4>)
 80013be:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d007      	beq.n	80013d4 <Batt_Charge_Mode+0x3c>
			flag_trip_shortcircuit==ON		||
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <Batt_Charge_Mode+0xa8>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d003      	beq.n	80013d4 <Batt_Charge_Mode+0x3c>
			flag_trip_systemfailure==ON		)
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <Batt_Charge_Mode+0xac>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d102      	bne.n	80013da <Batt_Charge_Mode+0x42>
	{
		Batt_Open_Mode();
 80013d4:	f000 f8b2 	bl	800153c <Batt_Open_Mode>
			EEPROM_WriteData(11, cycle);
			flag_write_cycle = 1;
		}
	}

}
 80013d8:	e026      	b.n	8001428 <Batt_Charge_Mode+0x90>
		HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e0:	4819      	ldr	r0, [pc, #100]	; (8001448 <Batt_Charge_Mode+0xb0>)
 80013e2:	f007 ffd8 	bl	8009396 <HAL_GPIO_WritePin>
		BATT_State=STATE_CHARGE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <Batt_Charge_Mode+0xb4>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <Batt_Charge_Mode+0xb8>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
		discharge_state=0;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <Batt_Charge_Mode+0xbc>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <Batt_Charge_Mode+0xc0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
		if (flag_write_cycle == 0){
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <Batt_Charge_Mode+0xc4>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d110      	bne.n	8001428 <Batt_Charge_Mode+0x90>
			cycle = EEPROM_ReadData(11) + 1;
 8001406:	200b      	movs	r0, #11
 8001408:	f000 fad2 	bl	80019b0 <EEPROM_ReadData>
 800140c:	4603      	mov	r3, r0
 800140e:	3301      	adds	r3, #1
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <Batt_Charge_Mode+0xc8>)
 8001414:	701a      	strb	r2, [r3, #0]
			EEPROM_WriteData(11, cycle);
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <Batt_Charge_Mode+0xc8>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4619      	mov	r1, r3
 800141c:	200b      	movs	r0, #11
 800141e:	f000 faa9 	bl	8001974 <EEPROM_WriteData>
			flag_write_cycle = 1;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <Batt_Charge_Mode+0xc4>)
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000038c 	.word	0x2000038c
 8001430:	20000278 	.word	0x20000278
 8001434:	20000300 	.word	0x20000300
 8001438:	20000332 	.word	0x20000332
 800143c:	2000025a 	.word	0x2000025a
 8001440:	2000025c 	.word	0x2000025c
 8001444:	20000264 	.word	0x20000264
 8001448:	40010800 	.word	0x40010800
 800144c:	20000699 	.word	0x20000699
 8001450:	20000348 	.word	0x20000348
 8001454:	20000284 	.word	0x20000284
 8001458:	20000394 	.word	0x20000394
 800145c:	20000250 	.word	0x20000250
 8001460:	20000248 	.word	0x20000248

08001464 <Batt_Full_CD_Mode>:

void Batt_Full_CD_Mode(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON			||
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <Batt_Full_CD_Mode+0x94>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d027      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overvoltage==ON		||
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <Batt_Full_CD_Mode+0x98>)
 8001472:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON			||
 8001474:	2b01      	cmp	r3, #1
 8001476:	d023      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overtemperature==ON	||
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <Batt_Full_CD_Mode+0x9c>)
 800147a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overvoltage==ON		||
 800147c:	2b01      	cmp	r3, #1
 800147e:	d01f      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_undertemperature==ON	||
 8001480:	4b20      	ldr	r3, [pc, #128]	; (8001504 <Batt_Full_CD_Mode+0xa0>)
 8001482:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 8001484:	2b01      	cmp	r3, #1
 8001486:	d01b      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentdischarge==ON||
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <Batt_Full_CD_Mode+0xa4>)
 800148a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 800148c:	2b01      	cmp	r3, #1
 800148e:	d017      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentcharge==ON	||
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <Batt_Full_CD_Mode+0xa8>)
 8001492:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 8001494:	2b01      	cmp	r3, #1
 8001496:	d013      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverDischarge==ON	||
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <Batt_Full_CD_Mode+0xac>)
 800149a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 800149c:	2b01      	cmp	r3, #1
 800149e:	d00f      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverCharge==ON		||
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <Batt_Full_CD_Mode+0xb0>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON	||
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d00b      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_shortcircuit==ON		||
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <Batt_Full_CD_Mode+0xb4>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d007      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_unbalance==ON			||
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <Batt_Full_CD_Mode+0xb8>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d003      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_systemfailure==ON		)
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <Batt_Full_CD_Mode+0xbc>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON			||
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d102      	bne.n	80014c6 <Batt_Full_CD_Mode+0x62>
	{
		Batt_Open_Mode();
 80014c0:	f000 f83c 	bl	800153c <Batt_Open_Mode>
 80014c4:	e015      	b.n	80014f2 <Batt_Full_CD_Mode+0x8e>
	}
	else
	{
		HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014cc:	4815      	ldr	r0, [pc, #84]	; (8001524 <Batt_Full_CD_Mode+0xc0>)
 80014ce:	f007 ff62 	bl	8009396 <HAL_GPIO_WritePin>
		BATT_State=STATE_FULL_CHARGE_DISCHARGE;
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <Batt_Full_CD_Mode+0xc4>)
 80014d4:	2203      	movs	r2, #3
 80014d6:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <Batt_Full_CD_Mode+0xc8>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <Batt_Full_CD_Mode+0xcc>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <Batt_Full_CD_Mode+0xd0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
		flag_write_cycle = 0;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <Batt_Full_CD_Mode+0xd4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
	}
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000301 	.word	0x20000301
 80014fc:	2000038c 	.word	0x2000038c
 8001500:	20000278 	.word	0x20000278
 8001504:	20000300 	.word	0x20000300
 8001508:	20000314 	.word	0x20000314
 800150c:	20000332 	.word	0x20000332
 8001510:	20000338 	.word	0x20000338
 8001514:	2000025a 	.word	0x2000025a
 8001518:	2000025c 	.word	0x2000025c
 800151c:	20000259 	.word	0x20000259
 8001520:	20000264 	.word	0x20000264
 8001524:	40010800 	.word	0x40010800
 8001528:	20000699 	.word	0x20000699
 800152c:	20000348 	.word	0x20000348
 8001530:	20000284 	.word	0x20000284
 8001534:	20000394 	.word	0x20000394
 8001538:	20000250 	.word	0x20000250

0800153c <Batt_Open_Mode>:

void Batt_Open_Mode(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001546:	480c      	ldr	r0, [pc, #48]	; (8001578 <Batt_Open_Mode+0x3c>)
 8001548:	f007 ff25 	bl	8009396 <HAL_GPIO_WritePin>
	BATT_State=STATE_STANDBY;
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <Batt_Open_Mode+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
	charge_state=0;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <Batt_Open_Mode+0x44>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
	discharge_state=0;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <Batt_Open_Mode+0x48>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
	sleep_state=1;
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <Batt_Open_Mode+0x4c>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156a:	4808      	ldr	r0, [pc, #32]	; (800158c <Batt_Open_Mode+0x50>)
 800156c:	f007 ff13 	bl	8009396 <HAL_GPIO_WritePin>

	check_SOC_Based_OCV();
 8001570:	f000 f80e 	bl	8001590 <check_SOC_Based_OCV>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40010800 	.word	0x40010800
 800157c:	20000699 	.word	0x20000699
 8001580:	20000348 	.word	0x20000348
 8001584:	20000284 	.word	0x20000284
 8001588:	20000394 	.word	0x20000394
 800158c:	40011000 	.word	0x40011000

08001590 <check_SOC_Based_OCV>:

void check_SOC_Based_OCV(void)
{
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	af00      	add	r7, sp, #0
	if(VBATT <= 51.3){
 8001594:	4b66      	ldr	r3, [pc, #408]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffb1 	bl	8000500 <__aeabi_f2d>
 800159e:	a354      	add	r3, pc, #336	; (adr r3, 80016f0 <check_SOC_Based_OCV+0x160>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff fa80 	bl	8000aa8 <__aeabi_dcmple>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d025      	beq.n	80015fa <check_SOC_Based_OCV+0x6a>
		Pack_SOC = 24.03846153846*(VBATT/15.0) - 77.18750000000;
 80015ae:	4b60      	ldr	r3, [pc, #384]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffa4 	bl	8000500 <__aeabi_f2d>
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <check_SOC_Based_OCV+0x1a4>)
 80015be:	f7ff f921 	bl	8000804 <__aeabi_ddiv>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	a34b      	add	r3, pc, #300	; (adr r3, 80016f8 <check_SOC_Based_OCV+0x168>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7fe ffee 	bl	80005b0 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	a348      	add	r3, pc, #288	; (adr r3, 8001700 <check_SOC_Based_OCV+0x170>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7fe fe2d 	bl	8000240 <__aeabi_dsub>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fad7 	bl	8000ba0 <__aeabi_d2f>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a50      	ldr	r2, [pc, #320]	; (8001738 <check_SOC_Based_OCV+0x1a8>)
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e0d4      	b.n	80017a4 <check_SOC_Based_OCV+0x214>
	}
	else if(VBATT > 51.3 &&  VBATT <= 53.5){
 80015fa:	4b4d      	ldr	r3, [pc, #308]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ff7e 	bl	8000500 <__aeabi_f2d>
 8001604:	a33a      	add	r3, pc, #232	; (adr r3, 80016f0 <check_SOC_Based_OCV+0x160>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7ff fa61 	bl	8000ad0 <__aeabi_dcmpgt>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d02e      	beq.n	8001672 <check_SOC_Based_OCV+0xe2>
 8001614:	4b46      	ldr	r3, [pc, #280]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4948      	ldr	r1, [pc, #288]	; (800173c <check_SOC_Based_OCV+0x1ac>)
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fdc6 	bl	80011ac <__aeabi_fcmple>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d025      	beq.n	8001672 <check_SOC_Based_OCV+0xe2>
		Pack_SOC = 135.26698598540*(VBATT/15.0) - 458.27213056570;
 8001626:	4b42      	ldr	r3, [pc, #264]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff68 	bl	8000500 <__aeabi_f2d>
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	4b3f      	ldr	r3, [pc, #252]	; (8001734 <check_SOC_Based_OCV+0x1a4>)
 8001636:	f7ff f8e5 	bl	8000804 <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	a331      	add	r3, pc, #196	; (adr r3, 8001708 <check_SOC_Based_OCV+0x178>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7fe ffb2 	bl	80005b0 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	a32e      	add	r3, pc, #184	; (adr r3, 8001710 <check_SOC_Based_OCV+0x180>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7fe fdf1 	bl	8000240 <__aeabi_dsub>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff fa9b 	bl	8000ba0 <__aeabi_d2f>
 800166a:	4603      	mov	r3, r0
 800166c:	4a32      	ldr	r2, [pc, #200]	; (8001738 <check_SOC_Based_OCV+0x1a8>)
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	e098      	b.n	80017a4 <check_SOC_Based_OCV+0x214>
	}
	else if(VBATT > 53.5 &&  VBATT <= 54.7){
 8001672:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4931      	ldr	r1, [pc, #196]	; (800173c <check_SOC_Based_OCV+0x1ac>)
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fdab 	bl	80011d4 <__aeabi_fcmpgt>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d05d      	beq.n	8001740 <check_SOC_Based_OCV+0x1b0>
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff39 	bl	8000500 <__aeabi_f2d>
 800168e:	a322      	add	r3, pc, #136	; (adr r3, 8001718 <check_SOC_Based_OCV+0x188>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7ff fa08 	bl	8000aa8 <__aeabi_dcmple>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d050      	beq.n	8001740 <check_SOC_Based_OCV+0x1b0>
		Pack_SOC = 332.88158563421*(VBATT/15.0) - 1161.98331356855;
 800169e:	4b24      	ldr	r3, [pc, #144]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ff2c 	bl	8000500 <__aeabi_f2d>
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <check_SOC_Based_OCV+0x1a4>)
 80016ae:	f7ff f8a9 	bl	8000804 <__aeabi_ddiv>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	a319      	add	r3, pc, #100	; (adr r3, 8001720 <check_SOC_Based_OCV+0x190>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7fe ff76 	bl	80005b0 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	a316      	add	r3, pc, #88	; (adr r3, 8001728 <check_SOC_Based_OCV+0x198>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7fe fdb5 	bl	8000240 <__aeabi_dsub>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff fa5f 	bl	8000ba0 <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <check_SOC_Based_OCV+0x1a8>)
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e05c      	b.n	80017a4 <check_SOC_Based_OCV+0x214>
 80016ea:	bf00      	nop
 80016ec:	f3af 8000 	nop.w
 80016f0:	66666666 	.word	0x66666666
 80016f4:	4049a666 	.word	0x4049a666
 80016f8:	9d89d6ed 	.word	0x9d89d6ed
 80016fc:	403809d8 	.word	0x403809d8
 8001700:	00000000 	.word	0x00000000
 8001704:	40534c00 	.word	0x40534c00
 8001708:	26317911 	.word	0x26317911
 800170c:	4060e88b 	.word	0x4060e88b
 8001710:	a5947ec7 	.word	0xa5947ec7
 8001714:	407ca45a 	.word	0x407ca45a
 8001718:	9999999a 	.word	0x9999999a
 800171c:	404b5999 	.word	0x404b5999
 8001720:	f989b8e3 	.word	0xf989b8e3
 8001724:	4074ce1a 	.word	0x4074ce1a
 8001728:	e9c08a8b 	.word	0xe9c08a8b
 800172c:	409227ee 	.word	0x409227ee
 8001730:	2000027c 	.word	0x2000027c
 8001734:	402e0000 	.word	0x402e0000
 8001738:	20000388 	.word	0x20000388
 800173c:	42560000 	.word	0x42560000
	}
	else if(VBATT > 54.7){
 8001740:	4b73      	ldr	r3, [pc, #460]	; (8001910 <check_SOC_Based_OCV+0x380>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fedb 	bl	8000500 <__aeabi_f2d>
 800174a:	a365      	add	r3, pc, #404	; (adr r3, 80018e0 <check_SOC_Based_OCV+0x350>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7ff f9be 	bl	8000ad0 <__aeabi_dcmpgt>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d024      	beq.n	80017a4 <check_SOC_Based_OCV+0x214>
		Pack_SOC = 111.42655038475*(VBATT/15.0) - 353.86053305809;
 800175a:	4b6d      	ldr	r3, [pc, #436]	; (8001910 <check_SOC_Based_OCV+0x380>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fece 	bl	8000500 <__aeabi_f2d>
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b6a      	ldr	r3, [pc, #424]	; (8001914 <check_SOC_Based_OCV+0x384>)
 800176a:	f7ff f84b 	bl	8000804 <__aeabi_ddiv>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	a35c      	add	r3, pc, #368	; (adr r3, 80018e8 <check_SOC_Based_OCV+0x358>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe ff18 	bl	80005b0 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	a359      	add	r3, pc, #356	; (adr r3, 80018f0 <check_SOC_Based_OCV+0x360>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe fd57 	bl	8000240 <__aeabi_dsub>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff fa01 	bl	8000ba0 <__aeabi_d2f>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a5d      	ldr	r2, [pc, #372]	; (8001918 <check_SOC_Based_OCV+0x388>)
 80017a2:	6013      	str	r3, [r2, #0]
	}

	Pack_SOC=(0.4884934490 * VBATT * VBATT) - (26.2875616013 * VBATT) + 348.6849534722;   //Persamaan Baterai INR 21700
 80017a4:	4b5a      	ldr	r3, [pc, #360]	; (8001910 <check_SOC_Based_OCV+0x380>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fea9 	bl	8000500 <__aeabi_f2d>
 80017ae:	a352      	add	r3, pc, #328	; (adr r3, 80018f8 <check_SOC_Based_OCV+0x368>)
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	f7fe fefc 	bl	80005b0 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4614      	mov	r4, r2
 80017be:	461d      	mov	r5, r3
 80017c0:	4b53      	ldr	r3, [pc, #332]	; (8001910 <check_SOC_Based_OCV+0x380>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe9b 	bl	8000500 <__aeabi_f2d>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4620      	mov	r0, r4
 80017d0:	4629      	mov	r1, r5
 80017d2:	f7fe feed 	bl	80005b0 <__aeabi_dmul>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4614      	mov	r4, r2
 80017dc:	461d      	mov	r5, r3
 80017de:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <check_SOC_Based_OCV+0x380>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe8c 	bl	8000500 <__aeabi_f2d>
 80017e8:	a345      	add	r3, pc, #276	; (adr r3, 8001900 <check_SOC_Based_OCV+0x370>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe fedf 	bl	80005b0 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f7fe fd21 	bl	8000240 <__aeabi_dsub>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	a340      	add	r3, pc, #256	; (adr r3, 8001908 <check_SOC_Based_OCV+0x378>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe fd1a 	bl	8000244 <__adddf3>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f9c2 	bl	8000ba0 <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	4a3e      	ldr	r2, [pc, #248]	; (8001918 <check_SOC_Based_OCV+0x388>)
 8001820:	6013      	str	r3, [r2, #0]
//	Pack_SOC=(147.471026094008*(VBATT/15.0) - 494.687746093127);  // Persamaan Baterai EVE ICR18650/26V

	grad=(100-0)/(batas_atas-batas_bawah);
 8001822:	4b3e      	ldr	r3, [pc, #248]	; (800191c <check_SOC_Based_OCV+0x38c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a3e      	ldr	r2, [pc, #248]	; (8001920 <check_SOC_Based_OCV+0x390>)
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fa0b 	bl	8000c48 <__aeabi_fsub>
 8001832:	4603      	mov	r3, r0
 8001834:	4619      	mov	r1, r3
 8001836:	483b      	ldr	r0, [pc, #236]	; (8001924 <check_SOC_Based_OCV+0x394>)
 8001838:	f7ff fbc4 	bl	8000fc4 <__aeabi_fdiv>
 800183c:	4603      	mov	r3, r0
 800183e:	461a      	mov	r2, r3
 8001840:	4b39      	ldr	r3, [pc, #228]	; (8001928 <check_SOC_Based_OCV+0x398>)
 8001842:	601a      	str	r2, [r3, #0]
	constanta=grad*batas_bawah*(-1);
 8001844:	4b38      	ldr	r3, [pc, #224]	; (8001928 <check_SOC_Based_OCV+0x398>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a35      	ldr	r2, [pc, #212]	; (8001920 <check_SOC_Based_OCV+0x390>)
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fb04 	bl	8000e5c <__aeabi_fmul>
 8001854:	4603      	mov	r3, r0
 8001856:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800185a:	4a34      	ldr	r2, [pc, #208]	; (800192c <check_SOC_Based_OCV+0x39c>)
 800185c:	6013      	str	r3, [r2, #0]
	SOC_manipulasi=grad*Pack_SOC+constanta;
 800185e:	4b32      	ldr	r3, [pc, #200]	; (8001928 <check_SOC_Based_OCV+0x398>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a2d      	ldr	r2, [pc, #180]	; (8001918 <check_SOC_Based_OCV+0x388>)
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff faf7 	bl	8000e5c <__aeabi_fmul>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	4b2e      	ldr	r3, [pc, #184]	; (800192c <check_SOC_Based_OCV+0x39c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4619      	mov	r1, r3
 8001878:	4610      	mov	r0, r2
 800187a:	f7ff f9e7 	bl	8000c4c <__addsf3>
 800187e:	4603      	mov	r3, r0
 8001880:	461a      	mov	r2, r3
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <check_SOC_Based_OCV+0x3a0>)
 8001884:	601a      	str	r2, [r3, #0]

	if(Pack_SOC>130) Pack_SOC=100;
 8001886:	4b24      	ldr	r3, [pc, #144]	; (8001918 <check_SOC_Based_OCV+0x388>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	492a      	ldr	r1, [pc, #168]	; (8001934 <check_SOC_Based_OCV+0x3a4>)
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fca1 	bl	80011d4 <__aeabi_fcmpgt>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <check_SOC_Based_OCV+0x310>
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <check_SOC_Based_OCV+0x388>)
 800189a:	4a22      	ldr	r2, [pc, #136]	; (8001924 <check_SOC_Based_OCV+0x394>)
 800189c:	601a      	str	r2, [r3, #0]
	else if(Pack_SOC>100) Pack_SOC=100;
	else if(Pack_SOC<0) Pack_SOC=0;
}
 800189e:	e01b      	b.n	80018d8 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC>100) Pack_SOC=100;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <check_SOC_Based_OCV+0x388>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	491f      	ldr	r1, [pc, #124]	; (8001924 <check_SOC_Based_OCV+0x394>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fc94 	bl	80011d4 <__aeabi_fcmpgt>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <check_SOC_Based_OCV+0x32a>
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <check_SOC_Based_OCV+0x388>)
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <check_SOC_Based_OCV+0x394>)
 80018b6:	601a      	str	r2, [r3, #0]
}
 80018b8:	e00e      	b.n	80018d8 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC<0) Pack_SOC=0;
 80018ba:	4b17      	ldr	r3, [pc, #92]	; (8001918 <check_SOC_Based_OCV+0x388>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f04f 0100 	mov.w	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fc68 	bl	8001198 <__aeabi_fcmplt>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d100      	bne.n	80018d0 <check_SOC_Based_OCV+0x340>
}
 80018ce:	e003      	b.n	80018d8 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC<0) Pack_SOC=0;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <check_SOC_Based_OCV+0x388>)
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
}
 80018d8:	bf00      	nop
 80018da:	bdb0      	pop	{r4, r5, r7, pc}
 80018dc:	f3af 8000 	nop.w
 80018e0:	9999999a 	.word	0x9999999a
 80018e4:	404b5999 	.word	0x404b5999
 80018e8:	99fc263d 	.word	0x99fc263d
 80018ec:	405bdb4c 	.word	0x405bdb4c
 80018f0:	be4fd9fa 	.word	0xbe4fd9fa
 80018f4:	40761dc4 	.word	0x40761dc4
 80018f8:	06f0f9c2 	.word	0x06f0f9c2
 80018fc:	3fdf437a 	.word	0x3fdf437a
 8001900:	a3192b3c 	.word	0xa3192b3c
 8001904:	403a499d 	.word	0x403a499d
 8001908:	91c5a617 	.word	0x91c5a617
 800190c:	4075caf5 	.word	0x4075caf5
 8001910:	2000027c 	.word	0x2000027c
 8001914:	402e0000 	.word	0x402e0000
 8001918:	20000388 	.word	0x20000388
 800191c:	2000024c 	.word	0x2000024c
 8001920:	20000310 	.word	0x20000310
 8001924:	42c80000 	.word	0x42c80000
 8001928:	2000031c 	.word	0x2000031c
 800192c:	20000288 	.word	0x20000288
 8001930:	2000032c 	.word	0x2000032c
 8001934:	43020000 	.word	0x43020000

08001938 <EEPROM_isDeviceReady>:
 *      Author: faiz
 */
#include "EEPROM.h"

void EEPROM_isDeviceReady(uint16_t addr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_IsDeviceReady(&hi2c2, addr, 3, 100)!=HAL_OK){
 8001942:	88f9      	ldrh	r1, [r7, #6]
 8001944:	2364      	movs	r3, #100	; 0x64
 8001946:	2203      	movs	r2, #3
 8001948:	4808      	ldr	r0, [pc, #32]	; (800196c <EEPROM_isDeviceReady+0x34>)
 800194a:	f008 f9fb 	bl	8009d44 <HAL_I2C_IsDeviceReady>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d007      	beq.n	8001964 <EEPROM_isDeviceReady+0x2c>
		while(1){
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001954:	2140      	movs	r1, #64	; 0x40
 8001956:	4806      	ldr	r0, [pc, #24]	; (8001970 <EEPROM_isDeviceReady+0x38>)
 8001958:	f007 fd35 	bl	80093c6 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 800195c:	2064      	movs	r0, #100	; 0x64
 800195e:	f005 fc6d 	bl	800723c <HAL_Delay>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001962:	e7f7      	b.n	8001954 <EEPROM_isDeviceReady+0x1c>
		}
	}
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000614 	.word	0x20000614
 8001970:	40011000 	.word	0x40011000

08001974 <EEPROM_WriteData>:

void EEPROM_WriteData(uint16_t addr, uint8_t data)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af04      	add	r7, sp, #16
 800197a:	4603      	mov	r3, r0
 800197c:	460a      	mov	r2, r1
 800197e:	80fb      	strh	r3, [r7, #6]
 8001980:	4613      	mov	r3, r2
 8001982:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c2,EEPROM_ADDRESS,addr,64,&data,1,10);
 8001984:	88fa      	ldrh	r2, [r7, #6]
 8001986:	230a      	movs	r3, #10
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	2301      	movs	r3, #1
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	1d7b      	adds	r3, r7, #5
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2340      	movs	r3, #64	; 0x40
 8001994:	21a0      	movs	r1, #160	; 0xa0
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <EEPROM_WriteData+0x38>)
 8001998:	f007 fe72 	bl	8009680 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800199c:	2064      	movs	r0, #100	; 0x64
 800199e:	f005 fc4d 	bl	800723c <HAL_Delay>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000614 	.word	0x20000614

080019b0 <EEPROM_ReadData>:

uint8_t EEPROM_ReadData(uint16_t addr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af04      	add	r7, sp, #16
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
	uint8_t EEPROM_data;
	HAL_I2C_Mem_Read(&hi2c2,0xA0,addr,64,&EEPROM_data,1,10);
 80019ba:	88fa      	ldrh	r2, [r7, #6]
 80019bc:	230a      	movs	r3, #10
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	2301      	movs	r3, #1
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	f107 030f 	add.w	r3, r7, #15
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2340      	movs	r3, #64	; 0x40
 80019cc:	21a0      	movs	r1, #160	; 0xa0
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <EEPROM_ReadData+0x34>)
 80019d0:	f007 ff50 	bl	8009874 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f005 fc31 	bl	800723c <HAL_Delay>
	return EEPROM_data;
 80019da:	7bfb      	ldrb	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000614 	.word	0x20000614

080019e8 <ltc6804_GPIO_Config>:

float Cell_Voltage_Lowest;
float minus_offset[15]={500,840,-40,-40,-100,540,830,20,-130,-120,560,880,-30,-110,-140}; //modul B

void ltc6804_GPIO_Config(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIO clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	4a29      	ldr	r2, [pc, #164]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6193      	str	r3, [r2, #24]
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 8001a0c:	f043 0308 	orr.w	r3, r3, #8
 8001a10:	6193      	str	r3, [r2, #24]
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 8001a24:	f043 0310 	orr.w	r3, r3, #16
 8001a28:	6193      	str	r3, [r2, #24]
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin       = ltc6804_CS_PIN;
 8001a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3a:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6804_CS_PORT, &GPIO_InitStructure);
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4813      	ldr	r0, [pc, #76]	; (8001a9c <ltc6804_GPIO_Config+0xb4>)
 8001a50:	f007 faf6 	bl	8009040 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6804_SCK_PIN;
 8001a54:	2308      	movs	r3, #8
 8001a56:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6804_SCK_PORT, &GPIO_InitStructure);
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4810      	ldr	r0, [pc, #64]	; (8001aa0 <ltc6804_GPIO_Config+0xb8>)
 8001a60:	f007 faee 	bl	8009040 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6804_MOSI_PIN;
 8001a64:	2320      	movs	r3, #32
 8001a66:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6804_MOSI_PORT, &GPIO_InitStructure);
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <ltc6804_GPIO_Config+0xb8>)
 8001a70:	f007 fae6 	bl	8009040 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin       = ltc6804_MISO_PIN;
 8001a74:	2310      	movs	r3, #16
 8001a76:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_INPUT;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6804_MISO_PORT, &GPIO_InitStructure);
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <ltc6804_GPIO_Config+0xb8>)
 8001a8c:	f007 fad8 	bl	8009040 <HAL_GPIO_Init>
}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40011000 	.word	0x40011000
 8001aa0:	40010c00 	.word	0x40010c00

08001aa4 <ltc6804_SPIInit>:

void ltc6804_SPIInit(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aae:	482d      	ldr	r0, [pc, #180]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001ab0:	f007 fc71 	bl	8009396 <HAL_GPIO_WritePin>
	ltc6804_RESET_HIGH;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aba:	482a      	ldr	r0, [pc, #168]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001abc:	f007 fc6b 	bl	8009396 <HAL_GPIO_WritePin>
	ltc6804_Delay(10);
 8001ac0:	200a      	movs	r0, #10
 8001ac2:	f000 f851 	bl	8001b68 <ltc6804_Delay>
	ltc6804_RESET_LOW;
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001acc:	4825      	ldr	r0, [pc, #148]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001ace:	f007 fc62 	bl	8009396 <HAL_GPIO_WritePin>
	ltc6804_Delay(2000);
 8001ad2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ad6:	f000 f847 	bl	8001b68 <ltc6804_Delay>
	ltc6804_RESET_HIGH;
 8001ada:	2201      	movs	r2, #1
 8001adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae0:	4820      	ldr	r0, [pc, #128]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001ae2:	f007 fc58 	bl	8009396 <HAL_GPIO_WritePin>
	ltc6804_Delay(10);
 8001ae6:	200a      	movs	r0, #10
 8001ae8:	f000 f83e 	bl	8001b68 <ltc6804_Delay>

	//toggle CS 3 times to enter SPI Mode
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001aec:	2200      	movs	r2, #0
 8001aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af2:	481c      	ldr	r0, [pc, #112]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001af4:	f007 fc4f 	bl	8009396 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001af8:	2064      	movs	r0, #100	; 0x64
 8001afa:	f000 f835 	bl	8001b68 <ltc6804_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b04:	4817      	ldr	r0, [pc, #92]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001b06:	f007 fc46 	bl	8009396 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b0a:	2064      	movs	r0, #100	; 0x64
 8001b0c:	f000 f82c 	bl	8001b68 <ltc6804_Delay>
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001b10:	2200      	movs	r2, #0
 8001b12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b16:	4813      	ldr	r0, [pc, #76]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001b18:	f007 fc3d 	bl	8009396 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b1c:	2064      	movs	r0, #100	; 0x64
 8001b1e:	f000 f823 	bl	8001b68 <ltc6804_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001b22:	2201      	movs	r2, #1
 8001b24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b28:	480e      	ldr	r0, [pc, #56]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001b2a:	f007 fc34 	bl	8009396 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b2e:	2064      	movs	r0, #100	; 0x64
 8001b30:	f000 f81a 	bl	8001b68 <ltc6804_Delay>
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001b34:	2200      	movs	r2, #0
 8001b36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3a:	480a      	ldr	r0, [pc, #40]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001b3c:	f007 fc2b 	bl	8009396 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b40:	2064      	movs	r0, #100	; 0x64
 8001b42:	f000 f811 	bl	8001b68 <ltc6804_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001b46:	2201      	movs	r2, #1
 8001b48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4c:	4805      	ldr	r0, [pc, #20]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001b4e:	f007 fc22 	bl	8009396 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b52:	2064      	movs	r0, #100	; 0x64
 8001b54:	f000 f808 	bl	8001b68 <ltc6804_Delay>

	ltc6804_Delay(20000);
 8001b58:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001b5c:	f000 f804 	bl	8001b68 <ltc6804_Delay>
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40011000 	.word	0x40011000

08001b68 <ltc6804_Delay>:

void ltc6804_Delay(volatile uint32_t nCount)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	while(nCount > 0) { nCount--; }
 8001b70:	e002      	b.n	8001b78 <ltc6804_Delay+0x10>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f9      	bne.n	8001b72 <ltc6804_Delay+0xa>
}
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
	...

08001b8c <ltc6804_Write8>:

void ltc6804_Write8(uint8_t out)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	//ltc6804_CS_SET(CS_Pin);
	//ltc6804_MOSI_RESET;
	ltc6804_SCK_RESET;
 8001b96:	2200      	movs	r2, #0
 8001b98:	2108      	movs	r1, #8
 8001b9a:	481b      	ldr	r0, [pc, #108]	; (8001c08 <ltc6804_Write8+0x7c>)
 8001b9c:	f007 fbfb 	bl	8009396 <HAL_GPIO_WritePin>
	//ltc6804_CS_RESET(CS_Pin);
	//ltc6804_Delay(10);
	for (i = 0; i < 8; i++) {
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e027      	b.n	8001bf6 <ltc6804_Write8+0x6a>
		if ((out >> (7-i)) & 0x01) {
 8001ba6:	79fa      	ldrb	r2, [r7, #7]
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	f1c3 0307 	rsb	r3, r3, #7
 8001bae:	fa42 f303 	asr.w	r3, r2, r3
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <ltc6804_Write8+0x3a>
			ltc6804_MOSI_SET;
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	4812      	ldr	r0, [pc, #72]	; (8001c08 <ltc6804_Write8+0x7c>)
 8001bc0:	f007 fbe9 	bl	8009396 <HAL_GPIO_WritePin>
 8001bc4:	e004      	b.n	8001bd0 <ltc6804_Write8+0x44>
		} else {
			ltc6804_MOSI_RESET;
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2120      	movs	r1, #32
 8001bca:	480f      	ldr	r0, [pc, #60]	; (8001c08 <ltc6804_Write8+0x7c>)
 8001bcc:	f007 fbe3 	bl	8009396 <HAL_GPIO_WritePin>
		}
		ltc6804_Delay(10);
 8001bd0:	200a      	movs	r0, #10
 8001bd2:	f7ff ffc9 	bl	8001b68 <ltc6804_Delay>
		ltc6804_SCK_SET;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2108      	movs	r1, #8
 8001bda:	480b      	ldr	r0, [pc, #44]	; (8001c08 <ltc6804_Write8+0x7c>)
 8001bdc:	f007 fbdb 	bl	8009396 <HAL_GPIO_WritePin>
		ltc6804_Delay(10);
 8001be0:	200a      	movs	r0, #10
 8001be2:	f7ff ffc1 	bl	8001b68 <ltc6804_Delay>
		ltc6804_SCK_RESET;
 8001be6:	2200      	movs	r2, #0
 8001be8:	2108      	movs	r1, #8
 8001bea:	4807      	ldr	r0, [pc, #28]	; (8001c08 <ltc6804_Write8+0x7c>)
 8001bec:	f007 fbd3 	bl	8009396 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	73fb      	strb	r3, [r7, #15]
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	2b07      	cmp	r3, #7
 8001bfa:	d9d4      	bls.n	8001ba6 <ltc6804_Write8+0x1a>
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40010c00 	.word	0x40010c00

08001c0c <ltc6804_Read8>:
		ltc6804_SCK_SET;
	}
}

uint8_t ltc6804_Read8()
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t temp = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	71bb      	strb	r3, [r7, #6]
	//ltc6804_Delay(10);
	//ltc6804_CS_RESET(CS_Pin);
	ltc6804_MOSI_RESET;
 8001c16:	2200      	movs	r2, #0
 8001c18:	2120      	movs	r1, #32
 8001c1a:	481e      	ldr	r0, [pc, #120]	; (8001c94 <ltc6804_Read8+0x88>)
 8001c1c:	f007 fbbb 	bl	8009396 <HAL_GPIO_WritePin>
	ltc6804_SCK_RESET;
 8001c20:	2200      	movs	r2, #0
 8001c22:	2108      	movs	r1, #8
 8001c24:	481b      	ldr	r0, [pc, #108]	; (8001c94 <ltc6804_Read8+0x88>)
 8001c26:	f007 fbb6 	bl	8009396 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	e028      	b.n	8001c82 <ltc6804_Read8+0x76>
		ltc6804_Delay(10);
 8001c30:	200a      	movs	r0, #10
 8001c32:	f7ff ff99 	bl	8001b68 <ltc6804_Delay>
		ltc6804_SCK_SET;
 8001c36:	2201      	movs	r2, #1
 8001c38:	2108      	movs	r1, #8
 8001c3a:	4816      	ldr	r0, [pc, #88]	; (8001c94 <ltc6804_Read8+0x88>)
 8001c3c:	f007 fbab 	bl	8009396 <HAL_GPIO_WritePin>
		ltc6804_Delay(10);
 8001c40:	200a      	movs	r0, #10
 8001c42:	f7ff ff91 	bl	8001b68 <ltc6804_Delay>
		if (ltc6804_MISO == GPIO_PIN_SET) {
 8001c46:	2110      	movs	r1, #16
 8001c48:	4812      	ldr	r0, [pc, #72]	; (8001c94 <ltc6804_Read8+0x88>)
 8001c4a:	f007 fb8d 	bl	8009368 <HAL_GPIO_ReadPin>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d10b      	bne.n	8001c6c <ltc6804_Read8+0x60>
			temp |= (1 << (7-i));
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f1c3 0307 	rsb	r3, r3, #7
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	b25a      	sxtb	r2, r3
 8001c62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	b25b      	sxtb	r3, r3
 8001c6a:	71bb      	strb	r3, [r7, #6]
		}
		ltc6804_Delay(10);
 8001c6c:	200a      	movs	r0, #10
 8001c6e:	f7ff ff7b 	bl	8001b68 <ltc6804_Delay>
		ltc6804_SCK_RESET;
 8001c72:	2200      	movs	r2, #0
 8001c74:	2108      	movs	r1, #8
 8001c76:	4807      	ldr	r0, [pc, #28]	; (8001c94 <ltc6804_Read8+0x88>)
 8001c78:	f007 fb8d 	bl	8009396 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	71fb      	strb	r3, [r7, #7]
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b07      	cmp	r3, #7
 8001c86:	d9d3      	bls.n	8001c30 <ltc6804_Read8+0x24>
	}
	//ltc6804_CS_SET(CS_Pin);

	return temp;
 8001c88:	79bb      	ldrb	r3, [r7, #6]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40010c00 	.word	0x40010c00

08001c98 <set_adc>:
void set_adc(uint8_t MD, //ADC Mode
		uint8_t DCP, //Discharge Permit
		uint8_t CH, //Cell Channels to be measured
		uint8_t CHG //GPIO Channels to be measured
)
{
 8001c98:	b490      	push	{r4, r7}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4623      	mov	r3, r4
 8001ca8:	71fb      	strb	r3, [r7, #7]
 8001caa:	4603      	mov	r3, r0
 8001cac:	71bb      	strb	r3, [r7, #6]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	717b      	strb	r3, [r7, #5]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	713b      	strb	r3, [r7, #4]
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	105b      	asrs	r3, r3, #1
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
	ADCV[0] = md_bits + 0x02;
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <set_adc+0x8c>)
 8001cca:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	01db      	lsls	r3, r3, #7
 8001cd0:	73fb      	strb	r3, [r7, #15]
	ADCV[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8001cd2:	79bb      	ldrb	r3, [r7, #6]
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	4413      	add	r3, r2
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	797b      	ldrb	r3, [r7, #5]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	3360      	adds	r3, #96	; 0x60
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <set_adc+0x8c>)
 8001cea:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	105b      	asrs	r3, r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
	ADAX[0] = md_bits + 0x04;
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <set_adc+0x90>)
 8001d00:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	01db      	lsls	r3, r3, #7
 8001d06:	73fb      	strb	r3, [r7, #15]
	ADAX[1] = md_bits + 0x60 + CHG ;
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	793b      	ldrb	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3360      	adds	r3, #96	; 0x60
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <set_adc+0x90>)
 8001d16:	705a      	strb	r2, [r3, #1]

}
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc90      	pop	{r4, r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000398 	.word	0x20000398
 8001d28:	20000444 	.word	0x20000444

08001d2c <LTC6804_adcv>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted       |

 ***********************************************************************************************/
void LTC6804_adcv()
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	cmd[0] = ADCV[0];
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <LTC6804_adcv+0x5c>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <LTC6804_adcv+0x5c>)
 8001d3a:	785b      	ldrb	r3, [r3, #1]
 8001d3c:	707b      	strb	r3, [r7, #1]

	//2
	temp_pec = pec15_calc(2, ADCV);
 8001d3e:	4912      	ldr	r1, [pc, #72]	; (8001d88 <LTC6804_adcv+0x5c>)
 8001d40:	2002      	movs	r0, #2
 8001d42:	f000 fcdf 	bl	8002704 <pec15_calc>
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	70fb      	strb	r3, [r7, #3]

	//3
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 8001d5a:	f000 fcbd 	bl	80026d8 <wakeup_idle>

	//4
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d64:	4809      	ldr	r0, [pc, #36]	; (8001d8c <LTC6804_adcv+0x60>)
 8001d66:	f007 fb16 	bl	8009396 <HAL_GPIO_WritePin>
	spi_write_array(4,cmd);
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	2004      	movs	r0, #4
 8001d70:	f000 fcfa 	bl	8002768 <spi_write_array>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001d74:	2201      	movs	r2, #1
 8001d76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d7a:	4804      	ldr	r0, [pc, #16]	; (8001d8c <LTC6804_adcv+0x60>)
 8001d7c:	f007 fb0b 	bl	8009396 <HAL_GPIO_WritePin>

}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000398 	.word	0x20000398
 8001d8c:	40011000 	.word	0x40011000

08001d90 <LTC6804_adax>:
 | MD     | Determines the filter corner of the ADC      |
 | CHG    | Determines which GPIO channels are converted |

 *********************************************************************************************************/
void LTC6804_adax()
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;

	cmd[0] = ADAX[0];
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <LTC6804_adax+0x5c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <LTC6804_adax+0x5c>)
 8001d9e:	785b      	ldrb	r3, [r3, #1]
 8001da0:	707b      	strb	r3, [r7, #1]
	temp_pec = pec15_calc(2, ADAX);
 8001da2:	4912      	ldr	r1, [pc, #72]	; (8001dec <LTC6804_adax+0x5c>)
 8001da4:	2002      	movs	r0, #2
 8001da6:	f000 fcad 	bl	8002704 <pec15_calc>
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	70fb      	strb	r3, [r7, #3]

	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 8001dbe:	f000 fc8b 	bl	80026d8 <wakeup_idle>
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dc8:	4809      	ldr	r0, [pc, #36]	; (8001df0 <LTC6804_adax+0x60>)
 8001dca:	f007 fae4 	bl	8009396 <HAL_GPIO_WritePin>
	spi_write_array(4,cmd);
 8001dce:	463b      	mov	r3, r7
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	2004      	movs	r0, #4
 8001dd4:	f000 fcc8 	bl	8002768 <spi_write_array>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dde:	4804      	ldr	r0, [pc, #16]	; (8001df0 <LTC6804_adax+0x60>)
 8001de0:	f007 fad9 	bl	8009396 <HAL_GPIO_WritePin>

}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000444 	.word	0x20000444
 8001df0:	40011000 	.word	0x40011000

08001df4 <LTC6804_adstat>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted       |

 ***********************************************************************************************/
void LTC6804_adstat()
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;
	uint8_t ADSTAT[2];

	//1
	cmd[0] = 0x05;
 8001dfa:	2305      	movs	r3, #5
 8001dfc:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0xE8;
 8001dfe:	23e8      	movs	r3, #232	; 0xe8
 8001e00:	727b      	strb	r3, [r7, #9]

	ADSTAT[0] = cmd[0];
 8001e02:	7a3b      	ldrb	r3, [r7, #8]
 8001e04:	713b      	strb	r3, [r7, #4]
	ADSTAT[1] = cmd[1];
 8001e06:	7a7b      	ldrb	r3, [r7, #9]
 8001e08:	717b      	strb	r3, [r7, #5]

	//2
	temp_pec = pec15_calc(2, ADSTAT);
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	2002      	movs	r0, #2
 8001e10:	f000 fc78 	bl	8002704 <pec15_calc>
 8001e14:	4603      	mov	r3, r0
 8001e16:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8001e18:	89fb      	ldrh	r3, [r7, #14]
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(temp_pec);
 8001e22:	89fb      	ldrh	r3, [r7, #14]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	72fb      	strb	r3, [r7, #11]

	//3
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 8001e28:	f000 fc56 	bl	80026d8 <wakeup_idle>

	//4
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e32:	4809      	ldr	r0, [pc, #36]	; (8001e58 <LTC6804_adstat+0x64>)
 8001e34:	f007 faaf 	bl	8009396 <HAL_GPIO_WritePin>
	spi_write_array(4,cmd);
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	2004      	movs	r0, #4
 8001e40:	f000 fc92 	bl	8002768 <spi_write_array>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001e44:	2201      	movs	r2, #1
 8001e46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e4a:	4803      	ldr	r0, [pc, #12]	; (8001e58 <LTC6804_adstat+0x64>)
 8001e4c:	f007 faa3 	bl	8009396 <HAL_GPIO_WritePin>

}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40011000 	.word	0x40011000

08001e5c <LTC6804_rdcv>:
 *************************************************/
uint8_t LTC6804_rdcv(uint8_t reg,
		uint8_t total_ic,
		uint16_t cell_codes[][12]
)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	603a      	str	r2, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	71bb      	strb	r3, [r7, #6]

	const uint8_t NUM_RX_BYT = 8;
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	763b      	strb	r3, [r7, #24]
	const uint8_t BYT_IN_REG = 6;
 8001e70:	2306      	movs	r3, #6
 8001e72:	75fb      	strb	r3, [r7, #23]
	const uint8_t CELL_IN_REG = 3;
 8001e74:	2303      	movs	r3, #3
 8001e76:	75bb      	strb	r3, [r7, #22]

	uint8_t *cell_data;
	int8_t pec_error = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter=0; //data counter
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	77bb      	strb	r3, [r7, #30]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8001e80:	7e3b      	ldrb	r3, [r7, #24]
 8001e82:	79ba      	ldrb	r2, [r7, #6]
 8001e84:	fb02 f303 	mul.w	r3, r2, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f009 fdad 	bl	800b9e8 <malloc>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	613b      	str	r3, [r7, #16]
	//1.a
	if (reg == 0)
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d16f      	bne.n	8001f78 <LTC6804_rdcv+0x11c>
	{
		//a.i
		for (uint8_t cell_reg = 1; cell_reg<5; cell_reg++)               //executes once for each of the LTC6804 cell voltage registers
 8001e98:	2301      	movs	r3, #1
 8001e9a:	777b      	strb	r3, [r7, #29]
 8001e9c:	e068      	b.n	8001f70 <LTC6804_rdcv+0x114>
		{
			data_counter = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	77bb      	strb	r3, [r7, #30]
			LTC6804_rdcv_reg(cell_reg, total_ic,cell_data);
 8001ea2:	79b9      	ldrb	r1, [r7, #6]
 8001ea4:	7f7b      	ldrb	r3, [r7, #29]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f8cf 	bl	800204c <LTC6804_rdcv_reg>
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8001eae:	2300      	movs	r3, #0
 8001eb0:	773b      	strb	r3, [r7, #28]
 8001eb2:	e056      	b.n	8001f62 <LTC6804_rdcv+0x106>
			{
				// current_ic is used as an IC counter
				//a.ii
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)                  // This loop parses the read back data. Loops
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	76fb      	strb	r3, [r7, #27]
 8001eb8:	e026      	b.n	8001f08 <LTC6804_rdcv+0xac>
				{
					// once for each cell voltages in the register
					parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);
 8001eba:	7fbb      	ldrb	r3, [r7, #30]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	7fbb      	ldrb	r3, [r7, #30]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	6939      	ldr	r1, [r7, #16]
 8001eca:	440b      	add	r3, r1
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	817b      	strh	r3, [r7, #10]
					cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001ed8:	7f3a      	ldrb	r2, [r7, #28]
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	7ef9      	ldrb	r1, [r7, #27]
 8001eea:	7f7a      	ldrb	r2, [r7, #29]
 8001eec:	3a01      	subs	r2, #1
 8001eee:	7db8      	ldrb	r0, [r7, #22]
 8001ef0:	fb00 f202 	mul.w	r2, r0, r2
 8001ef4:	440a      	add	r2, r1
 8001ef6:	8979      	ldrh	r1, [r7, #10]
 8001ef8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					data_counter = data_counter + 2;
 8001efc:	7fbb      	ldrb	r3, [r7, #30]
 8001efe:	3302      	adds	r3, #2
 8001f00:	77bb      	strb	r3, [r7, #30]
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)                  // This loop parses the read back data. Loops
 8001f02:	7efb      	ldrb	r3, [r7, #27]
 8001f04:	3301      	adds	r3, #1
 8001f06:	76fb      	strb	r3, [r7, #27]
 8001f08:	7efa      	ldrb	r2, [r7, #27]
 8001f0a:	7dbb      	ldrb	r3, [r7, #22]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d3d4      	bcc.n	8001eba <LTC6804_rdcv+0x5e>
				}
				//a.iii
				received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1];
 8001f10:	7fbb      	ldrb	r3, [r7, #30]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4413      	add	r3, r2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	7fbb      	ldrb	r3, [r7, #30]
 8001f20:	3301      	adds	r3, #1
 8001f22:	6939      	ldr	r1, [r7, #16]
 8001f24:	440b      	add	r3, r1
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	81fb      	strh	r3, [r7, #14]
				data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT ]);
 8001f2e:	7f3b      	ldrb	r3, [r7, #28]
 8001f30:	7e3a      	ldrb	r2, [r7, #24]
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	441a      	add	r2, r3
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fbdf 	bl	8002704 <pec15_calc>
 8001f46:	4603      	mov	r3, r0
 8001f48:	81bb      	strh	r3, [r7, #12]
				if (received_pec != data_pec)
 8001f4a:	89fa      	ldrh	r2, [r7, #14]
 8001f4c:	89bb      	ldrh	r3, [r7, #12]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <LTC6804_rdcv+0xfa>
				{
					pec_error = -1;
 8001f52:	23ff      	movs	r3, #255	; 0xff
 8001f54:	77fb      	strb	r3, [r7, #31]
				}
				data_counter=data_counter+2;
 8001f56:	7fbb      	ldrb	r3, [r7, #30]
 8001f58:	3302      	adds	r3, #2
 8001f5a:	77bb      	strb	r3, [r7, #30]
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8001f5c:	7f3b      	ldrb	r3, [r7, #28]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	773b      	strb	r3, [r7, #28]
 8001f62:	7f3a      	ldrb	r2, [r7, #28]
 8001f64:	79bb      	ldrb	r3, [r7, #6]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d3a4      	bcc.n	8001eb4 <LTC6804_rdcv+0x58>
		for (uint8_t cell_reg = 1; cell_reg<5; cell_reg++)               //executes once for each of the LTC6804 cell voltage registers
 8001f6a:	7f7b      	ldrb	r3, [r7, #29]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	777b      	strb	r3, [r7, #29]
 8001f70:	7f7b      	ldrb	r3, [r7, #29]
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d993      	bls.n	8001e9e <LTC6804_rdcv+0x42>
 8001f76:	e060      	b.n	800203a <LTC6804_rdcv+0x1de>
	//1.b
	else
	{
		//b.i

		LTC6804_rdcv_reg(reg, total_ic,cell_data);
 8001f78:	79b9      	ldrb	r1, [r7, #6]
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f864 	bl	800204c <LTC6804_rdcv_reg>
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8001f84:	2300      	movs	r3, #0
 8001f86:	76bb      	strb	r3, [r7, #26]
 8001f88:	e053      	b.n	8002032 <LTC6804_rdcv+0x1d6>
		{
			// current_ic is used as an IC counter
			//b.ii
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)                    // This loop parses the read back data. Loops
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	767b      	strb	r3, [r7, #25]
 8001f8e:	e026      	b.n	8001fde <LTC6804_rdcv+0x182>
			{
				// once for each cell voltage in the register
				parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8);
 8001f90:	7fbb      	ldrb	r3, [r7, #30]
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4413      	add	r3, r2
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	7fbb      	ldrb	r3, [r7, #30]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	6939      	ldr	r1, [r7, #16]
 8001fa0:	440b      	add	r3, r1
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	817b      	strh	r3, [r7, #10]
				cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
 8001fae:	7eba      	ldrb	r2, [r7, #26]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	7e79      	ldrb	r1, [r7, #25]
 8001fc0:	79fa      	ldrb	r2, [r7, #7]
 8001fc2:	3a01      	subs	r2, #1
 8001fc4:	7db8      	ldrb	r0, [r7, #22]
 8001fc6:	fb00 f202 	mul.w	r2, r0, r2
 8001fca:	440a      	add	r2, r1
 8001fcc:	8979      	ldrh	r1, [r7, #10]
 8001fce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter= data_counter + 2;
 8001fd2:	7fbb      	ldrb	r3, [r7, #30]
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	77bb      	strb	r3, [r7, #30]
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)                    // This loop parses the read back data. Loops
 8001fd8:	7e7b      	ldrb	r3, [r7, #25]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	767b      	strb	r3, [r7, #25]
 8001fde:	7e7a      	ldrb	r2, [r7, #25]
 8001fe0:	7dbb      	ldrb	r3, [r7, #22]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d3d4      	bcc.n	8001f90 <LTC6804_rdcv+0x134>
			}
			//b.iii
			received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1];
 8001fe6:	7fbb      	ldrb	r3, [r7, #30]
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	7fbb      	ldrb	r3, [r7, #30]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	6939      	ldr	r1, [r7, #16]
 8001ffa:	440b      	add	r3, r1
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	4413      	add	r3, r2
 8002002:	81fb      	strh	r3, [r7, #14]
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8002004:	7ebb      	ldrb	r3, [r7, #26]
 8002006:	7e3a      	ldrb	r2, [r7, #24]
 8002008:	fb02 f303 	mul.w	r3, r2, r3
 800200c:	461a      	mov	r2, r3
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	441a      	add	r2, r3
 8002012:	7dfb      	ldrb	r3, [r7, #23]
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fb74 	bl	8002704 <pec15_calc>
 800201c:	4603      	mov	r3, r0
 800201e:	81bb      	strh	r3, [r7, #12]
			if (received_pec != data_pec)
 8002020:	89fa      	ldrh	r2, [r7, #14]
 8002022:	89bb      	ldrh	r3, [r7, #12]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <LTC6804_rdcv+0x1d0>
			{
				pec_error = -1;
 8002028:	23ff      	movs	r3, #255	; 0xff
 800202a:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 800202c:	7ebb      	ldrb	r3, [r7, #26]
 800202e:	3301      	adds	r3, #1
 8002030:	76bb      	strb	r3, [r7, #26]
 8002032:	7eba      	ldrb	r2, [r7, #26]
 8002034:	79bb      	ldrb	r3, [r7, #6]
 8002036:	429a      	cmp	r2, r3
 8002038:	d3a7      	bcc.n	8001f8a <LTC6804_rdcv+0x12e>
			}
		}
	}
	free(cell_data);
 800203a:	6938      	ldr	r0, [r7, #16]
 800203c:	f009 fcdc 	bl	800b9f8 <free>
	//2
	return(pec_error);
 8002040:	7ffb      	ldrb	r3, [r7, #31]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3720      	adds	r7, #32
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <LTC6804_rdcv_reg>:
 *************************************************/
void LTC6804_rdcv_reg(uint8_t reg,
		uint8_t total_ic,
		uint8_t *data
)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	603a      	str	r2, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
 8002058:	460b      	mov	r3, r1
 800205a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	if (reg == 1)
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d104      	bne.n	800206c <LTC6804_rdcv_reg+0x20>
	{
		cmd[1] = 0x04;
 8002062:	2304      	movs	r3, #4
 8002064:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 8002066:	2300      	movs	r3, #0
 8002068:	733b      	strb	r3, [r7, #12]
 800206a:	e016      	b.n	800209a <LTC6804_rdcv_reg+0x4e>
	}
	else if (reg == 2)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d104      	bne.n	800207c <LTC6804_rdcv_reg+0x30>
	{
		cmd[1] = 0x06;
 8002072:	2306      	movs	r3, #6
 8002074:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 8002076:	2300      	movs	r3, #0
 8002078:	733b      	strb	r3, [r7, #12]
 800207a:	e00e      	b.n	800209a <LTC6804_rdcv_reg+0x4e>
	}
	else if (reg == 3)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	2b03      	cmp	r3, #3
 8002080:	d104      	bne.n	800208c <LTC6804_rdcv_reg+0x40>
	{
		cmd[1] = 0x08;
 8002082:	2308      	movs	r3, #8
 8002084:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 8002086:	2300      	movs	r3, #0
 8002088:	733b      	strb	r3, [r7, #12]
 800208a:	e006      	b.n	800209a <LTC6804_rdcv_reg+0x4e>
	}
	else if (reg == 4)
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	2b04      	cmp	r3, #4
 8002090:	d103      	bne.n	800209a <LTC6804_rdcv_reg+0x4e>
	{
		cmd[1] = 0x0A;
 8002092:	230a      	movs	r3, #10
 8002094:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 8002096:	2300      	movs	r3, #0
 8002098:	733b      	strb	r3, [r7, #12]

	//2


	//3
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 800209a:	f000 fb1d 	bl	80026d8 <wakeup_idle>

	//4
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	e030      	b.n	8002106 <LTC6804_rdcv_reg+0xba>
	{
		cmd[0] = 0x80 + (current_ic<<3); //Setting address
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	3b80      	subs	r3, #128	; 0x80
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	733b      	strb	r3, [r7, #12]
		temp_pec = pec15_calc(2, cmd);
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	4619      	mov	r1, r3
 80020b8:	2002      	movs	r0, #2
 80020ba:	f000 fb23 	bl	8002704 <pec15_calc>
 80020be:	4603      	mov	r3, r0
 80020c0:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t)(temp_pec >> 8);
 80020c2:	8a7b      	ldrh	r3, [r7, #18]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	73bb      	strb	r3, [r7, #14]
		cmd[3] = (uint8_t)(temp_pec);
 80020cc:	8a7b      	ldrh	r3, [r7, #18]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	73fb      	strb	r3, [r7, #15]
		ltc6804_CS_RESET(ltc6804_CS_PIN);
 80020d2:	2200      	movs	r2, #0
 80020d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020d8:	480f      	ldr	r0, [pc, #60]	; (8002118 <LTC6804_rdcv_reg+0xcc>)
 80020da:	f007 f95c 	bl	8009396 <HAL_GPIO_WritePin>
		spi_write_read(cmd,4,&data[current_ic*8],8);
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	461a      	mov	r2, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	441a      	add	r2, r3
 80020e8:	f107 000c 	add.w	r0, r7, #12
 80020ec:	2308      	movs	r3, #8
 80020ee:	2104      	movs	r1, #4
 80020f0:	f000 fb56 	bl	80027a0 <spi_write_read>
		ltc6804_CS_SET(ltc6804_CS_PIN);
 80020f4:	2201      	movs	r2, #1
 80020f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020fa:	4807      	ldr	r0, [pc, #28]	; (8002118 <LTC6804_rdcv_reg+0xcc>)
 80020fc:	f007 f94b 	bl	8009396 <HAL_GPIO_WritePin>
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3301      	adds	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	429a      	cmp	r2, r3
 800210c:	dbca      	blt.n	80020a4 <LTC6804_rdcv_reg+0x58>
	}
}
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40011000 	.word	0x40011000

0800211c <LTC6804_rdaux>:
 *************************************************/
int8_t LTC6804_rdaux(uint8_t reg,
		uint8_t total_ic,
		uint16_t aux_codes[][6]
)
{
 800211c:	b5b0      	push	{r4, r5, r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	603a      	str	r2, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
 8002128:	460b      	mov	r3, r1
 800212a:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 800212c:	2308      	movs	r3, #8
 800212e:	75fb      	strb	r3, [r7, #23]
	const uint8_t BYT_IN_REG = 6;
 8002130:	2306      	movs	r3, #6
 8002132:	75bb      	strb	r3, [r7, #22]
	const uint8_t GPIO_IN_REG = 3;
 8002134:	2303      	movs	r3, #3
 8002136:	757b      	strb	r3, [r7, #21]

	uint8_t *data;
	uint8_t data_counter = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int8_t pec_error = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint16_t received_pec;
	uint16_t data_pec;
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	79ba      	ldrb	r2, [r7, #6]
 8002148:	fb02 f303 	mul.w	r3, r2, r3
 800214c:	4618      	mov	r0, r3
 800214e:	f009 fc4b 	bl	800b9e8 <malloc>
 8002152:	4603      	mov	r3, r0
 8002154:	613b      	str	r3, [r7, #16]
	//1.a
	if (reg == 0)
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	f040 808b 	bne.w	8002274 <LTC6804_rdaux+0x158>
	{
		//a.i
		for (uint8_t gpio_reg = 1; gpio_reg<3; gpio_reg++)           //executes once for each of the LTC6804 aux voltage registers
 800215e:	2301      	movs	r3, #1
 8002160:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002164:	e080      	b.n	8002268 <LTC6804_rdaux+0x14c>
		{
			data_counter = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			LTC6804_rdaux_reg(gpio_reg, total_ic,data);
 800216c:	79b9      	ldrb	r1, [r7, #6]
 800216e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f8eb 	bl	8002350 <LTC6804_rdaux_reg>
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // This loop executes once for each LTC6804
 800217a:	2300      	movs	r3, #0
 800217c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002180:	e068      	b.n	8002254 <LTC6804_rdaux+0x138>
			{
				// current_ic is used as an IC counter
				//a.ii
				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses GPIO voltages stored in the register
 8002182:	2300      	movs	r3, #0
 8002184:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002188:	e02e      	b.n	80021e8 <LTC6804_rdaux+0xcc>
				{

					aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)] = data[data_counter] + (data[data_counter+1]<<8);
 800218a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b298      	uxth	r0, r3
 8002196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800219a:	3301      	adds	r3, #1
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	b299      	uxth	r1, r3
 80021a8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	461a      	mov	r2, r3
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 80021be:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80021c2:	3a01      	subs	r2, #1
 80021c4:	7d7d      	ldrb	r5, [r7, #21]
 80021c6:	fb05 f202 	mul.w	r2, r5, r2
 80021ca:	4422      	add	r2, r4
 80021cc:	4401      	add	r1, r0
 80021ce:	b289      	uxth	r1, r1
 80021d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					data_counter=data_counter+2;
 80021d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021d8:	3302      	adds	r3, #2
 80021da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses GPIO voltages stored in the register
 80021de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021e2:	3301      	adds	r3, #1
 80021e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021ec:	7d7b      	ldrb	r3, [r7, #21]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d3cb      	bcc.n	800218a <LTC6804_rdaux+0x6e>

				}
				//a.iii
				received_pec = (data[data_counter]<<8)+ data[data_counter+1];
 80021f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4413      	add	r3, r2
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	b29a      	uxth	r2, r3
 8002202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002206:	3301      	adds	r3, #1
 8002208:	6939      	ldr	r1, [r7, #16]
 800220a:	440b      	add	r3, r1
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	4413      	add	r3, r2
 8002212:	81fb      	strh	r3, [r7, #14]
				data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8002214:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002218:	7dfa      	ldrb	r2, [r7, #23]
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	461a      	mov	r2, r3
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	441a      	add	r2, r3
 8002224:	7dbb      	ldrb	r3, [r7, #22]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f000 fa6b 	bl	8002704 <pec15_calc>
 800222e:	4603      	mov	r3, r0
 8002230:	81bb      	strh	r3, [r7, #12]
				if (received_pec != data_pec)
 8002232:	89fa      	ldrh	r2, [r7, #14]
 8002234:	89bb      	ldrh	r3, [r7, #12]
 8002236:	429a      	cmp	r2, r3
 8002238:	d002      	beq.n	8002240 <LTC6804_rdaux+0x124>
				{
					pec_error = -1;
 800223a:	23ff      	movs	r3, #255	; 0xff
 800223c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				}

				data_counter=data_counter+2;
 8002240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002244:	3302      	adds	r3, #2
 8002246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // This loop executes once for each LTC6804
 800224a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800224e:	3301      	adds	r3, #1
 8002250:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002254:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002258:	79bb      	ldrb	r3, [r7, #6]
 800225a:	429a      	cmp	r2, r3
 800225c:	d391      	bcc.n	8002182 <LTC6804_rdaux+0x66>
		for (uint8_t gpio_reg = 1; gpio_reg<3; gpio_reg++)           //executes once for each of the LTC6804 aux voltage registers
 800225e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002262:	3301      	adds	r3, #1
 8002264:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002268:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800226c:	2b02      	cmp	r3, #2
 800226e:	f67f af7a 	bls.w	8002166 <LTC6804_rdaux+0x4a>
 8002272:	e063      	b.n	800233c <LTC6804_rdaux+0x220>

	}
	else
	{
		//b.i
		LTC6804_rdaux_reg(reg, total_ic, data);
 8002274:	79b9      	ldrb	r1, [r7, #6]
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f868 	bl	8002350 <LTC6804_rdaux_reg>
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	e056      	b.n	8002334 <LTC6804_rdaux+0x218>
		{
			// current_ic is used as an IC counter
			//b.ii
			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)  // This loop parses the read back data. Loops
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	e029      	b.n	80022e0 <LTC6804_rdaux+0x1c4>
			{
				// once for each aux voltage in the register
				aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)] = 0x0000FFFF & (data[data_counter] + (data[data_counter+1]<<8));
 800228c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b298      	uxth	r0, r3
 8002298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800229c:	3301      	adds	r3, #1
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	b299      	uxth	r1, r3
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	461a      	mov	r2, r3
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	4413      	add	r3, r2
 80022ba:	79fa      	ldrb	r2, [r7, #7]
 80022bc:	3a01      	subs	r2, #1
 80022be:	7d7c      	ldrb	r4, [r7, #21]
 80022c0:	fb04 f402 	mul.w	r4, r4, r2
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4422      	add	r2, r4
 80022c8:	4401      	add	r1, r0
 80022ca:	b289      	uxth	r1, r1
 80022cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter=data_counter+2;
 80022d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022d4:	3302      	adds	r3, #2
 80022d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)  // This loop parses the read back data. Loops
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	3301      	adds	r3, #1
 80022de:	61bb      	str	r3, [r7, #24]
 80022e0:	7d7b      	ldrb	r3, [r7, #21]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	dbd1      	blt.n	800228c <LTC6804_rdaux+0x170>
			}
			//b.iii
			received_pec = (data[data_counter]<<8) + data[data_counter+1];
 80022e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022fc:	3301      	adds	r3, #1
 80022fe:	6939      	ldr	r1, [r7, #16]
 8002300:	440b      	add	r3, r1
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	4413      	add	r3, r2
 8002308:	81fb      	strh	r3, [r7, #14]
			data_pec = pec15_calc(6, &data[current_ic*8]);
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	461a      	mov	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4413      	add	r3, r2
 8002314:	4619      	mov	r1, r3
 8002316:	2006      	movs	r0, #6
 8002318:	f000 f9f4 	bl	8002704 <pec15_calc>
 800231c:	4603      	mov	r3, r0
 800231e:	81bb      	strh	r3, [r7, #12]
			if (received_pec != data_pec)
 8002320:	89fa      	ldrh	r2, [r7, #14]
 8002322:	89bb      	ldrh	r3, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d002      	beq.n	800232e <LTC6804_rdaux+0x212>
			{
				pec_error = -1;
 8002328:	23ff      	movs	r3, #255	; 0xff
 800232a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3301      	adds	r3, #1
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	79bb      	ldrb	r3, [r7, #6]
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	429a      	cmp	r2, r3
 800233a:	dba4      	blt.n	8002286 <LTC6804_rdaux+0x16a>
			}
		}
	}
	free(data);
 800233c:	6938      	ldr	r0, [r7, #16]
 800233e:	f009 fb5b 	bl	800b9f8 <free>
	return (pec_error);
 8002342:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8002346:	4618      	mov	r0, r3
 8002348:	3728      	adds	r7, #40	; 0x28
 800234a:	46bd      	mov	sp, r7
 800234c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002350 <LTC6804_rdaux_reg>:
 *************************************************/
void LTC6804_rdaux_reg(uint8_t reg,
		uint8_t total_ic,
		uint8_t *data
)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	603a      	str	r2, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
 800235c:	460b      	mov	r3, r1
 800235e:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	//1
	if (reg == 1)
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d104      	bne.n	8002370 <LTC6804_rdaux_reg+0x20>
	{
		cmd[1] = 0x0C;
 8002366:	230c      	movs	r3, #12
 8002368:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 800236a:	2300      	movs	r3, #0
 800236c:	733b      	strb	r3, [r7, #12]
 800236e:	e00b      	b.n	8002388 <LTC6804_rdaux_reg+0x38>
	}
	else if (reg == 2)
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d104      	bne.n	8002380 <LTC6804_rdaux_reg+0x30>
	{
		cmd[1] = 0x0e;
 8002376:	230e      	movs	r3, #14
 8002378:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 800237a:	2300      	movs	r3, #0
 800237c:	733b      	strb	r3, [r7, #12]
 800237e:	e003      	b.n	8002388 <LTC6804_rdaux_reg+0x38>
	}
	else
	{
		cmd[1] = 0x0C;
 8002380:	230c      	movs	r3, #12
 8002382:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 8002384:	2300      	movs	r3, #0
 8002386:	733b      	strb	r3, [r7, #12]
	}
	//2
	cmd_pec = pec15_calc(2, cmd);
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	4619      	mov	r1, r3
 800238e:	2002      	movs	r0, #2
 8002390:	f000 f9b8 	bl	8002704 <pec15_calc>
 8002394:	4603      	mov	r3, r0
 8002396:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002398:	8a7b      	ldrh	r3, [r7, #18]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	b29b      	uxth	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t)(cmd_pec);
 80023a2:	8a7b      	ldrh	r3, [r7, #18]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	73fb      	strb	r3, [r7, #15]

	//3
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake, this command can be removed.
 80023a8:	f000 f996 	bl	80026d8 <wakeup_idle>
	//4
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	e030      	b.n	8002414 <LTC6804_rdaux_reg+0xc4>
	{
		cmd[0] = 0x80 + (current_ic<<3); //Setting address
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	3b80      	subs	r3, #128	; 0x80
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	733b      	strb	r3, [r7, #12]
		cmd_pec = pec15_calc(2, cmd);
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4619      	mov	r1, r3
 80023c6:	2002      	movs	r0, #2
 80023c8:	f000 f99c 	bl	8002704 <pec15_calc>
 80023cc:	4603      	mov	r3, r0
 80023ce:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t)(cmd_pec >> 8);
 80023d0:	8a7b      	ldrh	r3, [r7, #18]
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	73bb      	strb	r3, [r7, #14]
		cmd[3] = (uint8_t)(cmd_pec);
 80023da:	8a7b      	ldrh	r3, [r7, #18]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	73fb      	strb	r3, [r7, #15]
		ltc6804_CS_RESET(ltc6804_CS_PIN);
 80023e0:	2200      	movs	r2, #0
 80023e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023e6:	4810      	ldr	r0, [pc, #64]	; (8002428 <LTC6804_rdaux_reg+0xd8>)
 80023e8:	f006 ffd5 	bl	8009396 <HAL_GPIO_WritePin>
		spi_write_read(cmd,4,&data[current_ic*8],8);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	461a      	mov	r2, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	441a      	add	r2, r3
 80023f6:	f107 000c 	add.w	r0, r7, #12
 80023fa:	2308      	movs	r3, #8
 80023fc:	2104      	movs	r1, #4
 80023fe:	f000 f9cf 	bl	80027a0 <spi_write_read>
		ltc6804_CS_SET(ltc6804_CS_PIN);
 8002402:	2201      	movs	r2, #1
 8002404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002408:	4807      	ldr	r0, [pc, #28]	; (8002428 <LTC6804_rdaux_reg+0xd8>)
 800240a:	f006 ffc4 	bl	8009396 <HAL_GPIO_WritePin>
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	3301      	adds	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	79bb      	ldrb	r3, [r7, #6]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	dbca      	blt.n	80023b2 <LTC6804_rdaux_reg+0x62>
	}
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40011000 	.word	0x40011000

0800242c <LTC6804_wrcfg>:

 The function will calculate the needed PEC codes for the write data
 and then transmit data to the ICs on a stack.
 ********************************************************/
void LTC6804_wrcfg(uint8_t total_ic,uint8_t config[][6])
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 8002438:	2306      	movs	r3, #6
 800243a:	75fb      	strb	r3, [r7, #23]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	3304      	adds	r3, #4
 8002444:	75bb      	strb	r3, [r7, #22]
	uint8_t *cmd;
	uint16_t temp_pec;
	uint8_t cmd_index; //command counter

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8002446:	7dbb      	ldrb	r3, [r7, #22]
 8002448:	4618      	mov	r0, r3
 800244a:	f009 facd 	bl	800b9e8 <malloc>
 800244e:	4603      	mov	r3, r0
 8002450:	613b      	str	r3, [r7, #16]
	//1
	cmd[0] = 0x00;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x01;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	3301      	adds	r3, #1
 800245c:	2201      	movs	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x3d;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	3302      	adds	r3, #2
 8002464:	223d      	movs	r2, #61	; 0x3d
 8002466:	701a      	strb	r2, [r3, #0]
	cmd[3] = 0x6e;
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	3303      	adds	r3, #3
 800246c:	226e      	movs	r2, #110	; 0x6e
 800246e:	701a      	strb	r2, [r3, #0]

	//2
	cmd_index = 4;
 8002470:	2304      	movs	r3, #4
 8002472:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic ; current_ic++)       // executes for each LTC6804 in stack,
 8002474:	2300      	movs	r3, #0
 8002476:	77bb      	strb	r3, [r7, #30]
 8002478:	e03f      	b.n	80024fa <LTC6804_wrcfg+0xce>
	{
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each byte in the CFGR register
 800247a:	2300      	movs	r3, #0
 800247c:	777b      	strb	r3, [r7, #29]
 800247e:	e013      	b.n	80024a8 <LTC6804_wrcfg+0x7c>
		{
			// i is the byte counter

			cmd[cmd_index] = config[current_ic][current_byte];    //adding the config data to the array to be sent
 8002480:	7fba      	ldrb	r2, [r7, #30]
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	461a      	mov	r2, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	1899      	adds	r1, r3, r2
 8002490:	7f7a      	ldrb	r2, [r7, #29]
 8002492:	7ffb      	ldrb	r3, [r7, #31]
 8002494:	6938      	ldr	r0, [r7, #16]
 8002496:	4403      	add	r3, r0
 8002498:	5c8a      	ldrb	r2, [r1, r2]
 800249a:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 800249c:	7ffb      	ldrb	r3, [r7, #31]
 800249e:	3301      	adds	r3, #1
 80024a0:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each byte in the CFGR register
 80024a2:	7f7b      	ldrb	r3, [r7, #29]
 80024a4:	3301      	adds	r3, #1
 80024a6:	777b      	strb	r3, [r7, #29]
 80024a8:	7f7a      	ldrb	r2, [r7, #29]
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d3e7      	bcc.n	8002480 <LTC6804_wrcfg+0x54>
		}
		//3
		temp_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic][0]);// calculating the PEC for each board
 80024b0:	7fba      	ldrb	r2, [r7, #30]
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	461a      	mov	r2, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f91c 	bl	8002704 <pec15_calc>
 80024cc:	4603      	mov	r3, r0
 80024ce:	81fb      	strh	r3, [r7, #14]
		cmd[cmd_index] = (uint8_t)(temp_pec >> 8);
 80024d0:	89fb      	ldrh	r3, [r7, #14]
 80024d2:	0a1b      	lsrs	r3, r3, #8
 80024d4:	b299      	uxth	r1, r3
 80024d6:	7ffb      	ldrb	r3, [r7, #31]
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	b2ca      	uxtb	r2, r1
 80024de:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)temp_pec;
 80024e0:	7ffb      	ldrb	r3, [r7, #31]
 80024e2:	3301      	adds	r3, #1
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	89fa      	ldrh	r2, [r7, #14]
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80024ee:	7ffb      	ldrb	r3, [r7, #31]
 80024f0:	3302      	adds	r3, #2
 80024f2:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic ; current_ic++)       // executes for each LTC6804 in stack,
 80024f4:	7fbb      	ldrb	r3, [r7, #30]
 80024f6:	3301      	adds	r3, #1
 80024f8:	77bb      	strb	r3, [r7, #30]
 80024fa:	7fba      	ldrb	r2, [r7, #30]
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d3bb      	bcc.n	800247a <LTC6804_wrcfg+0x4e>
	}

	//4
	wakeup_idle ();                                //This will guarantee that the LTC6804 isoSPI port is awake.This command can be removed.
 8002502:	f000 f8e9 	bl	80026d8 <wakeup_idle>
	//5
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	e036      	b.n	800257a <LTC6804_wrcfg+0x14e>
	{
		cmd[0] = 0x80 + (current_ic<<3); //Setting address
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3b80      	subs	r3, #128	; 0x80
 8002516:	b2da      	uxtb	r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	701a      	strb	r2, [r3, #0]
		temp_pec = pec15_calc(2, cmd);
 800251c:	6939      	ldr	r1, [r7, #16]
 800251e:	2002      	movs	r0, #2
 8002520:	f000 f8f0 	bl	8002704 <pec15_calc>
 8002524:	4603      	mov	r3, r0
 8002526:	81fb      	strh	r3, [r7, #14]
		cmd[2] = (uint8_t)(temp_pec >> 8);
 8002528:	89fb      	ldrh	r3, [r7, #14]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	b29a      	uxth	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	3302      	adds	r3, #2
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]
		cmd[3] = (uint8_t)(temp_pec);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	3303      	adds	r3, #3
 800253a:	89fa      	ldrh	r2, [r7, #14]
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]
		ltc6804_CS_RESET(ltc6804_CS_PIN);
 8002540:	2200      	movs	r2, #0
 8002542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002546:	4812      	ldr	r0, [pc, #72]	; (8002590 <LTC6804_wrcfg+0x164>)
 8002548:	f006 ff25 	bl	8009396 <HAL_GPIO_WritePin>
		spi_write_array(4,cmd);
 800254c:	6939      	ldr	r1, [r7, #16]
 800254e:	2004      	movs	r0, #4
 8002550:	f000 f90a 	bl	8002768 <spi_write_array>
		spi_write_array(8,&cmd[4+(8*current_ic)]);
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	3304      	adds	r3, #4
 800255a:	461a      	mov	r2, r3
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	4619      	mov	r1, r3
 8002562:	2008      	movs	r0, #8
 8002564:	f000 f900 	bl	8002768 <spi_write_array>
		ltc6804_CS_SET(ltc6804_CS_PIN);
 8002568:	2201      	movs	r2, #1
 800256a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800256e:	4808      	ldr	r0, [pc, #32]	; (8002590 <LTC6804_wrcfg+0x164>)
 8002570:	f006 ff11 	bl	8009396 <HAL_GPIO_WritePin>
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	3301      	adds	r3, #1
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	429a      	cmp	r2, r3
 8002580:	dbc4      	blt.n	800250c <LTC6804_wrcfg+0xe0>
	}
	free(cmd);
 8002582:	6938      	ldr	r0, [r7, #16]
 8002584:	f009 fa38 	bl	800b9f8 <free>
}
 8002588:	bf00      	nop
 800258a:	3720      	adds	r7, #32
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40011000 	.word	0x40011000

08002594 <LTC6804_rdstata>:
  0: Data read back has matching PEC

  -1: Data read back has incorrect PEC
 ********************************************************/
int8_t LTC6804_rdstata(uint8_t total_ic, uint8_t r_config[][8])
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 8;
 80025a0:	2308      	movs	r3, #8
 80025a2:	757b      	strb	r3, [r7, #21]

	uint8_t cmd[4];
	uint8_t *rx_data;
	int8_t pec_error = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	77fb      	strb	r3, [r7, #31]
	uint16_t data_pec;
	uint16_t received_pec;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4618      	mov	r0, r3
 80025ae:	f009 fa1b 	bl	800b9e8 <malloc>
 80025b2:	4603      	mov	r3, r0
 80025b4:	613b      	str	r3, [r7, #16]
	//1
	cmd[0] = 0x00;
 80025b6:	2300      	movs	r3, #0
 80025b8:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x10;
 80025ba:	2310      	movs	r3, #16
 80025bc:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x2b;
 80025be:	232b      	movs	r3, #43	; 0x2b
 80025c0:	72bb      	strb	r3, [r7, #10]
	cmd[3] = 0x0A;
 80025c2:	230a      	movs	r3, #10
 80025c4:	72fb      	strb	r3, [r7, #11]

	//2
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 80025c6:	f000 f887 	bl	80026d8 <wakeup_idle>
	//3
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	e030      	b.n	8002632 <LTC6804_rdstata+0x9e>
	{
		cmd[0] = 0x80 + (current_ic<<3); //Setting address
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	3b80      	subs	r3, #128	; 0x80
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	723b      	strb	r3, [r7, #8]
		data_pec = pec15_calc(2, cmd);
 80025de:	f107 0308 	add.w	r3, r7, #8
 80025e2:	4619      	mov	r1, r3
 80025e4:	2002      	movs	r0, #2
 80025e6:	f000 f88d 	bl	8002704 <pec15_calc>
 80025ea:	4603      	mov	r3, r0
 80025ec:	81bb      	strh	r3, [r7, #12]
		cmd[2] = (uint8_t)(data_pec >> 8);
 80025ee:	89bb      	ldrh	r3, [r7, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)(data_pec);
 80025f8:	89bb      	ldrh	r3, [r7, #12]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	72fb      	strb	r3, [r7, #11]
		ltc6804_CS_RESET(ltc6804_CS_PIN);
 80025fe:	2200      	movs	r2, #0
 8002600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002604:	4833      	ldr	r0, [pc, #204]	; (80026d4 <LTC6804_rdstata+0x140>)
 8002606:	f006 fec6 	bl	8009396 <HAL_GPIO_WritePin>
		spi_write_read(cmd,4,&rx_data[current_ic*8],8);
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	461a      	mov	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	441a      	add	r2, r3
 8002614:	f107 0008 	add.w	r0, r7, #8
 8002618:	2308      	movs	r3, #8
 800261a:	2104      	movs	r1, #4
 800261c:	f000 f8c0 	bl	80027a0 <spi_write_read>
		ltc6804_CS_SET(ltc6804_CS_PIN);
 8002620:	2201      	movs	r2, #1
 8002622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002626:	482b      	ldr	r0, [pc, #172]	; (80026d4 <LTC6804_rdstata+0x140>)
 8002628:	f006 feb5 	bl	8009396 <HAL_GPIO_WritePin>
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	3301      	adds	r3, #1
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	429a      	cmp	r2, r3
 8002638:	dbca      	blt.n	80025d0 <LTC6804_rdstata+0x3c>
	}

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) //executes for each LTC6804 in the stack
 800263a:	2300      	movs	r3, #0
 800263c:	75fb      	strb	r3, [r7, #23]
 800263e:	e03c      	b.n	80026ba <LTC6804_rdstata+0x126>
	{
		//4.a
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002640:	2300      	movs	r3, #0
 8002642:	75bb      	strb	r3, [r7, #22]
 8002644:	e012      	b.n	800266c <LTC6804_rdstata+0xd8>
		{
			r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 8002646:	7dba      	ldrb	r2, [r7, #22]
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	7d79      	ldrb	r1, [r7, #21]
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	461a      	mov	r2, r3
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1899      	adds	r1, r3, r2
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	441a      	add	r2, r3
 8002660:	7dbb      	ldrb	r3, [r7, #22]
 8002662:	7809      	ldrb	r1, [r1, #0]
 8002664:	54d1      	strb	r1, [r2, r3]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002666:	7dbb      	ldrb	r3, [r7, #22]
 8002668:	3301      	adds	r3, #1
 800266a:	75bb      	strb	r3, [r7, #22]
 800266c:	7dba      	ldrb	r2, [r7, #22]
 800266e:	7d7b      	ldrb	r3, [r7, #21]
 8002670:	429a      	cmp	r2, r3
 8002672:	d3e8      	bcc.n	8002646 <LTC6804_rdstata+0xb2>
		}
		//4.b
		received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	4413      	add	r3, r2
 800267c:	799b      	ldrb	r3, [r3, #6]
 800267e:	b29b      	uxth	r3, r3
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	b29a      	uxth	r2, r3
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	6839      	ldr	r1, [r7, #0]
 800268a:	440b      	add	r3, r1
 800268c:	79db      	ldrb	r3, [r3, #7]
 800268e:	b29b      	uxth	r3, r3
 8002690:	4413      	add	r3, r2
 8002692:	81fb      	strh	r3, [r7, #14]
		data_pec = pec15_calc(6, &r_config[current_ic][0]);
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	4413      	add	r3, r2
 800269c:	4619      	mov	r1, r3
 800269e:	2006      	movs	r0, #6
 80026a0:	f000 f830 	bl	8002704 <pec15_calc>
 80026a4:	4603      	mov	r3, r0
 80026a6:	81bb      	strh	r3, [r7, #12]
		if (received_pec != data_pec)
 80026a8:	89fa      	ldrh	r2, [r7, #14]
 80026aa:	89bb      	ldrh	r3, [r7, #12]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <LTC6804_rdstata+0x120>
		{
			pec_error = -1;
 80026b0:	23ff      	movs	r3, #255	; 0xff
 80026b2:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) //executes for each LTC6804 in the stack
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
 80026b6:	3301      	adds	r3, #1
 80026b8:	75fb      	strb	r3, [r7, #23]
 80026ba:	7dfa      	ldrb	r2, [r7, #23]
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d3be      	bcc.n	8002640 <LTC6804_rdstata+0xac>
		}
	}
	free(rx_data);
 80026c2:	6938      	ldr	r0, [r7, #16]
 80026c4:	f009 f998 	bl	800b9f8 <free>
	//5
	return(pec_error);
 80026c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3720      	adds	r7, #32
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40011000 	.word	0x40011000

080026d8 <wakeup_idle>:
/*!****************************************************
  \brief Wake isoSPI up from idle state
 Generic wakeup commannd to wake isoSPI up out of idle
 *****************************************************/
void wakeup_idle()
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 80026dc:	2200      	movs	r2, #0
 80026de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026e2:	4807      	ldr	r0, [pc, #28]	; (8002700 <wakeup_idle+0x28>)
 80026e4:	f006 fe57 	bl	8009396 <HAL_GPIO_WritePin>
	HAL_Delay(1); //Guarantees the isoSPI will be in ready mode
 80026e8:	2001      	movs	r0, #1
 80026ea:	f004 fda7 	bl	800723c <HAL_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 80026ee:	2201      	movs	r2, #1
 80026f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <wakeup_idle+0x28>)
 80026f6:	f006 fe4e 	bl	8009396 <HAL_GPIO_WritePin>
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40011000 	.word	0x40011000

08002704 <pec15_calc>:


@return  The calculated pec15 as an unsigned int16_t
 ***********************************************************/
uint16_t pec15_calc(uint8_t len, uint8_t *data)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;

	remainder = 16;//initialize the PEC
 8002710:	2310      	movs	r3, #16
 8002712:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8002714:	2300      	movs	r3, #0
 8002716:	737b      	strb	r3, [r7, #13]
 8002718:	e018      	b.n	800274c <pec15_calc+0x48>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 800271a:	89fb      	ldrh	r3, [r7, #14]
 800271c:	09db      	lsrs	r3, r3, #7
 800271e:	b29a      	uxth	r2, r3
 8002720:	7b7b      	ldrb	r3, [r7, #13]
 8002722:	6839      	ldr	r1, [r7, #0]
 8002724:	440b      	add	r3, r1
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	4053      	eors	r3, r2
 800272c:	b29b      	uxth	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 8002732:	89fb      	ldrh	r3, [r7, #14]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	b29a      	uxth	r2, r3
 8002738:	897b      	ldrh	r3, [r7, #10]
 800273a:	490a      	ldr	r1, [pc, #40]	; (8002764 <pec15_calc+0x60>)
 800273c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002740:	b29b      	uxth	r3, r3
 8002742:	4053      	eors	r3, r2
 8002744:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8002746:	7b7b      	ldrb	r3, [r7, #13]
 8002748:	3301      	adds	r3, #1
 800274a:	737b      	strb	r3, [r7, #13]
 800274c:	7b7a      	ldrb	r2, [r7, #13]
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	429a      	cmp	r2, r3
 8002752:	d3e2      	bcc.n	800271a <pec15_calc+0x16>
	}
	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002754:	89fb      	ldrh	r3, [r7, #14]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	b29b      	uxth	r3, r3
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	080106a8 	.word	0x080106a8

08002768 <spi_write_array>:

 */
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	6039      	str	r1, [r7, #0]
 8002772:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < len; i++)
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e009      	b.n	800278e <spi_write_array+0x26>
	{
		ltc6804_Write8((char)data[i]);
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	4413      	add	r3, r2
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fa02 	bl	8001b8c <ltc6804_Write8>
	for (uint8_t i = 0; i < len; i++)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	3301      	adds	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	429a      	cmp	r2, r3
 8002794:	d3f1      	bcc.n	800277a <spi_write_array+0x12>
	}
}
 8002796:	bf00      	nop
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
		uint8_t tx_len, //length of the tx data arry
		uint8_t *rx_data,//Input: array that will store the data read by the SPI port
		uint8_t rx_len //Option: number of bytes to be read from the SPI port
)
{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	461a      	mov	r2, r3
 80027ac:	460b      	mov	r3, r1
 80027ae:	72fb      	strb	r3, [r7, #11]
 80027b0:	4613      	mov	r3, r2
 80027b2:	72bb      	strb	r3, [r7, #10]
	for (uint8_t i = 0; i < tx_len; i++)
 80027b4:	2300      	movs	r3, #0
 80027b6:	75fb      	strb	r3, [r7, #23]
 80027b8:	e009      	b.n	80027ce <spi_write_read+0x2e>
	{
		ltc6804_Write8(tx_Data[i]);
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff f9e2 	bl	8001b8c <ltc6804_Write8>
	for (uint8_t i = 0; i < tx_len; i++)
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	3301      	adds	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
 80027ce:	7dfa      	ldrb	r2, [r7, #23]
 80027d0:	7afb      	ldrb	r3, [r7, #11]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d3f1      	bcc.n	80027ba <spi_write_read+0x1a>

	}

	for (uint8_t i = 0; i < rx_len; i++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	75bb      	strb	r3, [r7, #22]
 80027da:	e00a      	b.n	80027f2 <spi_write_read+0x52>
	{
		rx_data[i] = (uint8_t)ltc6804_Read8(0xFF);
 80027dc:	7dbb      	ldrb	r3, [r7, #22]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	18d4      	adds	r4, r2, r3
 80027e2:	20ff      	movs	r0, #255	; 0xff
 80027e4:	f7ff fa12 	bl	8001c0c <ltc6804_Read8>
 80027e8:	4603      	mov	r3, r0
 80027ea:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < rx_len; i++)
 80027ec:	7dbb      	ldrb	r3, [r7, #22]
 80027ee:	3301      	adds	r3, #1
 80027f0:	75bb      	strb	r3, [r7, #22]
 80027f2:	7dba      	ldrb	r2, [r7, #22]
 80027f4:	7abb      	ldrb	r3, [r7, #10]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d3f0      	bcc.n	80027dc <spi_write_read+0x3c>
	}

}
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	bd90      	pop	{r4, r7, pc}
 8002804:	0000      	movs	r0, r0
	...

08002808 <read_voltage_percell>:

void read_voltage_percell(void)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af00      	add	r7, sp, #0
	uint16_t	cellvoltage_16bit[1][12];

	LTC6804_adcv();
 800280e:	f7ff fa8d 	bl	8001d2c <LTC6804_adcv>
	HAL_Delay(1);
 8002812:	2001      	movs	r0, #1
 8002814:	f004 fd12 	bl	800723c <HAL_Delay>
	LTC6804_rdcv(0, 1, cellvoltage_16bit);
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	461a      	mov	r2, r3
 800281c:	2101      	movs	r1, #1
 800281e:	2000      	movs	r0, #0
 8002820:	f7ff fb1c 	bl	8001e5c <LTC6804_rdcv>
	HAL_Delay(1);
 8002824:	2001      	movs	r0, #1
 8002826:	f004 fd09 	bl	800723c <HAL_Delay>

	for(uint8_t ik=0;ik<11;ik++) {
 800282a:	2300      	movs	r3, #0
 800282c:	77fb      	strb	r3, [r7, #31]
 800282e:	e03b      	b.n	80028a8 <read_voltage_percell+0xa0>
		if(ik >= 5)
 8002830:	7ffb      	ldrb	r3, [r7, #31]
 8002832:	2b04      	cmp	r3, #4
 8002834:	d91b      	bls.n	800286e <read_voltage_percell+0x66>
			cellvoltage_float[ik] = (float) (cellvoltage_16bit[0][ik+1] / 10000.0);
 8002836:	7ffb      	ldrb	r3, [r7, #31]
 8002838:	3301      	adds	r3, #1
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	f107 0220 	add.w	r2, r7, #32
 8002840:	4413      	add	r3, r2
 8002842:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd fe48 	bl	80004dc <__aeabi_i2d>
 800284c:	a31a      	add	r3, pc, #104	; (adr r3, 80028b8 <read_voltage_percell+0xb0>)
 800284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002852:	f7fd ffd7 	bl	8000804 <__aeabi_ddiv>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	7ffc      	ldrb	r4, [r7, #31]
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f7fe f99e 	bl	8000ba0 <__aeabi_d2f>
 8002864:	4603      	mov	r3, r0
 8002866:	4a16      	ldr	r2, [pc, #88]	; (80028c0 <read_voltage_percell+0xb8>)
 8002868:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800286c:	e019      	b.n	80028a2 <read_voltage_percell+0x9a>
		else
			cellvoltage_float[ik] = (float) (cellvoltage_16bit[0][ik] / 10000.0);
 800286e:	7ffb      	ldrb	r3, [r7, #31]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	f107 0220 	add.w	r2, r7, #32
 8002876:	4413      	add	r3, r2
 8002878:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fe2d 	bl	80004dc <__aeabi_i2d>
 8002882:	a30d      	add	r3, pc, #52	; (adr r3, 80028b8 <read_voltage_percell+0xb0>)
 8002884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002888:	f7fd ffbc 	bl	8000804 <__aeabi_ddiv>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	7ffc      	ldrb	r4, [r7, #31]
 8002892:	4610      	mov	r0, r2
 8002894:	4619      	mov	r1, r3
 8002896:	f7fe f983 	bl	8000ba0 <__aeabi_d2f>
 800289a:	4603      	mov	r3, r0
 800289c:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <read_voltage_percell+0xb8>)
 800289e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t ik=0;ik<11;ik++) {
 80028a2:	7ffb      	ldrb	r3, [r7, #31]
 80028a4:	3301      	adds	r3, #1
 80028a6:	77fb      	strb	r3, [r7, #31]
 80028a8:	7ffb      	ldrb	r3, [r7, #31]
 80028aa:	2b0a      	cmp	r3, #10
 80028ac:	d9c0      	bls.n	8002830 <read_voltage_percell+0x28>
	}
}
 80028ae:	bf00      	nop
 80028b0:	bf00      	nop
 80028b2:	3724      	adds	r7, #36	; 0x24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd90      	pop	{r4, r7, pc}
 80028b8:	00000000 	.word	0x00000000
 80028bc:	40c38800 	.word	0x40c38800
 80028c0:	200003e4 	.word	0x200003e4

080028c4 <read_aux_adc>:

void read_aux_adc(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
	LTC6804_adax();
 80028c8:	f7ff fa62 	bl	8001d90 <LTC6804_adax>
	HAL_Delay(1);
 80028cc:	2001      	movs	r0, #1
 80028ce:	f004 fcb5 	bl	800723c <HAL_Delay>
	LTC6804_rdaux(0, 1, adc_aux);
 80028d2:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <read_aux_adc+0x24>)
 80028d4:	2101      	movs	r1, #1
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7ff fc20 	bl	800211c <LTC6804_rdaux>
	HAL_Delay(1);
 80028dc:	2001      	movs	r0, #1
 80028de:	f004 fcad 	bl	800723c <HAL_Delay>
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	2000039c 	.word	0x2000039c
 80028ec:	00000000 	.word	0x00000000

080028f0 <read_sumvoltage>:

void read_sumvoltage(float *sum_voltage, float *analog_supply)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
	LTC6804_adstat();
 80028fa:	f7ff fa7b 	bl	8001df4 <LTC6804_adstat>
	HAL_Delay(1);
 80028fe:	2001      	movs	r0, #1
 8002900:	f004 fc9c 	bl	800723c <HAL_Delay>
	LTC6804_rdstata(1, rd_config);
 8002904:	492a      	ldr	r1, [pc, #168]	; (80029b0 <read_sumvoltage+0xc0>)
 8002906:	2001      	movs	r0, #1
 8002908:	f7ff fe44 	bl	8002594 <LTC6804_rdstata>
	HAL_Delay(1);
 800290c:	2001      	movs	r0, #1
 800290e:	f004 fc95 	bl	800723c <HAL_Delay>

	*sum_voltage = (rd_config[0][0] | (rd_config[0][1] << 8)) * 20 * 0.1 / 1000.0;
 8002912:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <read_sumvoltage+0xc0>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <read_sumvoltage+0xc0>)
 800291a:	785b      	ldrb	r3, [r3, #1]
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	431a      	orrs	r2, r3
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fdd7 	bl	80004dc <__aeabi_i2d>
 800292e:	a31e      	add	r3, pc, #120	; (adr r3, 80029a8 <read_sumvoltage+0xb8>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd fe3c 	bl	80005b0 <__aeabi_dmul>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <read_sumvoltage+0xc4>)
 8002946:	f7fd ff5d 	bl	8000804 <__aeabi_ddiv>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	f7fe f925 	bl	8000ba0 <__aeabi_d2f>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	601a      	str	r2, [r3, #0]
	*analog_supply = (rd_config[0][4] | (rd_config[0][5] << 8)) * 0.1 / 1000.0;
 800295c:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <read_sumvoltage+0xc0>)
 800295e:	791b      	ldrb	r3, [r3, #4]
 8002960:	461a      	mov	r2, r3
 8002962:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <read_sumvoltage+0xc0>)
 8002964:	795b      	ldrb	r3, [r3, #5]
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	4313      	orrs	r3, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fdb6 	bl	80004dc <__aeabi_i2d>
 8002970:	a30d      	add	r3, pc, #52	; (adr r3, 80029a8 <read_sumvoltage+0xb8>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	f7fd fe1b 	bl	80005b0 <__aeabi_dmul>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <read_sumvoltage+0xc4>)
 8002988:	f7fd ff3c 	bl	8000804 <__aeabi_ddiv>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	f7fe f904 	bl	8000ba0 <__aeabi_d2f>
 8002998:	4602      	mov	r2, r0
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	601a      	str	r2, [r3, #0]
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	9999999a 	.word	0x9999999a
 80029ac:	3fb99999 	.word	0x3fb99999
 80029b0:	20000360 	.word	0x20000360
 80029b4:	408f4000 	.word	0x408f4000

080029b8 <get_balance_status>:


uint16_t get_balance_status(float Cell_Voltage_10data[10])
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	uint16_t balance_status;
	Cell_Voltage_Lowest=4.2;
 80029c0:	4b4f      	ldr	r3, [pc, #316]	; (8002b00 <get_balance_status+0x148>)
 80029c2:	4a50      	ldr	r2, [pc, #320]	; (8002b04 <get_balance_status+0x14c>)
 80029c4:	601a      	str	r2, [r3, #0]
	balance_status=0x0000;
 80029c6:	2300      	movs	r3, #0
 80029c8:	83fb      	strh	r3, [r7, #30]
	uint16_t temp_dat;
	float buffer_imbalance;

	for(int ik=0;ik<10;ik++) {
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	e017      	b.n	8002a00 <get_balance_status+0x48>
		if(Cell_Voltage_10data[ik] < Cell_Voltage_Lowest)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	4413      	add	r3, r2
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a49      	ldr	r2, [pc, #292]	; (8002b00 <get_balance_status+0x148>)
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe fbd9 	bl	8001198 <__aeabi_fcmplt>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <get_balance_status+0x42>
			Cell_Voltage_Lowest = Cell_Voltage_10data[ik];
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a42      	ldr	r2, [pc, #264]	; (8002b00 <get_balance_status+0x148>)
 80029f8:	6013      	str	r3, [r2, #0]
	for(int ik=0;ik<10;ik++) {
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	3301      	adds	r3, #1
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b09      	cmp	r3, #9
 8002a04:	dde4      	ble.n	80029d0 <get_balance_status+0x18>
	}

	for(int ik=0;ik<10;ik++) {
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	e047      	b.n	8002a9c <get_balance_status+0xe4>
		delta_vbatt[ik] = Cell_Voltage_10data[ik] - Cell_Voltage_Lowest;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	4413      	add	r3, r2
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a3a      	ldr	r2, [pc, #232]	; (8002b00 <get_balance_status+0x148>)
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe f913 	bl	8000c48 <__aeabi_fsub>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4619      	mov	r1, r3
 8002a26:	4a38      	ldr	r2, [pc, #224]	; (8002b08 <get_balance_status+0x150>)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		buffer_imbalance+=delta_vbatt[ik];
 8002a2e:	4a36      	ldr	r2, [pc, #216]	; (8002b08 <get_balance_status+0x150>)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a36:	4619      	mov	r1, r3
 8002a38:	69b8      	ldr	r0, [r7, #24]
 8002a3a:	f7fe f907 	bl	8000c4c <__addsf3>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	61bb      	str	r3, [r7, #24]

		if(delta_vbatt[ik]> 0.025 && Cell_Voltage_10data[ik] > VCELL_BALANCE_PERMITTED) {
 8002a42:	4a31      	ldr	r2, [pc, #196]	; (8002b08 <get_balance_status+0x150>)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fd58 	bl	8000500 <__aeabi_f2d>
 8002a50:	a327      	add	r3, pc, #156	; (adr r3, 8002af0 <get_balance_status+0x138>)
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	f7fe f83b 	bl	8000ad0 <__aeabi_dcmpgt>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01a      	beq.n	8002a96 <get_balance_status+0xde>
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4413      	add	r3, r2
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fd48 	bl	8000500 <__aeabi_f2d>
 8002a70:	a321      	add	r3, pc, #132	; (adr r3, 8002af8 <get_balance_status+0x140>)
 8002a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a76:	f7fe f82b 	bl	8000ad0 <__aeabi_dcmpgt>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <get_balance_status+0xde>
			temp_dat = 0x01;
 8002a80:	2301      	movs	r3, #1
 8002a82:	81fb      	strh	r3, [r7, #14]
			temp_dat = temp_dat << ik;
 8002a84:	89fa      	ldrh	r2, [r7, #14]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	81fb      	strh	r3, [r7, #14]
			balance_status= balance_status+temp_dat;
 8002a8e:	8bfa      	ldrh	r2, [r7, #30]
 8002a90:	89fb      	ldrh	r3, [r7, #14]
 8002a92:	4413      	add	r3, r2
 8002a94:	83fb      	strh	r3, [r7, #30]
	for(int ik=0;ik<10;ik++) {
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	2b09      	cmp	r3, #9
 8002aa0:	ddb4      	ble.n	8002a0c <get_balance_status+0x54>
		}
	}
	persen_imbalance=buffer_imbalance*100/9.0/1.2;
 8002aa2:	491a      	ldr	r1, [pc, #104]	; (8002b0c <get_balance_status+0x154>)
 8002aa4:	69b8      	ldr	r0, [r7, #24]
 8002aa6:	f7fe f9d9 	bl	8000e5c <__aeabi_fmul>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fd fd27 	bl	8000500 <__aeabi_f2d>
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <get_balance_status+0x158>)
 8002ab8:	f7fd fea4 	bl	8000804 <__aeabi_ddiv>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <get_balance_status+0x15c>)
 8002aca:	f7fd fe9b 	bl	8000804 <__aeabi_ddiv>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f7fe f863 	bl	8000ba0 <__aeabi_d2f>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <get_balance_status+0x160>)
 8002ade:	6013      	str	r3, [r2, #0]
	return(balance_status);
 8002ae0:	8bfb      	ldrh	r3, [r7, #30]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	f3af 8000 	nop.w
 8002af0:	9999999a 	.word	0x9999999a
 8002af4:	3f999999 	.word	0x3f999999
 8002af8:	66666666 	.word	0x66666666
 8002afc:	400a6666 	.word	0x400a6666
 8002b00:	20000448 	.word	0x20000448
 8002b04:	40866666 	.word	0x40866666
 8002b08:	20000418 	.word	0x20000418
 8002b0c:	42c80000 	.word	0x42c80000
 8002b10:	40220000 	.word	0x40220000
 8002b14:	3ff33333 	.word	0x3ff33333
 8002b18:	20000340 	.word	0x20000340

08002b1c <LTC681x_balance_cell>:

void LTC681x_balance_cell(uint16_t cell_to_balance)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	80fb      	strh	r3, [r7, #6]
//	uint8_t	 wr_config[1][6];
	uint8_t  cell_balance_status;
	uint16_t temp_var;
	uint8_t lm;

	wr_config[0][4] = 0;
 8002b26:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <LTC681x_balance_cell+0xa4>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	711a      	strb	r2, [r3, #4]
	wr_config[0][5] = 0;
 8002b2c:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <LTC681x_balance_cell+0xa4>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	715a      	strb	r2, [r3, #5]

	for(lm=0;lm<10;lm++)
 8002b32:	2300      	movs	r3, #0
 8002b34:	737b      	strb	r3, [r7, #13]
 8002b36:	e035      	b.n	8002ba4 <LTC681x_balance_cell+0x88>
	{
		cell_balance_status = cell_to_balance >> lm & 0x01;
 8002b38:	88fa      	ldrh	r2, [r7, #6]
 8002b3a:	7b7b      	ldrb	r3, [r7, #13]
 8002b3c:	fa42 f303 	asr.w	r3, r2, r3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	733b      	strb	r3, [r7, #12]
		if(lm < 7)
 8002b48:	7b7b      	ldrb	r3, [r7, #13]
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d817      	bhi.n	8002b7e <LTC681x_balance_cell+0x62>
		{
			if(lm < 5)
 8002b4e:	7b7b      	ldrb	r3, [r7, #13]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d805      	bhi.n	8002b60 <LTC681x_balance_cell+0x44>
				temp_var = cell_balance_status << lm;
 8002b54:	7b3a      	ldrb	r2, [r7, #12]
 8002b56:	7b7b      	ldrb	r3, [r7, #13]
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	81fb      	strh	r3, [r7, #14]
 8002b5e:	e005      	b.n	8002b6c <LTC681x_balance_cell+0x50>
			else
				temp_var = cell_balance_status << (lm+1);
 8002b60:	7b3a      	ldrb	r2, [r7, #12]
 8002b62:	7b7b      	ldrb	r3, [r7, #13]
 8002b64:	3301      	adds	r3, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	81fb      	strh	r3, [r7, #14]

			wr_config[0][4] += temp_var;
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <LTC681x_balance_cell+0xa4>)
 8002b6e:	791a      	ldrb	r2, [r3, #4]
 8002b70:	89fb      	ldrh	r3, [r7, #14]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <LTC681x_balance_cell+0xa4>)
 8002b7a:	711a      	strb	r2, [r3, #4]
 8002b7c:	e00d      	b.n	8002b9a <LTC681x_balance_cell+0x7e>
		}
		else
		{
			temp_var = cell_balance_status << (lm-7);
 8002b7e:	7b3a      	ldrb	r2, [r7, #12]
 8002b80:	7b7b      	ldrb	r3, [r7, #13]
 8002b82:	3b07      	subs	r3, #7
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	81fb      	strh	r3, [r7, #14]
			wr_config[0][5] += temp_var;
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <LTC681x_balance_cell+0xa4>)
 8002b8c:	795a      	ldrb	r2, [r3, #5]
 8002b8e:	89fb      	ldrh	r3, [r7, #14]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <LTC681x_balance_cell+0xa4>)
 8002b98:	715a      	strb	r2, [r3, #5]
		}

		temp_var=0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	81fb      	strh	r3, [r7, #14]
	for(lm=0;lm<10;lm++)
 8002b9e:	7b7b      	ldrb	r3, [r7, #13]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	737b      	strb	r3, [r7, #13]
 8002ba4:	7b7b      	ldrb	r3, [r7, #13]
 8002ba6:	2b09      	cmp	r3, #9
 8002ba8:	d9c6      	bls.n	8002b38 <LTC681x_balance_cell+0x1c>
	}
	LTC6804_wrcfg(1, wr_config);
 8002baa:	4905      	ldr	r1, [pc, #20]	; (8002bc0 <LTC681x_balance_cell+0xa4>)
 8002bac:	2001      	movs	r0, #1
 8002bae:	f7ff fc3d 	bl	800242c <LTC6804_wrcfg>
	HAL_Delay(1);
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f004 fb42 	bl	800723c <HAL_Delay>
}
 8002bb8:	bf00      	nop
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	2000040c 	.word	0x2000040c

08002bc4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002bd4:	4b43      	ldr	r3, [pc, #268]	; (8002ce4 <MX_ADC1_Init+0x120>)
 8002bd6:	4a44      	ldr	r2, [pc, #272]	; (8002ce8 <MX_ADC1_Init+0x124>)
 8002bd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002bda:	4b42      	ldr	r3, [pc, #264]	; (8002ce4 <MX_ADC1_Init+0x120>)
 8002bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002be0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002be2:	4b40      	ldr	r3, [pc, #256]	; (8002ce4 <MX_ADC1_Init+0x120>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002be8:	4b3e      	ldr	r3, [pc, #248]	; (8002ce4 <MX_ADC1_Init+0x120>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bee:	4b3d      	ldr	r3, [pc, #244]	; (8002ce4 <MX_ADC1_Init+0x120>)
 8002bf0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002bf4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bf6:	4b3b      	ldr	r3, [pc, #236]	; (8002ce4 <MX_ADC1_Init+0x120>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8002bfc:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <MX_ADC1_Init+0x120>)
 8002bfe:	2207      	movs	r2, #7
 8002c00:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c02:	4838      	ldr	r0, [pc, #224]	; (8002ce4 <MX_ADC1_Init+0x120>)
 8002c04:	f004 fb3e 	bl	8007284 <HAL_ADC_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002c0e:	f001 faa1 	bl	8004154 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002c12:	2301      	movs	r3, #1
 8002c14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c16:	2301      	movs	r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002c1a:	2307      	movs	r3, #7
 8002c1c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	4619      	mov	r1, r3
 8002c22:	4830      	ldr	r0, [pc, #192]	; (8002ce4 <MX_ADC1_Init+0x120>)
 8002c24:	f004 fd12 	bl	800764c <HAL_ADC_ConfigChannel>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002c2e:	f001 fa91 	bl	8004154 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002c32:	2302      	movs	r3, #2
 8002c34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002c36:	2302      	movs	r3, #2
 8002c38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4829      	ldr	r0, [pc, #164]	; (8002ce4 <MX_ADC1_Init+0x120>)
 8002c40:	f004 fd04 	bl	800764c <HAL_ADC_ConfigChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002c4a:	f001 fa83 	bl	8004154 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002c52:	2303      	movs	r3, #3
 8002c54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4822      	ldr	r0, [pc, #136]	; (8002ce4 <MX_ADC1_Init+0x120>)
 8002c5c:	f004 fcf6 	bl	800764c <HAL_ADC_ConfigChannel>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002c66:	f001 fa75 	bl	8004154 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002c6e:	2304      	movs	r3, #4
 8002c70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	481b      	ldr	r0, [pc, #108]	; (8002ce4 <MX_ADC1_Init+0x120>)
 8002c78:	f004 fce8 	bl	800764c <HAL_ADC_ConfigChannel>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002c82:	f001 fa67 	bl	8004154 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002c86:	2305      	movs	r3, #5
 8002c88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002c8a:	2305      	movs	r3, #5
 8002c8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	4619      	mov	r1, r3
 8002c92:	4814      	ldr	r0, [pc, #80]	; (8002ce4 <MX_ADC1_Init+0x120>)
 8002c94:	f004 fcda 	bl	800764c <HAL_ADC_ConfigChannel>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002c9e:	f001 fa59 	bl	8004154 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002ca2:	2306      	movs	r3, #6
 8002ca4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002ca6:	2306      	movs	r3, #6
 8002ca8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	4619      	mov	r1, r3
 8002cae:	480d      	ldr	r0, [pc, #52]	; (8002ce4 <MX_ADC1_Init+0x120>)
 8002cb0:	f004 fccc 	bl	800764c <HAL_ADC_ConfigChannel>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002cba:	f001 fa4b 	bl	8004154 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002cbe:	2308      	movs	r3, #8
 8002cc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002cc2:	2307      	movs	r3, #7
 8002cc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4806      	ldr	r0, [pc, #24]	; (8002ce4 <MX_ADC1_Init+0x120>)
 8002ccc:	f004 fcbe 	bl	800764c <HAL_ADC_ConfigChannel>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8002cd6:	f001 fa3d 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	2000044c 	.word	0x2000044c
 8002ce8:	40012400 	.word	0x40012400

08002cec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0318 	add.w	r3, r7, #24
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a33      	ldr	r2, [pc, #204]	; (8002dd4 <HAL_ADC_MspInit+0xe8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d15f      	bne.n	8002dcc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d0c:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <HAL_ADC_MspInit+0xec>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	4a31      	ldr	r2, [pc, #196]	; (8002dd8 <HAL_ADC_MspInit+0xec>)
 8002d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d16:	6193      	str	r3, [r2, #24]
 8002d18:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <HAL_ADC_MspInit+0xec>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d24:	4b2c      	ldr	r3, [pc, #176]	; (8002dd8 <HAL_ADC_MspInit+0xec>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	4a2b      	ldr	r2, [pc, #172]	; (8002dd8 <HAL_ADC_MspInit+0xec>)
 8002d2a:	f043 0304 	orr.w	r3, r3, #4
 8002d2e:	6193      	str	r3, [r2, #24]
 8002d30:	4b29      	ldr	r3, [pc, #164]	; (8002dd8 <HAL_ADC_MspInit+0xec>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3c:	4b26      	ldr	r3, [pc, #152]	; (8002dd8 <HAL_ADC_MspInit+0xec>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	4a25      	ldr	r2, [pc, #148]	; (8002dd8 <HAL_ADC_MspInit+0xec>)
 8002d42:	f043 0308 	orr.w	r3, r3, #8
 8002d46:	6193      	str	r3, [r2, #24]
 8002d48:	4b23      	ldr	r3, [pc, #140]	; (8002dd8 <HAL_ADC_MspInit+0xec>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = LOWCELL_TEMP_Pin|HIGHCELL_TEMP_Pin|MOSFET_TEMP_Pin|CURRENT_SENSE_TEMP_Pin
 8002d54:	237e      	movs	r3, #126	; 0x7e
 8002d56:	61bb      	str	r3, [r7, #24]
                          |CURRENT_SENSOR_Pin|SPARE_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	f107 0318 	add.w	r3, r7, #24
 8002d60:	4619      	mov	r1, r3
 8002d62:	481e      	ldr	r0, [pc, #120]	; (8002ddc <HAL_ADC_MspInit+0xf0>)
 8002d64:	f006 f96c 	bl	8009040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIDCELL_TEMP_Pin;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIDCELL_TEMP_GPIO_Port, &GPIO_InitStruct);
 8002d70:	f107 0318 	add.w	r3, r7, #24
 8002d74:	4619      	mov	r1, r3
 8002d76:	481a      	ldr	r0, [pc, #104]	; (8002de0 <HAL_ADC_MspInit+0xf4>)
 8002d78:	f006 f962 	bl	8009040 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002d7c:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <HAL_ADC_MspInit+0xf8>)
 8002d7e:	4a1a      	ldr	r2, [pc, #104]	; (8002de8 <HAL_ADC_MspInit+0xfc>)
 8002d80:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d82:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <HAL_ADC_MspInit+0xf8>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d88:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <HAL_ADC_MspInit+0xf8>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <HAL_ADC_MspInit+0xf8>)
 8002d90:	2280      	movs	r2, #128	; 0x80
 8002d92:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d94:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <HAL_ADC_MspInit+0xf8>)
 8002d96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d9a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <HAL_ADC_MspInit+0xf8>)
 8002d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002da2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_ADC_MspInit+0xf8>)
 8002da6:	2220      	movs	r2, #32
 8002da8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <HAL_ADC_MspInit+0xf8>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002db0:	480c      	ldr	r0, [pc, #48]	; (8002de4 <HAL_ADC_MspInit+0xf8>)
 8002db2:	f005 fe05 	bl	80089c0 <HAL_DMA_Init>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8002dbc:	f001 f9ca 	bl	8004154 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <HAL_ADC_MspInit+0xf8>)
 8002dc4:	621a      	str	r2, [r3, #32]
 8002dc6:	4a07      	ldr	r2, [pc, #28]	; (8002de4 <HAL_ADC_MspInit+0xf8>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002dcc:	bf00      	nop
 8002dce:	3728      	adds	r7, #40	; 0x28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40012400 	.word	0x40012400
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40010800 	.word	0x40010800
 8002de0:	40010c00 	.word	0x40010c00
 8002de4:	2000047c 	.word	0x2000047c
 8002de8:	40020008 	.word	0x40020008

08002dec <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002df0:	4b17      	ldr	r3, [pc, #92]	; (8002e50 <MX_CAN_Init+0x64>)
 8002df2:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <MX_CAN_Init+0x68>)
 8002df4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8002df6:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <MX_CAN_Init+0x64>)
 8002df8:	2208      	movs	r2, #8
 8002dfa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002dfc:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <MX_CAN_Init+0x64>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002e02:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <MX_CAN_Init+0x64>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <MX_CAN_Init+0x64>)
 8002e0a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002e0e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002e10:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <MX_CAN_Init+0x64>)
 8002e12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e16:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002e18:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <MX_CAN_Init+0x64>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <MX_CAN_Init+0x64>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <MX_CAN_Init+0x64>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <MX_CAN_Init+0x64>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002e30:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <MX_CAN_Init+0x64>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <MX_CAN_Init+0x64>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002e3c:	4804      	ldr	r0, [pc, #16]	; (8002e50 <MX_CAN_Init+0x64>)
 8002e3e:	f004 fdfe 	bl	8007a3e <HAL_CAN_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002e48:	f001 f984 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	200004dc 	.word	0x200004dc
 8002e54:	40006400 	.word	0x40006400

08002e58 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a29      	ldr	r2, [pc, #164]	; (8002f18 <HAL_CAN_MspInit+0xc0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d14b      	bne.n	8002f10 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002e78:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <HAL_CAN_MspInit+0xc4>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	4a27      	ldr	r2, [pc, #156]	; (8002f1c <HAL_CAN_MspInit+0xc4>)
 8002e7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e82:	61d3      	str	r3, [r2, #28]
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <HAL_CAN_MspInit+0xc4>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e90:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <HAL_CAN_MspInit+0xc4>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	4a21      	ldr	r2, [pc, #132]	; (8002f1c <HAL_CAN_MspInit+0xc4>)
 8002e96:	f043 0308 	orr.w	r3, r3, #8
 8002e9a:	6193      	str	r3, [r2, #24]
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	; (8002f1c <HAL_CAN_MspInit+0xc4>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb6:	f107 0314 	add.w	r3, r7, #20
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4818      	ldr	r0, [pc, #96]	; (8002f20 <HAL_CAN_MspInit+0xc8>)
 8002ebe:	f006 f8bf 	bl	8009040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4812      	ldr	r0, [pc, #72]	; (8002f20 <HAL_CAN_MspInit+0xc8>)
 8002ed8:	f006 f8b2 	bl	8009040 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <HAL_CAN_MspInit+0xcc>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8002efa:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <HAL_CAN_MspInit+0xcc>)
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002f00:	2200      	movs	r2, #0
 8002f02:	2100      	movs	r1, #0
 8002f04:	2014      	movs	r0, #20
 8002f06:	f005 fd24 	bl	8008952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002f0a:	2014      	movs	r0, #20
 8002f0c:	f005 fd3d 	bl	800898a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002f10:	bf00      	nop
 8002f12:	3728      	adds	r7, #40	; 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40006400 	.word	0x40006400
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40010c00 	.word	0x40010c00
 8002f24:	40010000 	.word	0x40010000

08002f28 <CANTX_BattParameter>:
  /* USER CODE END CAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void CANTX_BattParameter() {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;

	Batt_voltage.m_uint16_t	= VBATT*100;
 8002f2e:	4b84      	ldr	r3, [pc, #528]	; (8003140 <CANTX_BattParameter+0x218>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4984      	ldr	r1, [pc, #528]	; (8003144 <CANTX_BattParameter+0x21c>)
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd ff91 	bl	8000e5c <__aeabi_fmul>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe f979 	bl	8001234 <__aeabi_f2uiz>
 8002f42:	4603      	mov	r3, r0
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	4b80      	ldr	r3, [pc, #512]	; (8003148 <CANTX_BattParameter+0x220>)
 8002f48:	801a      	strh	r2, [r3, #0]
	Batt_current.m_uint16_t	= fabs(IBATT)*10;
 8002f4a:	4b80      	ldr	r3, [pc, #512]	; (800314c <CANTX_BattParameter+0x224>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fad4 	bl	8000500 <__aeabi_f2d>
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	4b7c      	ldr	r3, [pc, #496]	; (8003150 <CANTX_BattParameter+0x228>)
 8002f5e:	f7fd fb27 	bl	80005b0 <__aeabi_dmul>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f7fd fdf9 	bl	8000b60 <__aeabi_d2uiz>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	4b78      	ldr	r3, [pc, #480]	; (8003154 <CANTX_BattParameter+0x22c>)
 8002f74:	801a      	strh	r2, [r3, #0]
	Batt_SOC.m_uint16_t		= (int)Pack_SOC;
 8002f76:	4b78      	ldr	r3, [pc, #480]	; (8003158 <CANTX_BattParameter+0x230>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe f934 	bl	80011e8 <__aeabi_f2iz>
 8002f80:	4603      	mov	r3, r0
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	4b75      	ldr	r3, [pc, #468]	; (800315c <CANTX_BattParameter+0x234>)
 8002f86:	801a      	strh	r2, [r3, #0]

	Tmax=Suhu_T1;
 8002f88:	4b75      	ldr	r3, [pc, #468]	; (8003160 <CANTX_BattParameter+0x238>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a75      	ldr	r2, [pc, #468]	; (8003164 <CANTX_BattParameter+0x23c>)
 8002f8e:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T2) Tmax = Suhu_T2;
 8002f90:	4b74      	ldr	r3, [pc, #464]	; (8003164 <CANTX_BattParameter+0x23c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a74      	ldr	r2, [pc, #464]	; (8003168 <CANTX_BattParameter+0x240>)
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe f8fc 	bl	8001198 <__aeabi_fcmplt>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <CANTX_BattParameter+0x86>
 8002fa6:	4b70      	ldr	r3, [pc, #448]	; (8003168 <CANTX_BattParameter+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a6e      	ldr	r2, [pc, #440]	; (8003164 <CANTX_BattParameter+0x23c>)
 8002fac:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T3) Tmax = Suhu_T3;
 8002fae:	4b6d      	ldr	r3, [pc, #436]	; (8003164 <CANTX_BattParameter+0x23c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6e      	ldr	r2, [pc, #440]	; (800316c <CANTX_BattParameter+0x244>)
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe f8ed 	bl	8001198 <__aeabi_fcmplt>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <CANTX_BattParameter+0xa4>
 8002fc4:	4b69      	ldr	r3, [pc, #420]	; (800316c <CANTX_BattParameter+0x244>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a66      	ldr	r2, [pc, #408]	; (8003164 <CANTX_BattParameter+0x23c>)
 8002fca:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T4) Tmax = Suhu_T4;
 8002fcc:	4b65      	ldr	r3, [pc, #404]	; (8003164 <CANTX_BattParameter+0x23c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a67      	ldr	r2, [pc, #412]	; (8003170 <CANTX_BattParameter+0x248>)
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe f8de 	bl	8001198 <__aeabi_fcmplt>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <CANTX_BattParameter+0xc2>
 8002fe2:	4b63      	ldr	r3, [pc, #396]	; (8003170 <CANTX_BattParameter+0x248>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a5f      	ldr	r2, [pc, #380]	; (8003164 <CANTX_BattParameter+0x23c>)
 8002fe8:	6013      	str	r3, [r2, #0]

	Batt_temp.m_uint16_t		= Tmax+40;
 8002fea:	4b5e      	ldr	r3, [pc, #376]	; (8003164 <CANTX_BattParameter+0x23c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4961      	ldr	r1, [pc, #388]	; (8003174 <CANTX_BattParameter+0x24c>)
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fd fe2b 	bl	8000c4c <__addsf3>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fe f91b 	bl	8001234 <__aeabi_f2uiz>
 8002ffe:	4603      	mov	r3, r0
 8003000:	b29a      	uxth	r2, r3
 8003002:	4b5d      	ldr	r3, [pc, #372]	; (8003178 <CANTX_BattParameter+0x250>)
 8003004:	801a      	strh	r2, [r3, #0]
	Batt_capacity.m_uint16_t	= Pack_Cap*10;
 8003006:	4b5d      	ldr	r3, [pc, #372]	; (800317c <CANTX_BattParameter+0x254>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	495d      	ldr	r1, [pc, #372]	; (8003180 <CANTX_BattParameter+0x258>)
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd ff25 	bl	8000e5c <__aeabi_fmul>
 8003012:	4603      	mov	r3, r0
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe f90d 	bl	8001234 <__aeabi_f2uiz>
 800301a:	4603      	mov	r3, r0
 800301c:	b29a      	uxth	r2, r3
 800301e:	4b59      	ldr	r3, [pc, #356]	; (8003184 <CANTX_BattParameter+0x25c>)
 8003020:	801a      	strh	r2, [r3, #0]
	Batt_SOH.m_uint16_t			= SOH_batt;
 8003022:	4b59      	ldr	r3, [pc, #356]	; (8003188 <CANTX_BattParameter+0x260>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	b29a      	uxth	r2, r3
 8003028:	4b58      	ldr	r3, [pc, #352]	; (800318c <CANTX_BattParameter+0x264>)
 800302a:	801a      	strh	r2, [r3, #0]
	Batt_cycle.m_uint16_t		= cycle;
 800302c:	4b58      	ldr	r3, [pc, #352]	; (8003190 <CANTX_BattParameter+0x268>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	b29a      	uxth	r2, r3
 8003032:	4b58      	ldr	r3, [pc, #352]	; (8003194 <CANTX_BattParameter+0x26c>)
 8003034:	801a      	strh	r2, [r3, #0]
	max_voltage.m_uint16_t 		= 63;
 8003036:	4b58      	ldr	r3, [pc, #352]	; (8003198 <CANTX_BattParameter+0x270>)
 8003038:	223f      	movs	r2, #63	; 0x3f
 800303a:	801a      	strh	r2, [r3, #0]

	max_chargevoltage.m_uint16_t = VBATT*1.3;
 800303c:	4b40      	ldr	r3, [pc, #256]	; (8003140 <CANTX_BattParameter+0x218>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd fa5d 	bl	8000500 <__aeabi_f2d>
 8003046:	a33c      	add	r3, pc, #240	; (adr r3, 8003138 <CANTX_BattParameter+0x210>)
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f7fd fab0 	bl	80005b0 <__aeabi_dmul>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	f7fd fd82 	bl	8000b60 <__aeabi_d2uiz>
 800305c:	4603      	mov	r3, r0
 800305e:	b29a      	uxth	r2, r3
 8003060:	4b4e      	ldr	r3, [pc, #312]	; (800319c <CANTX_BattParameter+0x274>)
 8003062:	801a      	strh	r2, [r3, #0]
	max_chargecurrent.m_uint16_t = VBATT-20;
 8003064:	4b36      	ldr	r3, [pc, #216]	; (8003140 <CANTX_BattParameter+0x218>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	494d      	ldr	r1, [pc, #308]	; (80031a0 <CANTX_BattParameter+0x278>)
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fdec 	bl	8000c48 <__aeabi_fsub>
 8003070:	4603      	mov	r3, r0
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe f8de 	bl	8001234 <__aeabi_f2uiz>
 8003078:	4603      	mov	r3, r0
 800307a:	b29a      	uxth	r2, r3
 800307c:	4b49      	ldr	r3, [pc, #292]	; (80031a4 <CANTX_BattParameter+0x27c>)
 800307e:	801a      	strh	r2, [r3, #0]

	// *********************** GENERAL CAN COMMUNICATION ******************************
	// CAN ID transmit #1
	Tx_Header.IDE = CAN_ID_EXT;
 8003080:	4b49      	ldr	r3, [pc, #292]	; (80031a8 <CANTX_BattParameter+0x280>)
 8003082:	2204      	movs	r2, #4
 8003084:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0B0<<20|UNIQUE_Code);
 8003086:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <CANTX_BattParameter+0x280>)
 8003088:	4a48      	ldr	r2, [pc, #288]	; (80031ac <CANTX_BattParameter+0x284>)
 800308a:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = Batt_voltage.m_bytes[0];
 800308c:	4b2e      	ldr	r3, [pc, #184]	; (8003148 <CANTX_BattParameter+0x220>)
 800308e:	781a      	ldrb	r2, [r3, #0]
 8003090:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <CANTX_BattParameter+0x288>)
 8003092:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = Batt_voltage.m_bytes[1];
 8003094:	4b2c      	ldr	r3, [pc, #176]	; (8003148 <CANTX_BattParameter+0x220>)
 8003096:	785a      	ldrb	r2, [r3, #1]
 8003098:	4b45      	ldr	r3, [pc, #276]	; (80031b0 <CANTX_BattParameter+0x288>)
 800309a:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = Batt_current.m_bytes[0];
 800309c:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <CANTX_BattParameter+0x22c>)
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <CANTX_BattParameter+0x288>)
 80030a2:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = Batt_current.m_bytes[1];
 80030a4:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <CANTX_BattParameter+0x22c>)
 80030a6:	785a      	ldrb	r2, [r3, #1]
 80030a8:	4b41      	ldr	r3, [pc, #260]	; (80031b0 <CANTX_BattParameter+0x288>)
 80030aa:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = Batt_SOC.m_bytes[0];
 80030ac:	4b2b      	ldr	r3, [pc, #172]	; (800315c <CANTX_BattParameter+0x234>)
 80030ae:	781a      	ldrb	r2, [r3, #0]
 80030b0:	4b3f      	ldr	r3, [pc, #252]	; (80031b0 <CANTX_BattParameter+0x288>)
 80030b2:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = Batt_SOC.m_bytes[1];
 80030b4:	4b29      	ldr	r3, [pc, #164]	; (800315c <CANTX_BattParameter+0x234>)
 80030b6:	785a      	ldrb	r2, [r3, #1]
 80030b8:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <CANTX_BattParameter+0x288>)
 80030ba:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = Tmax+40;
 80030bc:	4b29      	ldr	r3, [pc, #164]	; (8003164 <CANTX_BattParameter+0x23c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	492c      	ldr	r1, [pc, #176]	; (8003174 <CANTX_BattParameter+0x24c>)
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fdc2 	bl	8000c4c <__addsf3>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe f8b2 	bl	8001234 <__aeabi_f2uiz>
 80030d0:	4603      	mov	r3, r0
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <CANTX_BattParameter+0x288>)
 80030d6:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 1;
 80030d8:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <CANTX_BattParameter+0x288>)
 80030da:	2201      	movs	r2, #1
 80030dc:	71da      	strb	r2, [r3, #7]
	//		Tx_data[6] = Batt_temp.m_bytes[1];
	//		Tx_data[7] = Batt_temp.m_bytes[0];

	//CAN Tx message #1
	Tx_Header.DLC = 8;
 80030de:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <CANTX_BattParameter+0x280>)
 80030e0:	2208      	movs	r2, #8
 80030e2:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80030e4:	e00f      	b.n	8003106 <CANTX_BattParameter+0x1de>
		if(delay_mailboxcheck > 1000){
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ec:	dd08      	ble.n	8003100 <CANTX_BattParameter+0x1d8>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80030ee:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <CANTX_BattParameter+0x28c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4619      	mov	r1, r3
 80030f4:	4830      	ldr	r0, [pc, #192]	; (80031b8 <CANTX_BattParameter+0x290>)
 80030f6:	f004 ff84 	bl	8008002 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]
			break;
 80030fe:	e008      	b.n	8003112 <CANTX_BattParameter+0x1ea>
		}
		delay_mailboxcheck++;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3301      	adds	r3, #1
 8003104:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8003106:	482c      	ldr	r0, [pc, #176]	; (80031b8 <CANTX_BattParameter+0x290>)
 8003108:	f004 ffbf 	bl	800808a <HAL_CAN_GetTxMailboxesFreeLevel>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0e9      	beq.n	80030e6 <CANTX_BattParameter+0x1be>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8003112:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <CANTX_BattParameter+0x28c>)
 8003114:	4a26      	ldr	r2, [pc, #152]	; (80031b0 <CANTX_BattParameter+0x288>)
 8003116:	4924      	ldr	r1, [pc, #144]	; (80031a8 <CANTX_BattParameter+0x280>)
 8003118:	4827      	ldr	r0, [pc, #156]	; (80031b8 <CANTX_BattParameter+0x290>)
 800311a:	f004 fe98 	bl	8007e4e <HAL_CAN_AddTxMessage>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <CANTX_BattParameter+0x20a>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8003124:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <CANTX_BattParameter+0x28c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4619      	mov	r1, r3
 800312a:	4823      	ldr	r0, [pc, #140]	; (80031b8 <CANTX_BattParameter+0x290>)
 800312c:	f004 ff69 	bl	8008002 <HAL_CAN_AbortTxRequest>
		return;
 8003130:	bf00      	nop
//		Error_Handler();
	}

}
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	cccccccd 	.word	0xcccccccd
 800313c:	3ff4cccc 	.word	0x3ff4cccc
 8003140:	2000027c 	.word	0x2000027c
 8003144:	42c80000 	.word	0x42c80000
 8003148:	200005bc 	.word	0x200005bc
 800314c:	200002f8 	.word	0x200002f8
 8003150:	40240000 	.word	0x40240000
 8003154:	20000518 	.word	0x20000518
 8003158:	20000388 	.word	0x20000388
 800315c:	20000520 	.word	0x20000520
 8003160:	2000030c 	.word	0x2000030c
 8003164:	20000568 	.word	0x20000568
 8003168:	20000390 	.word	0x20000390
 800316c:	20000280 	.word	0x20000280
 8003170:	20000344 	.word	0x20000344
 8003174:	42200000 	.word	0x42200000
 8003178:	20000564 	.word	0x20000564
 800317c:	08010aa8 	.word	0x08010aa8
 8003180:	41200000 	.word	0x41200000
 8003184:	200005b4 	.word	0x200005b4
 8003188:	20000000 	.word	0x20000000
 800318c:	200004c8 	.word	0x200004c8
 8003190:	20000248 	.word	0x20000248
 8003194:	20000510 	.word	0x20000510
 8003198:	20000590 	.word	0x20000590
 800319c:	200005b0 	.word	0x200005b0
 80031a0:	41a00000 	.word	0x41a00000
 80031a4:	200004cc 	.word	0x200004cc
 80031a8:	20000598 	.word	0x20000598
 80031ac:	0b000002 	.word	0x0b000002
 80031b0:	200004d4 	.word	0x200004d4
 80031b4:	20000588 	.word	0x20000588
 80031b8:	200004dc 	.word	0x200004dc

080031bc <CANTX_BattProtection>:

void CANTX_BattProtection() {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;
	// CAN ID transmit #2
	Tx_Header.IDE = CAN_ID_EXT;
 80031c2:	4b8c      	ldr	r3, [pc, #560]	; (80033f4 <CANTX_BattProtection+0x238>)
 80031c4:	2204      	movs	r2, #4
 80031c6:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0B1<<20|UNIQUE_Code);
 80031c8:	4b8a      	ldr	r3, [pc, #552]	; (80033f4 <CANTX_BattProtection+0x238>)
 80031ca:	4a8b      	ldr	r2, [pc, #556]	; (80033f8 <CANTX_BattProtection+0x23c>)
 80031cc:	605a      	str	r2, [r3, #4]
	//CAN Data #2
	Tx_data[0] = Batt_capacity.m_bytes[0];
 80031ce:	4b8b      	ldr	r3, [pc, #556]	; (80033fc <CANTX_BattProtection+0x240>)
 80031d0:	781a      	ldrb	r2, [r3, #0]
 80031d2:	4b8b      	ldr	r3, [pc, #556]	; (8003400 <CANTX_BattProtection+0x244>)
 80031d4:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = Batt_capacity.m_bytes[1];
 80031d6:	4b89      	ldr	r3, [pc, #548]	; (80033fc <CANTX_BattProtection+0x240>)
 80031d8:	785a      	ldrb	r2, [r3, #1]
 80031da:	4b89      	ldr	r3, [pc, #548]	; (8003400 <CANTX_BattProtection+0x244>)
 80031dc:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = Batt_SOH.m_bytes[0];
 80031de:	4b89      	ldr	r3, [pc, #548]	; (8003404 <CANTX_BattProtection+0x248>)
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	4b87      	ldr	r3, [pc, #540]	; (8003400 <CANTX_BattProtection+0x244>)
 80031e4:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = Batt_SOH.m_bytes[1];
 80031e6:	4b87      	ldr	r3, [pc, #540]	; (8003404 <CANTX_BattProtection+0x248>)
 80031e8:	785a      	ldrb	r2, [r3, #1]
 80031ea:	4b85      	ldr	r3, [pc, #532]	; (8003400 <CANTX_BattProtection+0x244>)
 80031ec:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = Batt_cycle.m_bytes[0];
 80031ee:	4b86      	ldr	r3, [pc, #536]	; (8003408 <CANTX_BattProtection+0x24c>)
 80031f0:	781a      	ldrb	r2, [r3, #0]
 80031f2:	4b83      	ldr	r3, [pc, #524]	; (8003400 <CANTX_BattProtection+0x244>)
 80031f4:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = Batt_cycle.m_bytes[1];
 80031f6:	4b84      	ldr	r3, [pc, #528]	; (8003408 <CANTX_BattProtection+0x24c>)
 80031f8:	785a      	ldrb	r2, [r3, #1]
 80031fa:	4b81      	ldr	r3, [pc, #516]	; (8003400 <CANTX_BattProtection+0x244>)
 80031fc:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = flag_trip_overcurrentdischarge&0x01;
 80031fe:	4b83      	ldr	r3, [pc, #524]	; (800340c <CANTX_BattProtection+0x250>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	b2da      	uxtb	r2, r3
 8003208:	4b7d      	ldr	r3, [pc, #500]	; (8003400 <CANTX_BattProtection+0x244>)
 800320a:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overcurrentcharge&0x01)<<1;
 800320c:	4b7c      	ldr	r3, [pc, #496]	; (8003400 <CANTX_BattProtection+0x244>)
 800320e:	799b      	ldrb	r3, [r3, #6]
 8003210:	b25a      	sxtb	r2, r3
 8003212:	4b7f      	ldr	r3, [pc, #508]	; (8003410 <CANTX_BattProtection+0x254>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	b25b      	sxtb	r3, r3
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	b25b      	sxtb	r3, r3
 8003220:	4313      	orrs	r3, r2
 8003222:	b25b      	sxtb	r3, r3
 8003224:	b2da      	uxtb	r2, r3
 8003226:	4b76      	ldr	r3, [pc, #472]	; (8003400 <CANTX_BattProtection+0x244>)
 8003228:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_shortcircuit&0x01)<<2;
 800322a:	4b75      	ldr	r3, [pc, #468]	; (8003400 <CANTX_BattProtection+0x244>)
 800322c:	799b      	ldrb	r3, [r3, #6]
 800322e:	b25a      	sxtb	r2, r3
 8003230:	4b78      	ldr	r3, [pc, #480]	; (8003414 <CANTX_BattProtection+0x258>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	b25b      	sxtb	r3, r3
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	b25b      	sxtb	r3, r3
 800323e:	4313      	orrs	r3, r2
 8003240:	b25b      	sxtb	r3, r3
 8003242:	b2da      	uxtb	r2, r3
 8003244:	4b6e      	ldr	r3, [pc, #440]	; (8003400 <CANTX_BattProtection+0x244>)
 8003246:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overtemperature&0x01)<<3;
 8003248:	4b6d      	ldr	r3, [pc, #436]	; (8003400 <CANTX_BattProtection+0x244>)
 800324a:	799b      	ldrb	r3, [r3, #6]
 800324c:	b25a      	sxtb	r2, r3
 800324e:	4b72      	ldr	r3, [pc, #456]	; (8003418 <CANTX_BattProtection+0x25c>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	b25b      	sxtb	r3, r3
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	b25b      	sxtb	r3, r3
 800325c:	4313      	orrs	r3, r2
 800325e:	b25b      	sxtb	r3, r3
 8003260:	b2da      	uxtb	r2, r3
 8003262:	4b67      	ldr	r3, [pc, #412]	; (8003400 <CANTX_BattProtection+0x244>)
 8003264:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_undertemperature&0x01)<<4;
 8003266:	4b66      	ldr	r3, [pc, #408]	; (8003400 <CANTX_BattProtection+0x244>)
 8003268:	799b      	ldrb	r3, [r3, #6]
 800326a:	b25a      	sxtb	r2, r3
 800326c:	4b6b      	ldr	r3, [pc, #428]	; (800341c <CANTX_BattProtection+0x260>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	b25b      	sxtb	r3, r3
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	b25b      	sxtb	r3, r3
 800327a:	4313      	orrs	r3, r2
 800327c:	b25b      	sxtb	r3, r3
 800327e:	b2da      	uxtb	r2, r3
 8003280:	4b5f      	ldr	r3, [pc, #380]	; (8003400 <CANTX_BattProtection+0x244>)
 8003282:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overtemperature&0x01)<<5;
 8003284:	4b5e      	ldr	r3, [pc, #376]	; (8003400 <CANTX_BattProtection+0x244>)
 8003286:	799b      	ldrb	r3, [r3, #6]
 8003288:	b25a      	sxtb	r2, r3
 800328a:	4b63      	ldr	r3, [pc, #396]	; (8003418 <CANTX_BattProtection+0x25c>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	015b      	lsls	r3, r3, #5
 8003290:	b25b      	sxtb	r3, r3
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	b25b      	sxtb	r3, r3
 8003298:	4313      	orrs	r3, r2
 800329a:	b25b      	sxtb	r3, r3
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4b58      	ldr	r3, [pc, #352]	; (8003400 <CANTX_BattProtection+0x244>)
 80032a0:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_undertemperature&0x01)<<6;
 80032a2:	4b57      	ldr	r3, [pc, #348]	; (8003400 <CANTX_BattProtection+0x244>)
 80032a4:	799b      	ldrb	r3, [r3, #6]
 80032a6:	b25a      	sxtb	r2, r3
 80032a8:	4b5c      	ldr	r3, [pc, #368]	; (800341c <CANTX_BattProtection+0x260>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	019b      	lsls	r3, r3, #6
 80032ae:	b25b      	sxtb	r3, r3
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	b25b      	sxtb	r3, r3
 80032b6:	4313      	orrs	r3, r2
 80032b8:	b25b      	sxtb	r3, r3
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	4b50      	ldr	r3, [pc, #320]	; (8003400 <CANTX_BattProtection+0x244>)
 80032be:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |=  (flag_trip_undervoltage&0x01)<<7;
 80032c0:	4b4f      	ldr	r3, [pc, #316]	; (8003400 <CANTX_BattProtection+0x244>)
 80032c2:	799b      	ldrb	r3, [r3, #6]
 80032c4:	b25a      	sxtb	r2, r3
 80032c6:	4b56      	ldr	r3, [pc, #344]	; (8003420 <CANTX_BattProtection+0x264>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	01db      	lsls	r3, r3, #7
 80032cc:	b25b      	sxtb	r3, r3
 80032ce:	4313      	orrs	r3, r2
 80032d0:	b25b      	sxtb	r3, r3
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <CANTX_BattProtection+0x244>)
 80032d6:	719a      	strb	r2, [r3, #6]

	Tx_data[7] = (flag_trip_overvoltage&0x01);
 80032d8:	4b52      	ldr	r3, [pc, #328]	; (8003424 <CANTX_BattProtection+0x268>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4b47      	ldr	r3, [pc, #284]	; (8003400 <CANTX_BattProtection+0x244>)
 80032e4:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_SOCOverDischarge&0x01)<<1;
 80032e6:	4b46      	ldr	r3, [pc, #280]	; (8003400 <CANTX_BattProtection+0x244>)
 80032e8:	79db      	ldrb	r3, [r3, #7]
 80032ea:	b25a      	sxtb	r2, r3
 80032ec:	4b4e      	ldr	r3, [pc, #312]	; (8003428 <CANTX_BattProtection+0x26c>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	b25b      	sxtb	r3, r3
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	b25b      	sxtb	r3, r3
 80032fa:	4313      	orrs	r3, r2
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	4b3f      	ldr	r3, [pc, #252]	; (8003400 <CANTX_BattProtection+0x244>)
 8003302:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_unbalance&0x01)<<2;
 8003304:	4b3e      	ldr	r3, [pc, #248]	; (8003400 <CANTX_BattProtection+0x244>)
 8003306:	79db      	ldrb	r3, [r3, #7]
 8003308:	b25a      	sxtb	r2, r3
 800330a:	4b48      	ldr	r3, [pc, #288]	; (800342c <CANTX_BattProtection+0x270>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	b25b      	sxtb	r3, r3
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	b25b      	sxtb	r3, r3
 8003318:	4313      	orrs	r3, r2
 800331a:	b25b      	sxtb	r3, r3
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4b38      	ldr	r3, [pc, #224]	; (8003400 <CANTX_BattProtection+0x244>)
 8003320:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_systemfailure&0x01)<<3;
 8003322:	4b37      	ldr	r3, [pc, #220]	; (8003400 <CANTX_BattProtection+0x244>)
 8003324:	79db      	ldrb	r3, [r3, #7]
 8003326:	b25a      	sxtb	r2, r3
 8003328:	4b41      	ldr	r3, [pc, #260]	; (8003430 <CANTX_BattProtection+0x274>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	b25b      	sxtb	r3, r3
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	b25b      	sxtb	r3, r3
 8003336:	4313      	orrs	r3, r2
 8003338:	b25b      	sxtb	r3, r3
 800333a:	b2da      	uxtb	r2, r3
 800333c:	4b30      	ldr	r3, [pc, #192]	; (8003400 <CANTX_BattProtection+0x244>)
 800333e:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (charge_state&0x01)<<4;
 8003340:	4b2f      	ldr	r3, [pc, #188]	; (8003400 <CANTX_BattProtection+0x244>)
 8003342:	79db      	ldrb	r3, [r3, #7]
 8003344:	b25a      	sxtb	r2, r3
 8003346:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <CANTX_BattProtection+0x278>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	b25b      	sxtb	r3, r3
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	b25b      	sxtb	r3, r3
 8003354:	4313      	orrs	r3, r2
 8003356:	b25b      	sxtb	r3, r3
 8003358:	b2da      	uxtb	r2, r3
 800335a:	4b29      	ldr	r3, [pc, #164]	; (8003400 <CANTX_BattProtection+0x244>)
 800335c:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (discharge_state&0x01)<<5;
 800335e:	4b28      	ldr	r3, [pc, #160]	; (8003400 <CANTX_BattProtection+0x244>)
 8003360:	79db      	ldrb	r3, [r3, #7]
 8003362:	b25a      	sxtb	r2, r3
 8003364:	4b34      	ldr	r3, [pc, #208]	; (8003438 <CANTX_BattProtection+0x27c>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	015b      	lsls	r3, r3, #5
 800336a:	b25b      	sxtb	r3, r3
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	b25b      	sxtb	r3, r3
 8003372:	4313      	orrs	r3, r2
 8003374:	b25b      	sxtb	r3, r3
 8003376:	b2da      	uxtb	r2, r3
 8003378:	4b21      	ldr	r3, [pc, #132]	; (8003400 <CANTX_BattProtection+0x244>)
 800337a:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (sleep_state&0x01)<<6;
 800337c:	4b20      	ldr	r3, [pc, #128]	; (8003400 <CANTX_BattProtection+0x244>)
 800337e:	79db      	ldrb	r3, [r3, #7]
 8003380:	b25a      	sxtb	r2, r3
 8003382:	4b2e      	ldr	r3, [pc, #184]	; (800343c <CANTX_BattProtection+0x280>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	019b      	lsls	r3, r3, #6
 8003388:	b25b      	sxtb	r3, r3
 800338a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338e:	b25b      	sxtb	r3, r3
 8003390:	4313      	orrs	r3, r2
 8003392:	b25b      	sxtb	r3, r3
 8003394:	b2da      	uxtb	r2, r3
 8003396:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <CANTX_BattProtection+0x244>)
 8003398:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #2
	Tx_Header.DLC = 8;
 800339a:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <CANTX_BattProtection+0x238>)
 800339c:	2208      	movs	r2, #8
 800339e:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80033a0:	e00f      	b.n	80033c2 <CANTX_BattProtection+0x206>
		if(delay_mailboxcheck > 1000){
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033a8:	dd08      	ble.n	80033bc <CANTX_BattProtection+0x200>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80033aa:	4b25      	ldr	r3, [pc, #148]	; (8003440 <CANTX_BattProtection+0x284>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4619      	mov	r1, r3
 80033b0:	4824      	ldr	r0, [pc, #144]	; (8003444 <CANTX_BattProtection+0x288>)
 80033b2:	f004 fe26 	bl	8008002 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	607b      	str	r3, [r7, #4]
			break;
 80033ba:	e008      	b.n	80033ce <CANTX_BattProtection+0x212>
		}
		delay_mailboxcheck++;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3301      	adds	r3, #1
 80033c0:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80033c2:	4820      	ldr	r0, [pc, #128]	; (8003444 <CANTX_BattProtection+0x288>)
 80033c4:	f004 fe61 	bl	800808a <HAL_CAN_GetTxMailboxesFreeLevel>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0e9      	beq.n	80033a2 <CANTX_BattProtection+0x1e6>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 80033ce:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <CANTX_BattProtection+0x284>)
 80033d0:	4a0b      	ldr	r2, [pc, #44]	; (8003400 <CANTX_BattProtection+0x244>)
 80033d2:	4908      	ldr	r1, [pc, #32]	; (80033f4 <CANTX_BattProtection+0x238>)
 80033d4:	481b      	ldr	r0, [pc, #108]	; (8003444 <CANTX_BattProtection+0x288>)
 80033d6:	f004 fd3a 	bl	8007e4e <HAL_CAN_AddTxMessage>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d006      	beq.n	80033ee <CANTX_BattProtection+0x232>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80033e0:	4b17      	ldr	r3, [pc, #92]	; (8003440 <CANTX_BattProtection+0x284>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4619      	mov	r1, r3
 80033e6:	4817      	ldr	r0, [pc, #92]	; (8003444 <CANTX_BattProtection+0x288>)
 80033e8:	f004 fe0b 	bl	8008002 <HAL_CAN_AbortTxRequest>
		return;
 80033ec:	bf00      	nop
//		Error_Handler();
	}
}
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000598 	.word	0x20000598
 80033f8:	0b100002 	.word	0x0b100002
 80033fc:	200005b4 	.word	0x200005b4
 8003400:	200004d4 	.word	0x200004d4
 8003404:	200004c8 	.word	0x200004c8
 8003408:	20000510 	.word	0x20000510
 800340c:	20000314 	.word	0x20000314
 8003410:	20000332 	.word	0x20000332
 8003414:	2000025c 	.word	0x2000025c
 8003418:	20000278 	.word	0x20000278
 800341c:	20000300 	.word	0x20000300
 8003420:	20000301 	.word	0x20000301
 8003424:	2000038c 	.word	0x2000038c
 8003428:	20000338 	.word	0x20000338
 800342c:	20000259 	.word	0x20000259
 8003430:	20000264 	.word	0x20000264
 8003434:	20000348 	.word	0x20000348
 8003438:	20000284 	.word	0x20000284
 800343c:	20000394 	.word	0x20000394
 8003440:	20000588 	.word	0x20000588
 8003444:	200004dc 	.word	0x200004dc

08003448 <CANTX_ReportToCharger>:

void CANTX_ReportToCharger() {
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
	// *********************** CHARGING CAN COMMUNICATION ******************************
	int delay_mailboxcheck;
	// CAN ID transmit #1
	Tx_Header.IDE = CAN_ID_EXT;
 800344e:	4b30      	ldr	r3, [pc, #192]	; (8003510 <CANTX_ReportToCharger+0xc8>)
 8003450:	2204      	movs	r2, #4
 8003452:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0E0<<20|UNIQUE_Code);
 8003454:	4b2e      	ldr	r3, [pc, #184]	; (8003510 <CANTX_ReportToCharger+0xc8>)
 8003456:	4a2f      	ldr	r2, [pc, #188]	; (8003514 <CANTX_ReportToCharger+0xcc>)
 8003458:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = max_chargevoltage.m_bytes[0];
 800345a:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <CANTX_ReportToCharger+0xd0>)
 800345c:	781a      	ldrb	r2, [r3, #0]
 800345e:	4b2f      	ldr	r3, [pc, #188]	; (800351c <CANTX_ReportToCharger+0xd4>)
 8003460:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = max_chargevoltage.m_bytes[1];
 8003462:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <CANTX_ReportToCharger+0xd0>)
 8003464:	785a      	ldrb	r2, [r3, #1]
 8003466:	4b2d      	ldr	r3, [pc, #180]	; (800351c <CANTX_ReportToCharger+0xd4>)
 8003468:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = max_chargecurrent.m_bytes[0];
 800346a:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <CANTX_ReportToCharger+0xd8>)
 800346c:	781a      	ldrb	r2, [r3, #0]
 800346e:	4b2b      	ldr	r3, [pc, #172]	; (800351c <CANTX_ReportToCharger+0xd4>)
 8003470:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = max_chargecurrent.m_bytes[1];
 8003472:	4b2b      	ldr	r3, [pc, #172]	; (8003520 <CANTX_ReportToCharger+0xd8>)
 8003474:	785a      	ldrb	r2, [r3, #1]
 8003476:	4b29      	ldr	r3, [pc, #164]	; (800351c <CANTX_ReportToCharger+0xd4>)
 8003478:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = charge_state;
 800347a:	4b2a      	ldr	r3, [pc, #168]	; (8003524 <CANTX_ReportToCharger+0xdc>)
 800347c:	781a      	ldrb	r2, [r3, #0]
 800347e:	4b27      	ldr	r3, [pc, #156]	; (800351c <CANTX_ReportToCharger+0xd4>)
 8003480:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = 0;
 8003482:	4b26      	ldr	r3, [pc, #152]	; (800351c <CANTX_ReportToCharger+0xd4>)
 8003484:	2200      	movs	r2, #0
 8003486:	715a      	strb	r2, [r3, #5]

	if(BMS_mode == 0) handshake_recognition = 0x55;
 8003488:	4b27      	ldr	r3, [pc, #156]	; (8003528 <CANTX_ReportToCharger+0xe0>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d103      	bne.n	8003498 <CANTX_ReportToCharger+0x50>
 8003490:	4b26      	ldr	r3, [pc, #152]	; (800352c <CANTX_ReportToCharger+0xe4>)
 8003492:	2255      	movs	r2, #85	; 0x55
 8003494:	801a      	strh	r2, [r3, #0]
 8003496:	e006      	b.n	80034a6 <CANTX_ReportToCharger+0x5e>
	else if(BMS_mode == 2) handshake_recognition = 0xAA;
 8003498:	4b23      	ldr	r3, [pc, #140]	; (8003528 <CANTX_ReportToCharger+0xe0>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d102      	bne.n	80034a6 <CANTX_ReportToCharger+0x5e>
 80034a0:	4b22      	ldr	r3, [pc, #136]	; (800352c <CANTX_ReportToCharger+0xe4>)
 80034a2:	22aa      	movs	r2, #170	; 0xaa
 80034a4:	801a      	strh	r2, [r3, #0]

	Tx_data[6] = handshake_recognition;
 80034a6:	4b21      	ldr	r3, [pc, #132]	; (800352c <CANTX_ReportToCharger+0xe4>)
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	4b1b      	ldr	r3, [pc, #108]	; (800351c <CANTX_ReportToCharger+0xd4>)
 80034ae:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 0;
 80034b0:	4b1a      	ldr	r3, [pc, #104]	; (800351c <CANTX_ReportToCharger+0xd4>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #1
	Tx_Header.DLC = 8;
 80034b6:	4b16      	ldr	r3, [pc, #88]	; (8003510 <CANTX_ReportToCharger+0xc8>)
 80034b8:	2208      	movs	r2, #8
 80034ba:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80034bc:	e00f      	b.n	80034de <CANTX_ReportToCharger+0x96>
		if(delay_mailboxcheck > 1000){
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034c4:	dd08      	ble.n	80034d8 <CANTX_ReportToCharger+0x90>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80034c6:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <CANTX_ReportToCharger+0xe8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4619      	mov	r1, r3
 80034cc:	4819      	ldr	r0, [pc, #100]	; (8003534 <CANTX_ReportToCharger+0xec>)
 80034ce:	f004 fd98 	bl	8008002 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
			break;
 80034d6:	e008      	b.n	80034ea <CANTX_ReportToCharger+0xa2>
		}
		delay_mailboxcheck++;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3301      	adds	r3, #1
 80034dc:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80034de:	4815      	ldr	r0, [pc, #84]	; (8003534 <CANTX_ReportToCharger+0xec>)
 80034e0:	f004 fdd3 	bl	800808a <HAL_CAN_GetTxMailboxesFreeLevel>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0e9      	beq.n	80034be <CANTX_ReportToCharger+0x76>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <CANTX_ReportToCharger+0xe8>)
 80034ec:	4a0b      	ldr	r2, [pc, #44]	; (800351c <CANTX_ReportToCharger+0xd4>)
 80034ee:	4908      	ldr	r1, [pc, #32]	; (8003510 <CANTX_ReportToCharger+0xc8>)
 80034f0:	4810      	ldr	r0, [pc, #64]	; (8003534 <CANTX_ReportToCharger+0xec>)
 80034f2:	f004 fcac 	bl	8007e4e <HAL_CAN_AddTxMessage>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d006      	beq.n	800350a <CANTX_ReportToCharger+0xc2>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <CANTX_ReportToCharger+0xe8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4619      	mov	r1, r3
 8003502:	480c      	ldr	r0, [pc, #48]	; (8003534 <CANTX_ReportToCharger+0xec>)
 8003504:	f004 fd7d 	bl	8008002 <HAL_CAN_AbortTxRequest>
		return;
 8003508:	bf00      	nop
//		Error_Handler();
	}
}
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	20000598 	.word	0x20000598
 8003514:	0e000002 	.word	0x0e000002
 8003518:	200005b0 	.word	0x200005b0
 800351c:	200004d4 	.word	0x200004d4
 8003520:	200004cc 	.word	0x200004cc
 8003524:	20000348 	.word	0x20000348
 8003528:	20000384 	.word	0x20000384
 800352c:	200004c0 	.word	0x200004c0
 8003530:	20000588 	.word	0x20000588
 8003534:	200004dc 	.word	0x200004dc

08003538 <CANTX_BattId>:

void CANTX_BattId() {
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;
	// CAN ID transmit #2
	Tx_Header.IDE = CAN_ID_EXT;
 800353e:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <CANTX_BattId+0x9c>)
 8003540:	2204      	movs	r2, #4
 8003542:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0E1<<20|UNIQUE_Code);
 8003544:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <CANTX_BattId+0x9c>)
 8003546:	4a24      	ldr	r2, [pc, #144]	; (80035d8 <CANTX_BattId+0xa0>)
 8003548:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = 0;
 800354a:	4b24      	ldr	r3, [pc, #144]	; (80035dc <CANTX_BattId+0xa4>)
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = 0;
 8003550:	4b22      	ldr	r3, [pc, #136]	; (80035dc <CANTX_BattId+0xa4>)
 8003552:	2200      	movs	r2, #0
 8003554:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = 0x21;
 8003556:	4b21      	ldr	r3, [pc, #132]	; (80035dc <CANTX_BattId+0xa4>)
 8003558:	2221      	movs	r2, #33	; 0x21
 800355a:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = 0x04;
 800355c:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <CANTX_BattId+0xa4>)
 800355e:	2204      	movs	r2, #4
 8003560:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = UNIQUE_Code >> 16;
 8003562:	4b1e      	ldr	r3, [pc, #120]	; (80035dc <CANTX_BattId+0xa4>)
 8003564:	2200      	movs	r2, #0
 8003566:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = UNIQUE_Code >> 8;
 8003568:	4b1c      	ldr	r3, [pc, #112]	; (80035dc <CANTX_BattId+0xa4>)
 800356a:	2200      	movs	r2, #0
 800356c:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = UNIQUE_Code;
 800356e:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <CANTX_BattId+0xa4>)
 8003570:	2202      	movs	r2, #2
 8003572:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 0;
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <CANTX_BattId+0xa4>)
 8003576:	2200      	movs	r2, #0
 8003578:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #2
	Tx_Header.DLC = 8;
 800357a:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <CANTX_BattId+0x9c>)
 800357c:	2208      	movs	r2, #8
 800357e:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8003580:	e00f      	b.n	80035a2 <CANTX_BattId+0x6a>
		if(delay_mailboxcheck > 1000){
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003588:	dd08      	ble.n	800359c <CANTX_BattId+0x64>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 800358a:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <CANTX_BattId+0xa8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4619      	mov	r1, r3
 8003590:	4814      	ldr	r0, [pc, #80]	; (80035e4 <CANTX_BattId+0xac>)
 8003592:	f004 fd36 	bl	8008002 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	607b      	str	r3, [r7, #4]
			break;
 800359a:	e008      	b.n	80035ae <CANTX_BattId+0x76>
		}
		delay_mailboxcheck++;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3301      	adds	r3, #1
 80035a0:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80035a2:	4810      	ldr	r0, [pc, #64]	; (80035e4 <CANTX_BattId+0xac>)
 80035a4:	f004 fd71 	bl	800808a <HAL_CAN_GetTxMailboxesFreeLevel>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0e9      	beq.n	8003582 <CANTX_BattId+0x4a>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <CANTX_BattId+0xa8>)
 80035b0:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <CANTX_BattId+0xa4>)
 80035b2:	4908      	ldr	r1, [pc, #32]	; (80035d4 <CANTX_BattId+0x9c>)
 80035b4:	480b      	ldr	r0, [pc, #44]	; (80035e4 <CANTX_BattId+0xac>)
 80035b6:	f004 fc4a 	bl	8007e4e <HAL_CAN_AddTxMessage>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d006      	beq.n	80035ce <CANTX_BattId+0x96>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80035c0:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <CANTX_BattId+0xa8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4619      	mov	r1, r3
 80035c6:	4807      	ldr	r0, [pc, #28]	; (80035e4 <CANTX_BattId+0xac>)
 80035c8:	f004 fd1b 	bl	8008002 <HAL_CAN_AbortTxRequest>
		return;
 80035cc:	bf00      	nop
//		Error_Handler();
	}
}
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20000598 	.word	0x20000598
 80035d8:	0e100002 	.word	0x0e100002
 80035dc:	200004d4 	.word	0x200004d4
 80035e0:	20000588 	.word	0x20000588
 80035e4:	200004dc 	.word	0x200004dc

080035e8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rx_Header, Rx_data) == HAL_OK) {
 80035f0:	4b60      	ldr	r3, [pc, #384]	; (8003774 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80035f2:	4a61      	ldr	r2, [pc, #388]	; (8003778 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80035f4:	2100      	movs	r1, #0
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f004 fd7b 	bl	80080f2 <HAL_CAN_GetRxMessage>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f040 80b3 	bne.w	800376a <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
		if(Rx_Header.ExtId == 0x1B2){
 8003604:	4b5c      	ldr	r3, [pc, #368]	; (8003778 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
 800360c:	d134      	bne.n	8003678 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
			flag_start_shutdown=Rx_data[0]&0x01;
 800360e:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	b2da      	uxtb	r2, r3
 8003618:	4b58      	ldr	r3, [pc, #352]	; (800377c <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800361a:	701a      	strb	r2, [r3, #0]
			BMS_mode=(Rx_data[0]>>1)&0x03;
 800361c:	4b55      	ldr	r3, [pc, #340]	; (8003774 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	b2db      	uxtb	r3, r3
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4b55      	ldr	r3, [pc, #340]	; (8003780 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 800362c:	701a      	strb	r2, [r3, #0]
			Clear_Trip_overcurrentdischarge=(Rx_data[0]>>3)&&0x01;
 800362e:	4b51      	ldr	r3, [pc, #324]	; (8003774 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	08db      	lsrs	r3, r3, #3
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	bf14      	ite	ne
 800363a:	2301      	movne	r3, #1
 800363c:	2300      	moveq	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	4b50      	ldr	r3, [pc, #320]	; (8003784 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8003644:	701a      	strb	r2, [r3, #0]
			Clear_Trip_undervoltage=(Rx_data[0]>>4)&&0x01;
 8003646:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	bf14      	ite	ne
 8003652:	2301      	movne	r3, #1
 8003654:	2300      	moveq	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	4b4b      	ldr	r3, [pc, #300]	; (8003788 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 800365c:	701a      	strb	r2, [r3, #0]

			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 800365e:	f003 fde3 	bl	8007228 <HAL_GetTick>
 8003662:	4603      	mov	r3, r0
 8003664:	461a      	mov	r2, r3
 8003666:	4b49      	ldr	r3, [pc, #292]	; (800378c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8003668:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 800366a:	f003 fddd 	bl	8007228 <HAL_GetTick>
 800366e:	4603      	mov	r3, r0
 8003670:	461a      	mov	r2, r3
 8003672:	4b47      	ldr	r3, [pc, #284]	; (8003790 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e06d      	b.n	8003754 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(((Rx_Header.ExtId & 0xFFF00000) == 0x0E300000) && (flag_get_UNIQUECODE < 3) ) {
 8003678:	4b3f      	ldr	r3, [pc, #252]	; (8003778 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	0d1b      	lsrs	r3, r3, #20
 800367e:	051b      	lsls	r3, r3, #20
 8003680:	f1b3 6f63 	cmp.w	r3, #238026752	; 0xe300000
 8003684:	d11c      	bne.n	80036c0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
 8003686:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d818      	bhi.n	80036c0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
			flag_start_shutdown = 1;
 800368e:	4b3b      	ldr	r3, [pc, #236]	; (800377c <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
			BMS_mode = 0;
 8003694:	4b3a      	ldr	r3, [pc, #232]	; (8003780 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]
			flag_get_UNIQUECODE++;
 800369a:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	3301      	adds	r3, #1
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4b3c      	ldr	r3, [pc, #240]	; (8003794 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80036a4:	701a      	strb	r2, [r3, #0]
			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 80036a6:	f003 fdbf 	bl	8007228 <HAL_GetTick>
 80036aa:	4603      	mov	r3, r0
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b37      	ldr	r3, [pc, #220]	; (800378c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80036b0:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 80036b2:	f003 fdb9 	bl	8007228 <HAL_GetTick>
 80036b6:	4603      	mov	r3, r0
 80036b8:	461a      	mov	r2, r3
 80036ba:	4b35      	ldr	r3, [pc, #212]	; (8003790 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e049      	b.n	8003754 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(Rx_Header.ExtId == (0x0E3<<20|UNIQUE_Code)){
 80036c0:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4a34      	ldr	r2, [pc, #208]	; (8003798 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d121      	bne.n	800370e <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
			if(Rx_data[5] == 0x55){
 80036ca:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80036cc:	795b      	ldrb	r3, [r3, #5]
 80036ce:	2b55      	cmp	r3, #85	; 0x55
 80036d0:	d106      	bne.n	80036e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
				BMS_mode = 0;
 80036d2:	4b2b      	ldr	r3, [pc, #172]	; (8003780 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
				charge_state = 0;
 80036d8:	4b30      	ldr	r3, [pc, #192]	; (800379c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	e009      	b.n	80036f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
			}
			else if(Rx_data[5] == 0xAA){
 80036e0:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80036e2:	795b      	ldrb	r3, [r3, #5]
 80036e4:	2baa      	cmp	r3, #170	; 0xaa
 80036e6:	d105      	bne.n	80036f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
				BMS_mode = 2;
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80036ea:	2202      	movs	r2, #2
 80036ec:	701a      	strb	r2, [r3, #0]
				charge_state = 1;
 80036ee:	4b2b      	ldr	r3, [pc, #172]	; (800379c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
			}
			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 80036f4:	f003 fd98 	bl	8007228 <HAL_GetTick>
 80036f8:	4603      	mov	r3, r0
 80036fa:	461a      	mov	r2, r3
 80036fc:	4b23      	ldr	r3, [pc, #140]	; (800378c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80036fe:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 8003700:	f003 fd92 	bl	8007228 <HAL_GetTick>
 8003704:	4603      	mov	r3, r0
 8003706:	461a      	mov	r2, r3
 8003708:	4b21      	ldr	r3, [pc, #132]	; (8003790 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	e022      	b.n	8003754 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(Rx_Header.RTR == 2){
 800370e:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d11e      	bne.n	8003754 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			if(Rx_Header.StdId == 0x0B4) dataRTR = 4;
 8003716:	4b18      	ldr	r3, [pc, #96]	; (8003778 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2bb4      	cmp	r3, #180	; 0xb4
 800371c:	d103      	bne.n	8003726 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
 800371e:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8003720:	2204      	movs	r2, #4
 8003722:	701a      	strb	r2, [r3, #0]
 8003724:	e016      	b.n	8003754 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B5) dataRTR = 5;
 8003726:	4b14      	ldr	r3, [pc, #80]	; (8003778 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2bb5      	cmp	r3, #181	; 0xb5
 800372c:	d103      	bne.n	8003736 <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
 800372e:	4b1c      	ldr	r3, [pc, #112]	; (80037a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8003730:	2205      	movs	r2, #5
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e00e      	b.n	8003754 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B6) dataRTR = 6;
 8003736:	4b10      	ldr	r3, [pc, #64]	; (8003778 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2bb6      	cmp	r3, #182	; 0xb6
 800373c:	d103      	bne.n	8003746 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
 800373e:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8003740:	2206      	movs	r2, #6
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	e006      	b.n	8003754 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B7) dataRTR = 7;
 8003746:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2bb7      	cmp	r3, #183	; 0xb7
 800374c:	d102      	bne.n	8003754 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
 800374e:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8003750:	2207      	movs	r2, #7
 8003752:	701a      	strb	r2, [r3, #0]
		}

		Rx_Header.ExtId = 0;
 8003754:	4b08      	ldr	r3, [pc, #32]	; (8003778 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003756:	2200      	movs	r2, #0
 8003758:	605a      	str	r2, [r3, #4]
		Rx_Header.StdId = 0;
 800375a:	4b07      	ldr	r3, [pc, #28]	; (8003778 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
		memset(Rx_data, 0, 8*sizeof(Rx_data[0]));
 8003760:	2208      	movs	r2, #8
 8003762:	2100      	movs	r1, #0
 8003764:	4803      	ldr	r0, [pc, #12]	; (8003774 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8003766:	f008 f94f 	bl	800ba08 <memset>
	}
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000504 	.word	0x20000504
 8003778:	2000056c 	.word	0x2000056c
 800377c:	20000279 	.word	0x20000279
 8003780:	20000384 	.word	0x20000384
 8003784:	2000028c 	.word	0x2000028c
 8003788:	2000035c 	.word	0x2000035c
 800378c:	20000334 	.word	0x20000334
 8003790:	20000368 	.word	0x20000368
 8003794:	2000025d 	.word	0x2000025d
 8003798:	0e300002 	.word	0x0e300002
 800379c:	20000348 	.word	0x20000348
 80037a0:	20000234 	.word	0x20000234

080037a4 <BMS_CAN_Config>:


void BMS_CAN_Config()
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08a      	sub	sp, #40	; 0x28
 80037a8:	af00      	add	r7, sp, #0
	/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80037b2:	2301      	movs	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80037b6:	2300      	movs	r3, #0
 80037b8:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80037ba:	2300      	movs	r3, #0
 80037bc:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80037ca:	2301      	movs	r3, #1
 80037cc:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80037ce:	230e      	movs	r3, #14
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) Error_Handler();
 80037d2:	463b      	mov	r3, r7
 80037d4:	4619      	mov	r1, r3
 80037d6:	4810      	ldr	r0, [pc, #64]	; (8003818 <BMS_CAN_Config+0x74>)
 80037d8:	f004 fa2c 	bl	8007c34 <HAL_CAN_ConfigFilter>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <BMS_CAN_Config+0x42>
 80037e2:	f000 fcb7 	bl	8004154 <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan) != HAL_OK) Error_Handler();
 80037e6:	480c      	ldr	r0, [pc, #48]	; (8003818 <BMS_CAN_Config+0x74>)
 80037e8:	f004 faed 	bl	8007dc6 <HAL_CAN_Start>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <BMS_CAN_Config+0x52>
 80037f2:	f000 fcaf 	bl	8004154 <Error_Handler>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80037f6:	2102      	movs	r1, #2
 80037f8:	4807      	ldr	r0, [pc, #28]	; (8003818 <BMS_CAN_Config+0x74>)
 80037fa:	f004 fd8b 	bl	8008314 <HAL_CAN_ActivateNotification>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 80037fe:	4b07      	ldr	r3, [pc, #28]	; (800381c <BMS_CAN_Config+0x78>)
 8003800:	2200      	movs	r2, #0
 8003802:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <BMS_CAN_Config+0x78>)
 8003806:	2200      	movs	r2, #0
 8003808:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_STD;
 800380a:	4b04      	ldr	r3, [pc, #16]	; (800381c <BMS_CAN_Config+0x78>)
 800380c:	2200      	movs	r2, #0
 800380e:	609a      	str	r2, [r3, #8]
}
 8003810:	bf00      	nop
 8003812:	3728      	adds	r7, #40	; 0x28
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	200004dc 	.word	0x200004dc
 800381c:	20000598 	.word	0x20000598

08003820 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003826:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <MX_DMA_Init+0x38>)
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	4a0b      	ldr	r2, [pc, #44]	; (8003858 <MX_DMA_Init+0x38>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6153      	str	r3, [r2, #20]
 8003832:	4b09      	ldr	r3, [pc, #36]	; (8003858 <MX_DMA_Init+0x38>)
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	607b      	str	r3, [r7, #4]
 800383c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800383e:	2200      	movs	r2, #0
 8003840:	2100      	movs	r1, #0
 8003842:	200b      	movs	r0, #11
 8003844:	f005 f885 	bl	8008952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003848:	200b      	movs	r0, #11
 800384a:	f005 f89e 	bl	800898a <HAL_NVIC_EnableIRQ>

}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000

0800385c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003862:	f107 0310 	add.w	r3, r7, #16
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	605a      	str	r2, [r3, #4]
 800386c:	609a      	str	r2, [r3, #8]
 800386e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003870:	4b40      	ldr	r3, [pc, #256]	; (8003974 <MX_GPIO_Init+0x118>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	4a3f      	ldr	r2, [pc, #252]	; (8003974 <MX_GPIO_Init+0x118>)
 8003876:	f043 0310 	orr.w	r3, r3, #16
 800387a:	6193      	str	r3, [r2, #24]
 800387c:	4b3d      	ldr	r3, [pc, #244]	; (8003974 <MX_GPIO_Init+0x118>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003888:	4b3a      	ldr	r3, [pc, #232]	; (8003974 <MX_GPIO_Init+0x118>)
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	4a39      	ldr	r2, [pc, #228]	; (8003974 <MX_GPIO_Init+0x118>)
 800388e:	f043 0304 	orr.w	r3, r3, #4
 8003892:	6193      	str	r3, [r2, #24]
 8003894:	4b37      	ldr	r3, [pc, #220]	; (8003974 <MX_GPIO_Init+0x118>)
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a0:	4b34      	ldr	r3, [pc, #208]	; (8003974 <MX_GPIO_Init+0x118>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	4a33      	ldr	r2, [pc, #204]	; (8003974 <MX_GPIO_Init+0x118>)
 80038a6:	f043 0308 	orr.w	r3, r3, #8
 80038aa:	6193      	str	r3, [r2, #24]
 80038ac:	4b31      	ldr	r3, [pc, #196]	; (8003974 <MX_GPIO_Init+0x118>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|BMS_SHUTDOWN_Pin|EEPROM_WP_Pin|LED_Pin
 80038b8:	2200      	movs	r2, #0
 80038ba:	f243 0162 	movw	r1, #12386	; 0x3062
 80038be:	482e      	ldr	r0, [pc, #184]	; (8003978 <MX_GPIO_Init+0x11c>)
 80038c0:	f005 fd69 	bl	8009396 <HAL_GPIO_WritePin>
                          |CSBI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 80038c4:	2200      	movs	r2, #0
 80038c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038ca:	482c      	ldr	r0, [pc, #176]	; (800397c <MX_GPIO_Init+0x120>)
 80038cc:	f005 fd63 	bl	8009396 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCK_Pin|SDO_Pin|SDI_Pin, GPIO_PIN_RESET);
 80038d0:	2200      	movs	r2, #0
 80038d2:	2138      	movs	r1, #56	; 0x38
 80038d4:	482a      	ldr	r0, [pc, #168]	; (8003980 <MX_GPIO_Init+0x124>)
 80038d6:	f005 fd5e 	bl	8009396 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|BMS_SHUTDOWN_Pin;
 80038da:	f242 0302 	movw	r3, #8194	; 0x2002
 80038de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038e0:	2301      	movs	r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80038e4:	2302      	movs	r3, #2
 80038e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e8:	2302      	movs	r3, #2
 80038ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ec:	f107 0310 	add.w	r3, r7, #16
 80038f0:	4619      	mov	r1, r3
 80038f2:	4821      	ldr	r0, [pc, #132]	; (8003978 <MX_GPIO_Init+0x11c>)
 80038f4:	f005 fba4 	bl	8009040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = EEPROM_WP_Pin|LED_Pin|CSBI_Pin;
 80038f8:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 80038fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038fe:	2301      	movs	r3, #1
 8003900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003906:	2302      	movs	r3, #2
 8003908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800390a:	f107 0310 	add.w	r3, r7, #16
 800390e:	4619      	mov	r1, r3
 8003910:	4819      	ldr	r0, [pc, #100]	; (8003978 <MX_GPIO_Init+0x11c>)
 8003912:	f005 fb95 	bl	8009040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GATE_MOS_Pin;
 8003916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800391a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800391c:	2301      	movs	r3, #1
 800391e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003920:	2302      	movs	r3, #2
 8003922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003924:	2302      	movs	r3, #2
 8003926:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GATE_MOS_GPIO_Port, &GPIO_InitStruct);
 8003928:	f107 0310 	add.w	r3, r7, #16
 800392c:	4619      	mov	r1, r3
 800392e:	4813      	ldr	r0, [pc, #76]	; (800397c <MX_GPIO_Init+0x120>)
 8003930:	f005 fb86 	bl	8009040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003942:	f107 0310 	add.w	r3, r7, #16
 8003946:	4619      	mov	r1, r3
 8003948:	480c      	ldr	r0, [pc, #48]	; (800397c <MX_GPIO_Init+0x120>)
 800394a:	f005 fb79 	bl	8009040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDI_Pin;
 800394e:	2338      	movs	r3, #56	; 0x38
 8003950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003952:	2301      	movs	r3, #1
 8003954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395a:	2302      	movs	r3, #2
 800395c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800395e:	f107 0310 	add.w	r3, r7, #16
 8003962:	4619      	mov	r1, r3
 8003964:	4806      	ldr	r0, [pc, #24]	; (8003980 <MX_GPIO_Init+0x124>)
 8003966:	f005 fb6b 	bl	8009040 <HAL_GPIO_Init>

}
 800396a:	bf00      	nop
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
 8003978:	40011000 	.word	0x40011000
 800397c:	40010800 	.word	0x40010800
 8003980:	40010c00 	.word	0x40010c00

08003984 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003988:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <MX_I2C1_Init+0x50>)
 800398a:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <MX_I2C1_Init+0x54>)
 800398c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <MX_I2C1_Init+0x50>)
 8003990:	4a12      	ldr	r2, [pc, #72]	; (80039dc <MX_I2C1_Init+0x58>)
 8003992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003994:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <MX_I2C1_Init+0x50>)
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <MX_I2C1_Init+0x50>)
 800399c:	2200      	movs	r2, #0
 800399e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <MX_I2C1_Init+0x50>)
 80039a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039a8:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <MX_I2C1_Init+0x50>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <MX_I2C1_Init+0x50>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039b4:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <MX_I2C1_Init+0x50>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039ba:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <MX_I2C1_Init+0x50>)
 80039bc:	2200      	movs	r2, #0
 80039be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039c0:	4804      	ldr	r0, [pc, #16]	; (80039d4 <MX_I2C1_Init+0x50>)
 80039c2:	f005 fd19 	bl	80093f8 <HAL_I2C_Init>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80039cc:	f000 fbc2 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039d0:	bf00      	nop
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	200005c0 	.word	0x200005c0
 80039d8:	40005400 	.word	0x40005400
 80039dc:	00061a80 	.word	0x00061a80

080039e0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80039e4:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <MX_I2C2_Init+0x50>)
 80039e6:	4a13      	ldr	r2, [pc, #76]	; (8003a34 <MX_I2C2_Init+0x54>)
 80039e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80039ea:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <MX_I2C2_Init+0x50>)
 80039ec:	4a12      	ldr	r2, [pc, #72]	; (8003a38 <MX_I2C2_Init+0x58>)
 80039ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039f0:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <MX_I2C2_Init+0x50>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80039f6:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <MX_I2C2_Init+0x50>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <MX_I2C2_Init+0x50>)
 80039fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a02:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <MX_I2C2_Init+0x50>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <MX_I2C2_Init+0x50>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a10:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <MX_I2C2_Init+0x50>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <MX_I2C2_Init+0x50>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003a1c:	4804      	ldr	r0, [pc, #16]	; (8003a30 <MX_I2C2_Init+0x50>)
 8003a1e:	f005 fceb 	bl	80093f8 <HAL_I2C_Init>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003a28:	f000 fb94 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003a2c:	bf00      	nop
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20000614 	.word	0x20000614
 8003a34:	40005800 	.word	0x40005800
 8003a38:	000186a0 	.word	0x000186a0

08003a3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a44:	f107 0318 	add.w	r3, r7, #24
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a2b      	ldr	r2, [pc, #172]	; (8003b04 <HAL_I2C_MspInit+0xc8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d124      	bne.n	8003aa6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5c:	4b2a      	ldr	r3, [pc, #168]	; (8003b08 <HAL_I2C_MspInit+0xcc>)
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	4a29      	ldr	r2, [pc, #164]	; (8003b08 <HAL_I2C_MspInit+0xcc>)
 8003a62:	f043 0308 	orr.w	r3, r3, #8
 8003a66:	6193      	str	r3, [r2, #24]
 8003a68:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <HAL_I2C_MspInit+0xcc>)
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8003a74:	23c0      	movs	r3, #192	; 0xc0
 8003a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a78:	2312      	movs	r3, #18
 8003a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a80:	f107 0318 	add.w	r3, r7, #24
 8003a84:	4619      	mov	r1, r3
 8003a86:	4821      	ldr	r0, [pc, #132]	; (8003b0c <HAL_I2C_MspInit+0xd0>)
 8003a88:	f005 fada 	bl	8009040 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a8c:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <HAL_I2C_MspInit+0xcc>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <HAL_I2C_MspInit+0xcc>)
 8003a92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a96:	61d3      	str	r3, [r2, #28]
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_I2C_MspInit+0xcc>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003aa4:	e029      	b.n	8003afa <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a19      	ldr	r2, [pc, #100]	; (8003b10 <HAL_I2C_MspInit+0xd4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d124      	bne.n	8003afa <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab0:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <HAL_I2C_MspInit+0xcc>)
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <HAL_I2C_MspInit+0xcc>)
 8003ab6:	f043 0308 	orr.w	r3, r3, #8
 8003aba:	6193      	str	r3, [r2, #24]
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_I2C_MspInit+0xcc>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8003ac8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ace:	2312      	movs	r3, #18
 8003ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad6:	f107 0318 	add.w	r3, r7, #24
 8003ada:	4619      	mov	r1, r3
 8003adc:	480b      	ldr	r0, [pc, #44]	; (8003b0c <HAL_I2C_MspInit+0xd0>)
 8003ade:	f005 faaf 	bl	8009040 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ae2:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <HAL_I2C_MspInit+0xcc>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	4a08      	ldr	r2, [pc, #32]	; (8003b08 <HAL_I2C_MspInit+0xcc>)
 8003ae8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003aec:	61d3      	str	r3, [r2, #28]
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_I2C_MspInit+0xcc>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
}
 8003afa:	bf00      	nop
 8003afc:	3728      	adds	r7, #40	; 0x28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40005400 	.word	0x40005400
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40010c00 	.word	0x40010c00
 8003b10:	40005800 	.word	0x40005800

08003b14 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <MX_IWDG_Init+0x2c>)
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <MX_IWDG_Init+0x30>)
 8003b1c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8003b1e:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <MX_IWDG_Init+0x2c>)
 8003b20:	2206      	movs	r2, #6
 8003b22:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <MX_IWDG_Init+0x2c>)
 8003b26:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003b2a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003b2c:	4804      	ldr	r0, [pc, #16]	; (8003b40 <MX_IWDG_Init+0x2c>)
 8003b2e:	f006 fd91 	bl	800a654 <HAL_IWDG_Init>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8003b38:	f000 fb0c 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003b3c:	bf00      	nop
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000668 	.word	0x20000668
 8003b44:	40003000 	.word	0x40003000

08003b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b4c:	f003 fb14 	bl	8007178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b50:	f000 f884 	bl	8003c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b54:	f7ff fe82 	bl	800385c <MX_GPIO_Init>
  MX_DMA_Init();
 8003b58:	f7ff fe62 	bl	8003820 <MX_DMA_Init>
  MX_ADC1_Init();
 8003b5c:	f7ff f832 	bl	8002bc4 <MX_ADC1_Init>
  MX_CAN_Init();
 8003b60:	f7ff f944 	bl	8002dec <MX_CAN_Init>
  MX_I2C1_Init();
 8003b64:	f7ff ff0e 	bl	8003984 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003b68:	f003 fa04 	bl	8006f74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003b6c:	f003 fa50 	bl	8007010 <MX_TIM3_Init>
  MX_I2C2_Init();
 8003b70:	f7ff ff36 	bl	80039e0 <MX_I2C2_Init>
  MX_IWDG_Init();
 8003b74:	f7ff ffce 	bl	8003b14 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  BMS_Init();
 8003b78:	f000 f8cc 	bl	8003d14 <BMS_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Read voltage per-cell and total voltage
	  ltc6804_CS_RESET(ltc6804_CS_PIN);
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b82:	482b      	ldr	r0, [pc, #172]	; (8003c30 <main+0xe8>)
 8003b84:	f005 fc07 	bl	8009396 <HAL_GPIO_WritePin>
	  read_voltage_percell();
 8003b88:	f7fe fe3e 	bl	8002808 <read_voltage_percell>
	  read_sumvoltage(&pack_voltage, &ansupply_LTC6804);
 8003b8c:	4929      	ldr	r1, [pc, #164]	; (8003c34 <main+0xec>)
 8003b8e:	482a      	ldr	r0, [pc, #168]	; (8003c38 <main+0xf0>)
 8003b90:	f7fe feae 	bl	80028f0 <read_sumvoltage>

	  read_aux_adc();
 8003b94:	f7fe fe96 	bl	80028c4 <read_aux_adc>

	  //Onder & Over voltage per-cell protection
	  isCell_UnderVoltage(cellvoltage_float);
 8003b98:	4828      	ldr	r0, [pc, #160]	; (8003c3c <main+0xf4>)
 8003b9a:	f000 f9af 	bl	8003efc <isCell_UnderVoltage>
	  isCell_OverVoltage(cellvoltage_float);
 8003b9e:	4827      	ldr	r0, [pc, #156]	; (8003c3c <main+0xf4>)
 8003ba0:	f000 f9e2 	bl	8003f68 <isCell_OverVoltage>
	  }
	  sum_voltage = pack_voltage;
	  pack_voltage = 0;
	  */

	  ltc6804_CS_SET(ltc6804_CS_PIN);
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003baa:	4821      	ldr	r0, [pc, #132]	; (8003c30 <main+0xe8>)
 8003bac:	f005 fbf3 	bl	8009396 <HAL_GPIO_WritePin>

	  //comparing cell voltage to get imbalance cell
	  unbalance_cell = get_balance_status(cellvoltage_float);
 8003bb0:	4822      	ldr	r0, [pc, #136]	; (8003c3c <main+0xf4>)
 8003bb2:	f7fe ff01 	bl	80029b8 <get_balance_status>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <main+0xf8>)
 8003bbc:	801a      	strh	r2, [r3, #0]

	  // Balancing Process
	  if(BMS_mode == 2 && IBATT < -0.1 && (VBATT > VBATT_BALANCE_START)) { //arus charging 0.1 tidak perlu di balancing
 8003bbe:	4b21      	ldr	r3, [pc, #132]	; (8003c44 <main+0xfc>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d11b      	bne.n	8003bfe <main+0xb6>
 8003bc6:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <main+0x100>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fc fc98 	bl	8000500 <__aeabi_f2d>
 8003bd0:	a315      	add	r3, pc, #84	; (adr r3, 8003c28 <main+0xe0>)
 8003bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd6:	f7fc ff5d 	bl	8000a94 <__aeabi_dcmplt>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00e      	beq.n	8003bfe <main+0xb6>
 8003be0:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <main+0x104>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	491a      	ldr	r1, [pc, #104]	; (8003c50 <main+0x108>)
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fd faf4 	bl	80011d4 <__aeabi_fcmpgt>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <main+0xb6>
		  LTC681x_balance_cell(balance_status);
 8003bf2:	4b18      	ldr	r3, [pc, #96]	; (8003c54 <main+0x10c>)
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe ff90 	bl	8002b1c <LTC681x_balance_cell>
 8003bfc:	e005      	b.n	8003c0a <main+0xc2>
	  }
	  else {
		  balance_status = 0;
 8003bfe:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <main+0x10c>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	801a      	strh	r2, [r3, #0]
		  LTC681x_balance_cell(0);
 8003c04:	2000      	movs	r0, #0
 8003c06:	f7fe ff89 	bl	8002b1c <LTC681x_balance_cell>
	  if (BMS_mode == 2)
		  LTC681x_balance_cell(1023);
	  else
		  LTC681x_balance_cell(0);
*/
	  LED_Toggle;
 8003c0a:	2140      	movs	r1, #64	; 0x40
 8003c0c:	4808      	ldr	r0, [pc, #32]	; (8003c30 <main+0xe8>)
 8003c0e:	f005 fbda 	bl	80093c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 8003c12:	2001      	movs	r0, #1
 8003c14:	f003 fb12 	bl	800723c <HAL_Delay>

	  BMS_ScreenMode_RUN();
 8003c18:	f000 f8ee 	bl	8003df8 <BMS_ScreenMode_RUN>
	  HAL_IWDG_Refresh(&hiwdg);
 8003c1c:	480e      	ldr	r0, [pc, #56]	; (8003c58 <main+0x110>)
 8003c1e:	f006 fd5b 	bl	800a6d8 <HAL_IWDG_Refresh>
	  ltc6804_CS_RESET(ltc6804_CS_PIN);
 8003c22:	e7ab      	b.n	8003b7c <main+0x34>
 8003c24:	f3af 8000 	nop.w
 8003c28:	9999999a 	.word	0x9999999a
 8003c2c:	bfb99999 	.word	0xbfb99999
 8003c30:	40011000 	.word	0x40011000
 8003c34:	20000690 	.word	0x20000690
 8003c38:	2000069c 	.word	0x2000069c
 8003c3c:	200003e4 	.word	0x200003e4
 8003c40:	2000028e 	.word	0x2000028e
 8003c44:	20000384 	.word	0x20000384
 8003c48:	200002f8 	.word	0x200002f8
 8003c4c:	2000027c 	.word	0x2000027c
 8003c50:	42040000 	.word	0x42040000
 8003c54:	20000330 	.word	0x20000330
 8003c58:	20000668 	.word	0x20000668

08003c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b096      	sub	sp, #88	; 0x58
 8003c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c66:	2228      	movs	r2, #40	; 0x28
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f007 fecc 	bl	800ba08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c70:	f107 031c 	add.w	r3, r7, #28
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c80:	1d3b      	adds	r3, r7, #4
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	605a      	str	r2, [r3, #4]
 8003c88:	609a      	str	r2, [r3, #8]
 8003c8a:	60da      	str	r2, [r3, #12]
 8003c8c:	611a      	str	r2, [r3, #16]
 8003c8e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003c90:	230a      	movs	r3, #10
 8003c92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c94:	2301      	movs	r3, #1
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c98:	2310      	movs	r3, #16
 8003c9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003ca8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003cac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f006 fd20 	bl	800a6f8 <HAL_RCC_OscConfig>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003cbe:	f000 fa49 	bl	8004154 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cc2:	230f      	movs	r3, #15
 8003cc4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003cd8:	f107 031c 	add.w	r3, r7, #28
 8003cdc:	2102      	movs	r1, #2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f006 ff8a 	bl	800abf8 <HAL_RCC_ClockConfig>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003cea:	f000 fa33 	bl	8004154 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cf6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cf8:	1d3b      	adds	r3, r7, #4
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f007 f902 	bl	800af04 <HAL_RCCEx_PeriphCLKConfig>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003d06:	f000 fa25 	bl	8004154 <Error_Handler>
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	3758      	adds	r7, #88	; 0x58
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <BMS_Init>:

/* USER CODE BEGIN 4 */
void BMS_Init(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
	itoa(UNIQUE_Code, lower_UNIQUE_Code, 16);
 8003d1a:	2210      	movs	r2, #16
 8003d1c:	492c      	ldr	r1, [pc, #176]	; (8003dd0 <BMS_Init+0xbc>)
 8003d1e:	2002      	movs	r0, #2
 8003d20:	f007 fe60 	bl	800b9e4 <itoa>
	int ii=0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	607b      	str	r3, [r7, #4]
	while(ii<6){
 8003d28:	e01a      	b.n	8003d60 <BMS_Init+0x4c>
		UPPER_UNIQUE_Code[ii] = toupper(lower_UNIQUE_Code[ii]);
 8003d2a:	4a29      	ldr	r2, [pc, #164]	; (8003dd0 <BMS_Init+0xbc>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4413      	add	r3, r2
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	70fb      	strb	r3, [r7, #3]
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	3301      	adds	r3, #1
 8003d38:	4a26      	ldr	r2, [pc, #152]	; (8003dd4 <BMS_Init+0xc0>)
 8003d3a:	4413      	add	r3, r2
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d102      	bne.n	8003d4c <BMS_Init+0x38>
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	3b20      	subs	r3, #32
 8003d4a:	e000      	b.n	8003d4e <BMS_Init+0x3a>
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	b2d9      	uxtb	r1, r3
 8003d50:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <BMS_Init+0xc4>)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4413      	add	r3, r2
 8003d56:	460a      	mov	r2, r1
 8003d58:	701a      	strb	r2, [r3, #0]
		ii++;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	607b      	str	r3, [r7, #4]
	while(ii<6){
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b05      	cmp	r3, #5
 8003d64:	dde1      	ble.n	8003d2a <BMS_Init+0x16>
	}

	//beep startup indicator
	StartUp_Buzzer();
 8003d66:	f000 f981 	bl	800406c <StartUp_Buzzer>
	SSD1306_Puts ("10S13P", &Font_7x10, 1);
	SSD1306_UpdateScreen(); //display
	SSD1306_Fill (0);
#endif

	ltc6804_GPIO_Config();
 8003d6a:	f7fd fe3d 	bl	80019e8 <ltc6804_GPIO_Config>
	ltc6804_SPIInit();
 8003d6e:	f7fd fe99 	bl	8001aa4 <ltc6804_SPIInit>

	set_adc(MD_NORMAL, DCP_DISABLED, CELL_CH_ALL, AUX_CH_ALL); //ADC Setting
 8003d72:	2300      	movs	r3, #0
 8003d74:	2200      	movs	r2, #0
 8003d76:	2100      	movs	r1, #0
 8003d78:	2002      	movs	r0, #2
 8003d7a:	f7fd ff8d 	bl	8001c98 <set_adc>
	HAL_Delay(10);
 8003d7e:	200a      	movs	r0, #10
 8003d80:	f003 fa5c 	bl	800723c <HAL_Delay>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc_value, 7);
 8003d84:	2207      	movs	r2, #7
 8003d86:	4915      	ldr	r1, [pc, #84]	; (8003ddc <BMS_Init+0xc8>)
 8003d88:	4815      	ldr	r0, [pc, #84]	; (8003de0 <BMS_Init+0xcc>)
 8003d8a:	f003 fb65 	bl	8007458 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8003d8e:	4815      	ldr	r0, [pc, #84]	; (8003de4 <BMS_Init+0xd0>)
 8003d90:	f007 f9be 	bl	800b110 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8003d94:	4814      	ldr	r0, [pc, #80]	; (8003de8 <BMS_Init+0xd4>)
 8003d96:	f007 f9bb 	bl	800b110 <HAL_TIM_Base_Start_IT>

	BATT_State=STATE_STANDBY;
 8003d9a:	4b14      	ldr	r3, [pc, #80]	; (8003dec <BMS_Init+0xd8>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
	Batt_Open_Mode();
 8003da0:	f7fd fbcc 	bl	800153c <Batt_Open_Mode>
	BATT_Start_Up = 1;
 8003da4:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <BMS_Init+0xdc>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
	flag_start_shutdown = 0;
 8003daa:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <BMS_Init+0xe0>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8003db0:	2032      	movs	r0, #50	; 0x32
 8003db2:	f003 fa43 	bl	800723c <HAL_Delay>
	EEPROM_isDeviceReady(0xA0);
 8003db6:	20a0      	movs	r0, #160	; 0xa0
 8003db8:	f7fd fdbe 	bl	8001938 <EEPROM_isDeviceReady>
	BMS_CAN_Config();
 8003dbc:	f7ff fcf2 	bl	80037a4 <BMS_CAN_Config>
	HAL_Delay(100);
 8003dc0:	2064      	movs	r0, #100	; 0x64
 8003dc2:	f003 fa3b 	bl	800723c <HAL_Delay>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000694 	.word	0x20000694
 8003dd4:	08010ac4 	.word	0x08010ac4
 8003dd8:	20000688 	.word	0x20000688
 8003ddc:	200002e8 	.word	0x200002e8
 8003de0:	2000044c 	.word	0x2000044c
 8003de4:	200008dc 	.word	0x200008dc
 8003de8:	20000894 	.word	0x20000894
 8003dec:	20000699 	.word	0x20000699
 8003df0:	20000235 	.word	0x20000235
 8003df4:	20000279 	.word	0x20000279

08003df8 <BMS_ScreenMode_RUN>:

void BMS_ScreenMode_RUN(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
	if(flag_start_shutdown == 0)
 8003dfc:	4b33      	ldr	r3, [pc, #204]	; (8003ecc <BMS_ScreenMode_RUN+0xd4>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d12b      	bne.n	8003e5c <BMS_ScreenMode_RUN+0x64>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
		SSD1306_UpdateScreen();
		#endif


		Batt_Open_Mode();
 8003e04:	f7fd fb9a 	bl	800153c <Batt_Open_Mode>
		Reset_FlagProtection();
 8003e08:	f000 f8e4 	bl	8003fd4 <Reset_FlagProtection>
		OFFSET_SENSOR_ARUS=IBATT_for_offset_cal;
 8003e0c:	4b30      	ldr	r3, [pc, #192]	; (8003ed0 <BMS_ScreenMode_RUN+0xd8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a30      	ldr	r2, [pc, #192]	; (8003ed4 <BMS_ScreenMode_RUN+0xdc>)
 8003e12:	6013      	str	r3, [r2, #0]

		if(last_flag_start_shutdown==1) Shutdown_time_last = HAL_GetTick();
 8003e14:	4b30      	ldr	r3, [pc, #192]	; (8003ed8 <BMS_ScreenMode_RUN+0xe0>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d105      	bne.n	8003e28 <BMS_ScreenMode_RUN+0x30>
 8003e1c:	f003 fa04 	bl	8007228 <HAL_GetTick>
 8003e20:	4603      	mov	r3, r0
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b2d      	ldr	r3, [pc, #180]	; (8003edc <BMS_ScreenMode_RUN+0xe4>)
 8003e26:	601a      	str	r2, [r3, #0]

		// Automatic sleep after 30s without receive CAN
		Shutdown_time=HAL_GetTick();
 8003e28:	f003 f9fe 	bl	8007228 <HAL_GetTick>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4b2b      	ldr	r3, [pc, #172]	; (8003ee0 <BMS_ScreenMode_RUN+0xe8>)
 8003e32:	601a      	str	r2, [r3, #0]
		if(Shutdown_time-Shutdown_time_last>Shutdown_tick)
 8003e34:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <BMS_ScreenMode_RUN+0xe8>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b28      	ldr	r3, [pc, #160]	; (8003edc <BMS_ScreenMode_RUN+0xe4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	1ad2      	subs	r2, r2, r3
 8003e3e:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <BMS_ScreenMode_RUN+0xec>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	dd06      	ble.n	8003e54 <BMS_ScreenMode_RUN+0x5c>
		{
			ShutDown_Buzzer();
 8003e46:	f000 f94b 	bl	80040e0 <ShutDown_Buzzer>
			HAL_GPIO_WritePin(BMS_SHUTDOWN_GPIO_Port, BMS_SHUTDOWN_Pin, 1);
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	2102      	movs	r1, #2
 8003e4e:	4826      	ldr	r0, [pc, #152]	; (8003ee8 <BMS_ScreenMode_RUN+0xf0>)
 8003e50:	f005 faa1 	bl	8009396 <HAL_GPIO_WritePin>
		}

		last_flag_start_shutdown = 0;
 8003e54:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <BMS_ScreenMode_RUN+0xe0>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e032      	b.n	8003ec2 <BMS_ScreenMode_RUN+0xca>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);

		SSD1306_UpdateScreen();
		#endif

		if(BMS_mode==0) Batt_Open_Mode();
 8003e5c:	4b23      	ldr	r3, [pc, #140]	; (8003eec <BMS_ScreenMode_RUN+0xf4>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d102      	bne.n	8003e6a <BMS_ScreenMode_RUN+0x72>
 8003e64:	f7fd fb6a 	bl	800153c <Batt_Open_Mode>
 8003e68:	e013      	b.n	8003e92 <BMS_ScreenMode_RUN+0x9a>
		else if(BMS_mode==1) Batt_Discharge_Mode();
 8003e6a:	4b20      	ldr	r3, [pc, #128]	; (8003eec <BMS_ScreenMode_RUN+0xf4>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d102      	bne.n	8003e78 <BMS_ScreenMode_RUN+0x80>
 8003e72:	f7fd fa37 	bl	80012e4 <Batt_Discharge_Mode>
 8003e76:	e00c      	b.n	8003e92 <BMS_ScreenMode_RUN+0x9a>
		else if(BMS_mode==2) Batt_Charge_Mode();
 8003e78:	4b1c      	ldr	r3, [pc, #112]	; (8003eec <BMS_ScreenMode_RUN+0xf4>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d102      	bne.n	8003e86 <BMS_ScreenMode_RUN+0x8e>
 8003e80:	f7fd fa8a 	bl	8001398 <Batt_Charge_Mode>
 8003e84:	e005      	b.n	8003e92 <BMS_ScreenMode_RUN+0x9a>
		else if(BMS_mode==3) Batt_Full_CD_Mode();
 8003e86:	4b19      	ldr	r3, [pc, #100]	; (8003eec <BMS_ScreenMode_RUN+0xf4>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d101      	bne.n	8003e92 <BMS_ScreenMode_RUN+0x9a>
 8003e8e:	f7fd fae9 	bl	8001464 <Batt_Full_CD_Mode>

	//  Automatically sleep after 30s without receive CAN
		Sleep_time=HAL_GetTick();
 8003e92:	f003 f9c9 	bl	8007228 <HAL_GetTick>
 8003e96:	4603      	mov	r3, r0
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <BMS_ScreenMode_RUN+0xf8>)
 8003e9c:	601a      	str	r2, [r3, #0]
		if(Sleep_time-Active_time_last>Sleep_tick)
 8003e9e:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <BMS_ScreenMode_RUN+0xf8>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <BMS_ScreenMode_RUN+0xfc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	1ad2      	subs	r2, r2, r3
 8003ea8:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <BMS_ScreenMode_RUN+0x100>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	dd05      	ble.n	8003ebc <BMS_ScreenMode_RUN+0xc4>
		{
			BMS_mode=0;
 8003eb0:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <BMS_ScreenMode_RUN+0xf4>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
			flag_start_shutdown=0;
 8003eb6:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <BMS_ScreenMode_RUN+0xd4>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
		}
		last_flag_start_shutdown = 1;
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <BMS_ScreenMode_RUN+0xe0>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1);
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	f003 f9ba 	bl	800723c <HAL_Delay>
}
 8003ec8:	bf00      	nop
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000279 	.word	0x20000279
 8003ed0:	2000037c 	.word	0x2000037c
 8003ed4:	20000374 	.word	0x20000374
 8003ed8:	20000370 	.word	0x20000370
 8003edc:	20000368 	.word	0x20000368
 8003ee0:	20000358 	.word	0x20000358
 8003ee4:	20000008 	.word	0x20000008
 8003ee8:	40011000 	.word	0x40011000
 8003eec:	20000384 	.word	0x20000384
 8003ef0:	2000026c 	.word	0x2000026c
 8003ef4:	20000334 	.word	0x20000334
 8003ef8:	20000004 	.word	0x20000004

08003efc <isCell_UnderVoltage>:

void isCell_UnderVoltage(float Cell_Voltage_10data[10]){
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	for(uint8_t kl=0; kl<10; kl++){
 8003f04:	2300      	movs	r3, #0
 8003f06:	73fb      	strb	r3, [r7, #15]
 8003f08:	e01e      	b.n	8003f48 <isCell_UnderVoltage+0x4c>
		if (Cell_Voltage_10data[kl] < Cell_UnderVoltage_Threshold) {
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	4413      	add	r3, r2
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a10      	ldr	r2, [pc, #64]	; (8003f58 <isCell_UnderVoltage+0x5c>)
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fd f93d 	bl	8001198 <__aeabi_fcmplt>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00b      	beq.n	8003f3c <isCell_UnderVoltage+0x40>
			fault_code = 15;
 8003f24:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <isCell_UnderVoltage+0x60>)
 8003f26:	220f      	movs	r2, #15
 8003f28:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 8003f2a:	f7fd fb07 	bl	800153c <Batt_Open_Mode>
			flag_trip_cellundervoltage = ON;
 8003f2e:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <isCell_UnderVoltage+0x64>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	701a      	strb	r2, [r3, #0]
			Cell_UnderVoltage = YES;
 8003f34:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <isCell_UnderVoltage+0x68>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	e002      	b.n	8003f42 <isCell_UnderVoltage+0x46>
		}
		else Cell_UnderVoltage = NO;
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <isCell_UnderVoltage+0x68>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
	for(uint8_t kl=0; kl<10; kl++){
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	3301      	adds	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b09      	cmp	r3, #9
 8003f4c:	d9dd      	bls.n	8003f0a <isCell_UnderVoltage+0xe>
	}
}
 8003f4e:	bf00      	nop
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	402ccccd 	.word	0x402ccccd
 8003f5c:	2000030a 	.word	0x2000030a
 8003f60:	20000350 	.word	0x20000350
 8003f64:	200002e4 	.word	0x200002e4

08003f68 <isCell_OverVoltage>:

void isCell_OverVoltage(float Cell_Voltage_10data[10]){
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
	for(uint8_t kl=0; kl<10; kl++){
 8003f70:	2300      	movs	r3, #0
 8003f72:	73fb      	strb	r3, [r7, #15]
 8003f74:	e01e      	b.n	8003fb4 <isCell_OverVoltage+0x4c>
		if (Cell_Voltage_10data[kl] > Cell_OverVoltage_Threshold) {
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a10      	ldr	r2, [pc, #64]	; (8003fc4 <isCell_OverVoltage+0x5c>)
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fd f925 	bl	80011d4 <__aeabi_fcmpgt>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00b      	beq.n	8003fa8 <isCell_OverVoltage+0x40>
			fault_code = 16;
 8003f90:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <isCell_OverVoltage+0x60>)
 8003f92:	2210      	movs	r2, #16
 8003f94:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 8003f96:	f7fd fad1 	bl	800153c <Batt_Open_Mode>
			flag_trip_cellovervoltage = ON;
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <isCell_OverVoltage+0x64>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	701a      	strb	r2, [r3, #0]
			Cell_OverVoltage = YES;
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <isCell_OverVoltage+0x68>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	e002      	b.n	8003fae <isCell_OverVoltage+0x46>
		}
		else Cell_OverVoltage = NO;
 8003fa8:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <isCell_OverVoltage+0x68>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	701a      	strb	r2, [r3, #0]
	for(uint8_t kl=0; kl<10; kl++){
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	2b09      	cmp	r3, #9
 8003fb8:	d9dd      	bls.n	8003f76 <isCell_OverVoltage+0xe>
	}
}
 8003fba:	bf00      	nop
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40866666 	.word	0x40866666
 8003fc8:	2000030a 	.word	0x2000030a
 8003fcc:	20000258 	.word	0x20000258
 8003fd0:	200002f6 	.word	0x200002f6

08003fd4 <Reset_FlagProtection>:
void Reset_FlagProtection(void){
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
	flag_trip_overtemperature=OFF;
 8003fd8:	4b16      	ldr	r3, [pc, #88]	; (8004034 <Reset_FlagProtection+0x60>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
	flag_trip_undertemperature=OFF;
 8003fde:	4b16      	ldr	r3, [pc, #88]	; (8004038 <Reset_FlagProtection+0x64>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	701a      	strb	r2, [r3, #0]
	flag_trip_SOCOverDischarge=OFF;
 8003fe4:	4b15      	ldr	r3, [pc, #84]	; (800403c <Reset_FlagProtection+0x68>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	701a      	strb	r2, [r3, #0]
	flag_trip_SOCOverCharge=OFF;			//di tiada kan..!
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <Reset_FlagProtection+0x6c>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
	flag_trip_undervoltage=OFF;
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <Reset_FlagProtection+0x70>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
	flag_trip_overvoltage=OFF;
 8003ff6:	4b14      	ldr	r3, [pc, #80]	; (8004048 <Reset_FlagProtection+0x74>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	701a      	strb	r2, [r3, #0]
	flag_trip_overcurrentdischarge=OFF;
 8003ffc:	4b13      	ldr	r3, [pc, #76]	; (800404c <Reset_FlagProtection+0x78>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]
	flag_trip_overcurrentcharge=OFF;
 8004002:	4b13      	ldr	r3, [pc, #76]	; (8004050 <Reset_FlagProtection+0x7c>)
 8004004:	2200      	movs	r2, #0
 8004006:	701a      	strb	r2, [r3, #0]
	flag_trip_shortcircuit=OFF;
 8004008:	4b12      	ldr	r3, [pc, #72]	; (8004054 <Reset_FlagProtection+0x80>)
 800400a:	2200      	movs	r2, #0
 800400c:	701a      	strb	r2, [r3, #0]
	flag_trip_systemfailure=OFF;
 800400e:	4b12      	ldr	r3, [pc, #72]	; (8004058 <Reset_FlagProtection+0x84>)
 8004010:	2200      	movs	r2, #0
 8004012:	701a      	strb	r2, [r3, #0]
	flag_trip_unbalance=OFF;
 8004014:	4b11      	ldr	r3, [pc, #68]	; (800405c <Reset_FlagProtection+0x88>)
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
	flag_get_UNIQUECODE=OFF;
 800401a:	4b11      	ldr	r3, [pc, #68]	; (8004060 <Reset_FlagProtection+0x8c>)
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
	flag_trip_cellovervoltage = OFF;
 8004020:	4b10      	ldr	r3, [pc, #64]	; (8004064 <Reset_FlagProtection+0x90>)
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
	flag_trip_cellundervoltage = OFF;
 8004026:	4b10      	ldr	r3, [pc, #64]	; (8004068 <Reset_FlagProtection+0x94>)
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	20000278 	.word	0x20000278
 8004038:	20000300 	.word	0x20000300
 800403c:	20000338 	.word	0x20000338
 8004040:	2000025a 	.word	0x2000025a
 8004044:	20000301 	.word	0x20000301
 8004048:	2000038c 	.word	0x2000038c
 800404c:	20000314 	.word	0x20000314
 8004050:	20000332 	.word	0x20000332
 8004054:	2000025c 	.word	0x2000025c
 8004058:	20000264 	.word	0x20000264
 800405c:	20000259 	.word	0x20000259
 8004060:	2000025d 	.word	0x2000025d
 8004064:	20000258 	.word	0x20000258
 8004068:	20000350 	.word	0x20000350

0800406c <StartUp_Buzzer>:
void StartUp_Buzzer(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
	BUZZ_Write(1); HAL_Delay(500);
 8004070:	2201      	movs	r2, #1
 8004072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004076:	4819      	ldr	r0, [pc, #100]	; (80040dc <StartUp_Buzzer+0x70>)
 8004078:	f005 f98d 	bl	8009396 <HAL_GPIO_WritePin>
 800407c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004080:	f003 f8dc 	bl	800723c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(500);
 8004084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004088:	4814      	ldr	r0, [pc, #80]	; (80040dc <StartUp_Buzzer+0x70>)
 800408a:	f005 f99c 	bl	80093c6 <HAL_GPIO_TogglePin>
 800408e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004092:	f003 f8d3 	bl	800723c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(100);
 8004096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800409a:	4810      	ldr	r0, [pc, #64]	; (80040dc <StartUp_Buzzer+0x70>)
 800409c:	f005 f993 	bl	80093c6 <HAL_GPIO_TogglePin>
 80040a0:	2064      	movs	r0, #100	; 0x64
 80040a2:	f003 f8cb 	bl	800723c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(100);
 80040a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040aa:	480c      	ldr	r0, [pc, #48]	; (80040dc <StartUp_Buzzer+0x70>)
 80040ac:	f005 f98b 	bl	80093c6 <HAL_GPIO_TogglePin>
 80040b0:	2064      	movs	r0, #100	; 0x64
 80040b2:	f003 f8c3 	bl	800723c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(100);
 80040b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040ba:	4808      	ldr	r0, [pc, #32]	; (80040dc <StartUp_Buzzer+0x70>)
 80040bc:	f005 f983 	bl	80093c6 <HAL_GPIO_TogglePin>
 80040c0:	2064      	movs	r0, #100	; 0x64
 80040c2:	f003 f8bb 	bl	800723c <HAL_Delay>
	BUZZ_Write(0); HAL_Delay(100);
 80040c6:	2200      	movs	r2, #0
 80040c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040cc:	4803      	ldr	r0, [pc, #12]	; (80040dc <StartUp_Buzzer+0x70>)
 80040ce:	f005 f962 	bl	8009396 <HAL_GPIO_WritePin>
 80040d2:	2064      	movs	r0, #100	; 0x64
 80040d4:	f003 f8b2 	bl	800723c <HAL_Delay>
}
 80040d8:	bf00      	nop
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40011000 	.word	0x40011000

080040e0 <ShutDown_Buzzer>:

void ShutDown_Buzzer(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
	BUZZ_Write(1); HAL_Delay(100);
 80040e4:	2201      	movs	r2, #1
 80040e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040ea:	4819      	ldr	r0, [pc, #100]	; (8004150 <ShutDown_Buzzer+0x70>)
 80040ec:	f005 f953 	bl	8009396 <HAL_GPIO_WritePin>
 80040f0:	2064      	movs	r0, #100	; 0x64
 80040f2:	f003 f8a3 	bl	800723c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(100);
 80040f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040fa:	4815      	ldr	r0, [pc, #84]	; (8004150 <ShutDown_Buzzer+0x70>)
 80040fc:	f005 f963 	bl	80093c6 <HAL_GPIO_TogglePin>
 8004100:	2064      	movs	r0, #100	; 0x64
 8004102:	f003 f89b 	bl	800723c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(100);
 8004106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800410a:	4811      	ldr	r0, [pc, #68]	; (8004150 <ShutDown_Buzzer+0x70>)
 800410c:	f005 f95b 	bl	80093c6 <HAL_GPIO_TogglePin>
 8004110:	2064      	movs	r0, #100	; 0x64
 8004112:	f003 f893 	bl	800723c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(100);
 8004116:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800411a:	480d      	ldr	r0, [pc, #52]	; (8004150 <ShutDown_Buzzer+0x70>)
 800411c:	f005 f953 	bl	80093c6 <HAL_GPIO_TogglePin>
 8004120:	2064      	movs	r0, #100	; 0x64
 8004122:	f003 f88b 	bl	800723c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(750);
 8004126:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800412a:	4809      	ldr	r0, [pc, #36]	; (8004150 <ShutDown_Buzzer+0x70>)
 800412c:	f005 f94b 	bl	80093c6 <HAL_GPIO_TogglePin>
 8004130:	f240 20ee 	movw	r0, #750	; 0x2ee
 8004134:	f003 f882 	bl	800723c <HAL_Delay>
	BUZZ_Write(0); HAL_Delay(100);
 8004138:	2200      	movs	r2, #0
 800413a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800413e:	4804      	ldr	r0, [pc, #16]	; (8004150 <ShutDown_Buzzer+0x70>)
 8004140:	f005 f929 	bl	8009396 <HAL_GPIO_WritePin>
 8004144:	2064      	movs	r0, #100	; 0x64
 8004146:	f003 f879 	bl	800723c <HAL_Delay>
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40011000 	.word	0x40011000

08004154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004158:	b672      	cpsid	i
}
 800415a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800415c:	e7fe      	b.n	800415c <Error_Handler+0x8>
	...

08004160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004166:	4b15      	ldr	r3, [pc, #84]	; (80041bc <HAL_MspInit+0x5c>)
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	4a14      	ldr	r2, [pc, #80]	; (80041bc <HAL_MspInit+0x5c>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	6193      	str	r3, [r2, #24]
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <HAL_MspInit+0x5c>)
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <HAL_MspInit+0x5c>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	4a0e      	ldr	r2, [pc, #56]	; (80041bc <HAL_MspInit+0x5c>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	61d3      	str	r3, [r2, #28]
 800418a:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <HAL_MspInit+0x5c>)
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004196:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <HAL_MspInit+0x60>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <HAL_MspInit+0x60>)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40010000 	.word	0x40010000

080041c4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80041c8:	e7fe      	b.n	80041c8 <NMI_Handler+0x4>

080041ca <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80041ca:	b480      	push	{r7}
 80041cc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80041ce:	e7fe      	b.n	80041ce <HardFault_Handler+0x4>

080041d0 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80041d4:	e7fe      	b.n	80041d4 <MemManage_Handler+0x4>

080041d6 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80041d6:	b480      	push	{r7}
 80041d8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 80041da:	e7fe      	b.n	80041da <BusFault_Handler+0x4>

080041dc <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 80041e0:	e7fe      	b.n	80041e0 <UsageFault_Handler+0x4>

080041e2 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80041e2:	b480      	push	{r7}
 80041e4:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80041e6:	bf00      	nop
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr

080041ee <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80041ee:	b480      	push	{r7}
 80041f0:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80041fa:	b480      	push	{r7}
 80041fc:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80041fe:	bf00      	nop
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr

08004206 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800420a:	f002 fffb 	bl	8007204 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <DMA1_Channel1_IRQHandler>:

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 8004218:	4802      	ldr	r0, [pc, #8]	; (8004224 <DMA1_Channel1_IRQHandler+0x10>)
 800421a:	f004 fca7 	bl	8008b6c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800421e:	bf00      	nop
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	2000047c 	.word	0x2000047c

08004228 <USB_LP_CAN1_RX0_IRQHandler>:

/**
 * @brief This function handles USB low priority or CAN RX0 interrupts.
 */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

	/* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 800422c:	4802      	ldr	r0, [pc, #8]	; (8004238 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800422e:	f004 f896 	bl	800835e <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

	/* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004232:	bf00      	nop
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	200004dc 	.word	0x200004dc
 800423c:	00000000 	.word	0x00000000

08004240 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void)
{
 8004240:	b5b0      	push	{r4, r5, r7, lr}
 8004242:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8004244:	48c0      	ldr	r0, [pc, #768]	; (8004548 <TIM2_IRQHandler+0x308>)
 8004246:	f006 ffd1 	bl	800b1ec <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */
	hitung_suhu++;
 800424a:	4bc0      	ldr	r3, [pc, #768]	; (800454c <TIM2_IRQHandler+0x30c>)
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	3301      	adds	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	4bbe      	ldr	r3, [pc, #760]	; (800454c <TIM2_IRQHandler+0x30c>)
 8004254:	801a      	strh	r2, [r3, #0]

	//Moving Average
	sumI=sumI-i_arrdata[i];		//menghapus sample data pertama/data lama
 8004256:	4bbe      	ldr	r3, [pc, #760]	; (8004550 <TIM2_IRQHandler+0x310>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4abe      	ldr	r2, [pc, #760]	; (8004554 <TIM2_IRQHandler+0x314>)
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	49be      	ldr	r1, [pc, #760]	; (8004558 <TIM2_IRQHandler+0x318>)
 8004260:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	4aba      	ldr	r2, [pc, #744]	; (8004550 <TIM2_IRQHandler+0x310>)
 8004268:	6013      	str	r3, [r2, #0]
	i_arrdata[i]=adc_value[4];	//save nilai ADC dari variable DMA
 800426a:	4bba      	ldr	r3, [pc, #744]	; (8004554 <TIM2_IRQHandler+0x314>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4abb      	ldr	r2, [pc, #748]	; (800455c <TIM2_IRQHandler+0x31c>)
 8004270:	8911      	ldrh	r1, [r2, #8]
 8004272:	4ab9      	ldr	r2, [pc, #740]	; (8004558 <TIM2_IRQHandler+0x318>)
 8004274:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sumI=sumI+i_arrdata[i];		//menambahkan sample data paling baru
 8004278:	4bb6      	ldr	r3, [pc, #728]	; (8004554 <TIM2_IRQHandler+0x314>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4ab6      	ldr	r2, [pc, #728]	; (8004558 <TIM2_IRQHandler+0x318>)
 800427e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004282:	461a      	mov	r2, r3
 8004284:	4bb2      	ldr	r3, [pc, #712]	; (8004550 <TIM2_IRQHandler+0x310>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4413      	add	r3, r2
 800428a:	4ab1      	ldr	r2, [pc, #708]	; (8004550 <TIM2_IRQHandler+0x310>)
 800428c:	6013      	str	r3, [r2, #0]
	i_datadigi=sumI/maxdata;	//menghitung rata-rata
 800428e:	4bb0      	ldr	r3, [pc, #704]	; (8004550 <TIM2_IRQHandler+0x310>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4ab3      	ldr	r2, [pc, #716]	; (8004560 <TIM2_IRQHandler+0x320>)
 8004294:	fb82 1203 	smull	r1, r2, r2, r3
 8004298:	1192      	asrs	r2, r2, #6
 800429a:	17db      	asrs	r3, r3, #31
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fc fd88 	bl	8000db4 <__aeabi_i2f>
 80042a4:	4603      	mov	r3, r0
 80042a6:	4aaf      	ldr	r2, [pc, #700]	; (8004564 <TIM2_IRQHandler+0x324>)
 80042a8:	6013      	str	r3, [r2, #0]

	// *************PROSES Konversi dari DATA ADC ke Data Real *******************************/////

	VBATT = pack_voltage;
 80042aa:	4baf      	ldr	r3, [pc, #700]	; (8004568 <TIM2_IRQHandler+0x328>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4aaf      	ldr	r2, [pc, #700]	; (800456c <TIM2_IRQHandler+0x32c>)
 80042b0:	6013      	str	r3, [r2, #0]
	if(VBATT<0) VBATT=-1;
 80042b2:	4bae      	ldr	r3, [pc, #696]	; (800456c <TIM2_IRQHandler+0x32c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f04f 0100 	mov.w	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fc ff6c 	bl	8001198 <__aeabi_fcmplt>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <TIM2_IRQHandler+0x8c>
 80042c6:	4ba9      	ldr	r3, [pc, #676]	; (800456c <TIM2_IRQHandler+0x32c>)
 80042c8:	4aa9      	ldr	r2, [pc, #676]	; (8004570 <TIM2_IRQHandler+0x330>)
 80042ca:	601a      	str	r2, [r3, #0]

//	IBATT = 0.062151574718308*i_datadigi - 121.796885042846 - OFFSET_SENSOR_ARUS; // Modul B fix
//	IBATT_for_offset_cal= 0.062151574718308*i_datadigi - 121.796885042846;
	IBATT = 0.0635607965300084*i_datadigi - 126.223575896323; // Modul A fix
 80042cc:	4ba5      	ldr	r3, [pc, #660]	; (8004564 <TIM2_IRQHandler+0x324>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fc f915 	bl	8000500 <__aeabi_f2d>
 80042d6:	a394      	add	r3, pc, #592	; (adr r3, 8004528 <TIM2_IRQHandler+0x2e8>)
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	f7fc f968 	bl	80005b0 <__aeabi_dmul>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4610      	mov	r0, r2
 80042e6:	4619      	mov	r1, r3
 80042e8:	a391      	add	r3, pc, #580	; (adr r3, 8004530 <TIM2_IRQHandler+0x2f0>)
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f7fb ffa7 	bl	8000240 <__aeabi_dsub>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	f7fc fc51 	bl	8000ba0 <__aeabi_d2f>
 80042fe:	4603      	mov	r3, r0
 8004300:	4a9c      	ldr	r2, [pc, #624]	; (8004574 <TIM2_IRQHandler+0x334>)
 8004302:	6013      	str	r3, [r2, #0]
//	IBATT = (0.0635607965300084*i_datadigi - 125.342575896323)*1.415; // Modul B fix
//	IBATT_for_offset_cal= 0.0635607965300084*i_datadigi - 126.923575896323;

	if(hitung_suhu >= interval_hitungsuhu) {
 8004304:	4b91      	ldr	r3, [pc, #580]	; (800454c <TIM2_IRQHandler+0x30c>)
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	2bc7      	cmp	r3, #199	; 0xc7
 800430a:	f240 81cd 	bls.w	80046a8 <TIM2_IRQHandler+0x468>

		Res_T1  = adc_value[0]*10000/(3900-adc_value[0]); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 800430e:	4b93      	ldr	r3, [pc, #588]	; (800455c <TIM2_IRQHandler+0x31c>)
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	f242 7310 	movw	r3, #10000	; 0x2710
 8004318:	fb03 f202 	mul.w	r2, r3, r2
 800431c:	4b8f      	ldr	r3, [pc, #572]	; (800455c <TIM2_IRQHandler+0x31c>)
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004324:	330c      	adds	r3, #12
 8004326:	fb92 f3f3 	sdiv	r3, r2, r3
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc fd42 	bl	8000db4 <__aeabi_i2f>
 8004330:	4603      	mov	r3, r0
 8004332:	4a91      	ldr	r2, [pc, #580]	; (8004578 <TIM2_IRQHandler+0x338>)
 8004334:	6013      	str	r3, [r2, #0]
		Suhu_T1 = -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8004336:	4b90      	ldr	r3, [pc, #576]	; (8004578 <TIM2_IRQHandler+0x338>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7fc f8e0 	bl	8000500 <__aeabi_f2d>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4610      	mov	r0, r2
 8004346:	4619      	mov	r1, r3
 8004348:	f00b ffaa 	bl	80102a0 <log>
 800434c:	a37a      	add	r3, pc, #488	; (adr r3, 8004538 <TIM2_IRQHandler+0x2f8>)
 800434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004352:	f7fc f92d 	bl	80005b0 <__aeabi_dmul>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4610      	mov	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	a378      	add	r3, pc, #480	; (adr r3, 8004540 <TIM2_IRQHandler+0x300>)
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f7fb ff6e 	bl	8000244 <__adddf3>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4610      	mov	r0, r2
 800436e:	4619      	mov	r1, r3
 8004370:	f7fc fc16 	bl	8000ba0 <__aeabi_d2f>
 8004374:	4603      	mov	r3, r0
 8004376:	4a81      	ldr	r2, [pc, #516]	; (800457c <TIM2_IRQHandler+0x33c>)
 8004378:	6013      	str	r3, [r2, #0]

		Res_T2  = adc_value[1]*10000/(3900-adc_value[1]);
 800437a:	4b78      	ldr	r3, [pc, #480]	; (800455c <TIM2_IRQHandler+0x31c>)
 800437c:	885b      	ldrh	r3, [r3, #2]
 800437e:	461a      	mov	r2, r3
 8004380:	f242 7310 	movw	r3, #10000	; 0x2710
 8004384:	fb03 f202 	mul.w	r2, r3, r2
 8004388:	4b74      	ldr	r3, [pc, #464]	; (800455c <TIM2_IRQHandler+0x31c>)
 800438a:	885b      	ldrh	r3, [r3, #2]
 800438c:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004390:	330c      	adds	r3, #12
 8004392:	fb92 f3f3 	sdiv	r3, r2, r3
 8004396:	4618      	mov	r0, r3
 8004398:	f7fc fd0c 	bl	8000db4 <__aeabi_i2f>
 800439c:	4603      	mov	r3, r0
 800439e:	4a78      	ldr	r2, [pc, #480]	; (8004580 <TIM2_IRQHandler+0x340>)
 80043a0:	6013      	str	r3, [r2, #0]
		Suhu_T2 = -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 80043a2:	4b77      	ldr	r3, [pc, #476]	; (8004580 <TIM2_IRQHandler+0x340>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fc f8aa 	bl	8000500 <__aeabi_f2d>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4610      	mov	r0, r2
 80043b2:	4619      	mov	r1, r3
 80043b4:	f00b ff74 	bl	80102a0 <log>
 80043b8:	a35f      	add	r3, pc, #380	; (adr r3, 8004538 <TIM2_IRQHandler+0x2f8>)
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	f7fc f8f7 	bl	80005b0 <__aeabi_dmul>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	a35d      	add	r3, pc, #372	; (adr r3, 8004540 <TIM2_IRQHandler+0x300>)
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f7fb ff38 	bl	8000244 <__adddf3>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4610      	mov	r0, r2
 80043da:	4619      	mov	r1, r3
 80043dc:	f7fc fbe0 	bl	8000ba0 <__aeabi_d2f>
 80043e0:	4603      	mov	r3, r0
 80043e2:	4a68      	ldr	r2, [pc, #416]	; (8004584 <TIM2_IRQHandler+0x344>)
 80043e4:	6013      	str	r3, [r2, #0]

		Res_T3  = adc_value[5]*10000/(3900-adc_value[5]);
 80043e6:	4b5d      	ldr	r3, [pc, #372]	; (800455c <TIM2_IRQHandler+0x31c>)
 80043e8:	895b      	ldrh	r3, [r3, #10]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f242 7310 	movw	r3, #10000	; 0x2710
 80043f0:	fb03 f202 	mul.w	r2, r3, r2
 80043f4:	4b59      	ldr	r3, [pc, #356]	; (800455c <TIM2_IRQHandler+0x31c>)
 80043f6:	895b      	ldrh	r3, [r3, #10]
 80043f8:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 80043fc:	330c      	adds	r3, #12
 80043fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8004402:	4618      	mov	r0, r3
 8004404:	f7fc fcd6 	bl	8000db4 <__aeabi_i2f>
 8004408:	4603      	mov	r3, r0
 800440a:	4a5f      	ldr	r2, [pc, #380]	; (8004588 <TIM2_IRQHandler+0x348>)
 800440c:	6013      	str	r3, [r2, #0]
		Suhu_T3 = -24.05*log(Res_T3) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 800440e:	4b5e      	ldr	r3, [pc, #376]	; (8004588 <TIM2_IRQHandler+0x348>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fc f874 	bl	8000500 <__aeabi_f2d>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4610      	mov	r0, r2
 800441e:	4619      	mov	r1, r3
 8004420:	f00b ff3e 	bl	80102a0 <log>
 8004424:	a344      	add	r3, pc, #272	; (adr r3, 8004538 <TIM2_IRQHandler+0x2f8>)
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f7fc f8c1 	bl	80005b0 <__aeabi_dmul>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4610      	mov	r0, r2
 8004434:	4619      	mov	r1, r3
 8004436:	a342      	add	r3, pc, #264	; (adr r3, 8004540 <TIM2_IRQHandler+0x300>)
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f7fb ff02 	bl	8000244 <__adddf3>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4610      	mov	r0, r2
 8004446:	4619      	mov	r1, r3
 8004448:	f7fc fbaa 	bl	8000ba0 <__aeabi_d2f>
 800444c:	4603      	mov	r3, r0
 800444e:	4a4f      	ldr	r2, [pc, #316]	; (800458c <TIM2_IRQHandler+0x34c>)
 8004450:	6013      	str	r3, [r2, #0]

		Res_T4  = adc_value[6]*10000/(3900-adc_value[6]);
 8004452:	4b42      	ldr	r3, [pc, #264]	; (800455c <TIM2_IRQHandler+0x31c>)
 8004454:	899b      	ldrh	r3, [r3, #12]
 8004456:	461a      	mov	r2, r3
 8004458:	f242 7310 	movw	r3, #10000	; 0x2710
 800445c:	fb03 f202 	mul.w	r2, r3, r2
 8004460:	4b3e      	ldr	r3, [pc, #248]	; (800455c <TIM2_IRQHandler+0x31c>)
 8004462:	899b      	ldrh	r3, [r3, #12]
 8004464:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004468:	330c      	adds	r3, #12
 800446a:	fb92 f3f3 	sdiv	r3, r2, r3
 800446e:	4618      	mov	r0, r3
 8004470:	f7fc fca0 	bl	8000db4 <__aeabi_i2f>
 8004474:	4603      	mov	r3, r0
 8004476:	4a46      	ldr	r2, [pc, #280]	; (8004590 <TIM2_IRQHandler+0x350>)
 8004478:	6013      	str	r3, [r2, #0]
		Suhu_T4 = -24.05*log(Res_T4) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 800447a:	4b45      	ldr	r3, [pc, #276]	; (8004590 <TIM2_IRQHandler+0x350>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fc f83e 	bl	8000500 <__aeabi_f2d>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4610      	mov	r0, r2
 800448a:	4619      	mov	r1, r3
 800448c:	f00b ff08 	bl	80102a0 <log>
 8004490:	a329      	add	r3, pc, #164	; (adr r3, 8004538 <TIM2_IRQHandler+0x2f8>)
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f7fc f88b 	bl	80005b0 <__aeabi_dmul>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4610      	mov	r0, r2
 80044a0:	4619      	mov	r1, r3
 80044a2:	a327      	add	r3, pc, #156	; (adr r3, 8004540 <TIM2_IRQHandler+0x300>)
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	f7fb fecc 	bl	8000244 <__adddf3>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4610      	mov	r0, r2
 80044b2:	4619      	mov	r1, r3
 80044b4:	f7fc fb74 	bl	8000ba0 <__aeabi_d2f>
 80044b8:	4603      	mov	r3, r0
 80044ba:	4a36      	ldr	r2, [pc, #216]	; (8004594 <TIM2_IRQHandler+0x354>)
 80044bc:	6013      	str	r3, [r2, #0]

		Res_T5 = adc_value[2]*10000/(3900-adc_value[2]);
 80044be:	4b27      	ldr	r3, [pc, #156]	; (800455c <TIM2_IRQHandler+0x31c>)
 80044c0:	889b      	ldrh	r3, [r3, #4]
 80044c2:	461a      	mov	r2, r3
 80044c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80044c8:	fb03 f202 	mul.w	r2, r3, r2
 80044cc:	4b23      	ldr	r3, [pc, #140]	; (800455c <TIM2_IRQHandler+0x31c>)
 80044ce:	889b      	ldrh	r3, [r3, #4]
 80044d0:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 80044d4:	330c      	adds	r3, #12
 80044d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fc fc6a 	bl	8000db4 <__aeabi_i2f>
 80044e0:	4603      	mov	r3, r0
 80044e2:	4a2d      	ldr	r2, [pc, #180]	; (8004598 <TIM2_IRQHandler+0x358>)
 80044e4:	6013      	str	r3, [r2, #0]
		MOS_Temp = -24.05*log(Res_T5) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 80044e6:	4b2c      	ldr	r3, [pc, #176]	; (8004598 <TIM2_IRQHandler+0x358>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fc f808 	bl	8000500 <__aeabi_f2d>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4610      	mov	r0, r2
 80044f6:	4619      	mov	r1, r3
 80044f8:	f00b fed2 	bl	80102a0 <log>
 80044fc:	a30e      	add	r3, pc, #56	; (adr r3, 8004538 <TIM2_IRQHandler+0x2f8>)
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	f7fc f855 	bl	80005b0 <__aeabi_dmul>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	a30c      	add	r3, pc, #48	; (adr r3, 8004540 <TIM2_IRQHandler+0x300>)
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f7fb fe96 	bl	8000244 <__adddf3>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4610      	mov	r0, r2
 800451e:	4619      	mov	r1, r3
 8004520:	e03c      	b.n	800459c <TIM2_IRQHandler+0x35c>
 8004522:	bf00      	nop
 8004524:	f3af 8000 	nop.w
 8004528:	366772dc 	.word	0x366772dc
 800452c:	3fb04585 	.word	0x3fb04585
 8004530:	1146b865 	.word	0x1146b865
 8004534:	405f8e4f 	.word	0x405f8e4f
 8004538:	cccccccd 	.word	0xcccccccd
 800453c:	c0380ccc 	.word	0xc0380ccc
 8004540:	b851eb85 	.word	0xb851eb85
 8004544:	406ecd1e 	.word	0x406ecd1e
 8004548:	200008dc 	.word	0x200008dc
 800454c:	2000088c 	.word	0x2000088c
 8004550:	20000884 	.word	0x20000884
 8004554:	20000878 	.word	0x20000878
 8004558:	200006e0 	.word	0x200006e0
 800455c:	200002e8 	.word	0x200002e8
 8004560:	51eb851f 	.word	0x51eb851f
 8004564:	20000274 	.word	0x20000274
 8004568:	2000069c 	.word	0x2000069c
 800456c:	2000027c 	.word	0x2000027c
 8004570:	bf800000 	.word	0xbf800000
 8004574:	200002f8 	.word	0x200002f8
 8004578:	200002e0 	.word	0x200002e0
 800457c:	2000030c 	.word	0x2000030c
 8004580:	2000033c 	.word	0x2000033c
 8004584:	20000390 	.word	0x20000390
 8004588:	2000036c 	.word	0x2000036c
 800458c:	20000280 	.word	0x20000280
 8004590:	200002fc 	.word	0x200002fc
 8004594:	20000344 	.word	0x20000344
 8004598:	20000318 	.word	0x20000318
 800459c:	f7fc fb00 	bl	8000ba0 <__aeabi_d2f>
 80045a0:	4603      	mov	r3, r0
 80045a2:	4a4b      	ldr	r2, [pc, #300]	; (80046d0 <TIM2_IRQHandler+0x490>)
 80045a4:	6013      	str	r3, [r2, #0]

		Res_T6 = adc_value[3]*10000/(3900-adc_value[3]);
 80045a6:	4b4b      	ldr	r3, [pc, #300]	; (80046d4 <TIM2_IRQHandler+0x494>)
 80045a8:	88db      	ldrh	r3, [r3, #6]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80045b0:	fb03 f202 	mul.w	r2, r3, r2
 80045b4:	4b47      	ldr	r3, [pc, #284]	; (80046d4 <TIM2_IRQHandler+0x494>)
 80045b6:	88db      	ldrh	r3, [r3, #6]
 80045b8:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 80045bc:	330c      	adds	r3, #12
 80045be:	fb92 f3f3 	sdiv	r3, r2, r3
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fc fbf6 	bl	8000db4 <__aeabi_i2f>
 80045c8:	4603      	mov	r3, r0
 80045ca:	4a43      	ldr	r2, [pc, #268]	; (80046d8 <TIM2_IRQHandler+0x498>)
 80045cc:	6013      	str	r3, [r2, #0]
		CurrentSensor_Temp = -24.05*log(Res_T6) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 80045ce:	4b42      	ldr	r3, [pc, #264]	; (80046d8 <TIM2_IRQHandler+0x498>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fb ff94 	bl	8000500 <__aeabi_f2d>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4610      	mov	r0, r2
 80045de:	4619      	mov	r1, r3
 80045e0:	f00b fe5e 	bl	80102a0 <log>
 80045e4:	a336      	add	r3, pc, #216	; (adr r3, 80046c0 <TIM2_IRQHandler+0x480>)
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	f7fb ffe1 	bl	80005b0 <__aeabi_dmul>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	a334      	add	r3, pc, #208	; (adr r3, 80046c8 <TIM2_IRQHandler+0x488>)
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	f7fb fe22 	bl	8000244 <__adddf3>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4610      	mov	r0, r2
 8004606:	4619      	mov	r1, r3
 8004608:	f7fc faca 	bl	8000ba0 <__aeabi_d2f>
 800460c:	4603      	mov	r3, r0
 800460e:	4a33      	ldr	r2, [pc, #204]	; (80046dc <TIM2_IRQHandler+0x49c>)
 8004610:	6013      	str	r3, [r2, #0]

		if(Suhu_T1>=130) Suhu_T1 = 130;
 8004612:	4b33      	ldr	r3, [pc, #204]	; (80046e0 <TIM2_IRQHandler+0x4a0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4933      	ldr	r1, [pc, #204]	; (80046e4 <TIM2_IRQHandler+0x4a4>)
 8004618:	4618      	mov	r0, r3
 800461a:	f7fc fdd1 	bl	80011c0 <__aeabi_fcmpge>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <TIM2_IRQHandler+0x3ea>
 8004624:	4b2e      	ldr	r3, [pc, #184]	; (80046e0 <TIM2_IRQHandler+0x4a0>)
 8004626:	4a2f      	ldr	r2, [pc, #188]	; (80046e4 <TIM2_IRQHandler+0x4a4>)
 8004628:	601a      	str	r2, [r3, #0]
		if(Suhu_T2>=130) Suhu_T2 = 130;
 800462a:	4b2f      	ldr	r3, [pc, #188]	; (80046e8 <TIM2_IRQHandler+0x4a8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	492d      	ldr	r1, [pc, #180]	; (80046e4 <TIM2_IRQHandler+0x4a4>)
 8004630:	4618      	mov	r0, r3
 8004632:	f7fc fdc5 	bl	80011c0 <__aeabi_fcmpge>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <TIM2_IRQHandler+0x402>
 800463c:	4b2a      	ldr	r3, [pc, #168]	; (80046e8 <TIM2_IRQHandler+0x4a8>)
 800463e:	4a29      	ldr	r2, [pc, #164]	; (80046e4 <TIM2_IRQHandler+0x4a4>)
 8004640:	601a      	str	r2, [r3, #0]
		if(Suhu_T3>=130) Suhu_T3 = 130;
 8004642:	4b2a      	ldr	r3, [pc, #168]	; (80046ec <TIM2_IRQHandler+0x4ac>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4927      	ldr	r1, [pc, #156]	; (80046e4 <TIM2_IRQHandler+0x4a4>)
 8004648:	4618      	mov	r0, r3
 800464a:	f7fc fdb9 	bl	80011c0 <__aeabi_fcmpge>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <TIM2_IRQHandler+0x41a>
 8004654:	4b25      	ldr	r3, [pc, #148]	; (80046ec <TIM2_IRQHandler+0x4ac>)
 8004656:	4a23      	ldr	r2, [pc, #140]	; (80046e4 <TIM2_IRQHandler+0x4a4>)
 8004658:	601a      	str	r2, [r3, #0]
		if(Suhu_T4>=130) Suhu_T4 = 130;
 800465a:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <TIM2_IRQHandler+0x4b0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4921      	ldr	r1, [pc, #132]	; (80046e4 <TIM2_IRQHandler+0x4a4>)
 8004660:	4618      	mov	r0, r3
 8004662:	f7fc fdad 	bl	80011c0 <__aeabi_fcmpge>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <TIM2_IRQHandler+0x432>
 800466c:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <TIM2_IRQHandler+0x4b0>)
 800466e:	4a1d      	ldr	r2, [pc, #116]	; (80046e4 <TIM2_IRQHandler+0x4a4>)
 8004670:	601a      	str	r2, [r3, #0]
		if(MOS_Temp>=130) MOS_Temp = 130;
 8004672:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <TIM2_IRQHandler+0x490>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	491b      	ldr	r1, [pc, #108]	; (80046e4 <TIM2_IRQHandler+0x4a4>)
 8004678:	4618      	mov	r0, r3
 800467a:	f7fc fda1 	bl	80011c0 <__aeabi_fcmpge>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <TIM2_IRQHandler+0x44a>
 8004684:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <TIM2_IRQHandler+0x490>)
 8004686:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <TIM2_IRQHandler+0x4a4>)
 8004688:	601a      	str	r2, [r3, #0]
		if(CurrentSensor_Temp>=130) CurrentSensor_Temp = 130;
 800468a:	4b14      	ldr	r3, [pc, #80]	; (80046dc <TIM2_IRQHandler+0x49c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4915      	ldr	r1, [pc, #84]	; (80046e4 <TIM2_IRQHandler+0x4a4>)
 8004690:	4618      	mov	r0, r3
 8004692:	f7fc fd95 	bl	80011c0 <__aeabi_fcmpge>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <TIM2_IRQHandler+0x462>
 800469c:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <TIM2_IRQHandler+0x49c>)
 800469e:	4a11      	ldr	r2, [pc, #68]	; (80046e4 <TIM2_IRQHandler+0x4a4>)
 80046a0:	601a      	str	r2, [r3, #0]

		hitung_suhu=0;
 80046a2:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <TIM2_IRQHandler+0x4b4>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	801a      	strh	r2, [r3, #0]
	}

	if(BATT_Start_Up==1)
 80046a8:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <TIM2_IRQHandler+0x4b8>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	f040 80ce 	bne.w	800484e <TIM2_IRQHandler+0x60e>
	{
		if(BATT_State == STATE_DISCHARGE){
 80046b2:	4b12      	ldr	r3, [pc, #72]	; (80046fc <TIM2_IRQHandler+0x4bc>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d122      	bne.n	8004700 <TIM2_IRQHandler+0x4c0>
			Batt_Protection_when_discharge();
 80046ba:	f000 fa15 	bl	8004ae8 <Batt_Protection_when_discharge>
 80046be:	e025      	b.n	800470c <TIM2_IRQHandler+0x4cc>
 80046c0:	cccccccd 	.word	0xcccccccd
 80046c4:	c0380ccc 	.word	0xc0380ccc
 80046c8:	b851eb85 	.word	0xb851eb85
 80046cc:	406ecd1e 	.word	0x406ecd1e
 80046d0:	20000328 	.word	0x20000328
 80046d4:	200002e8 	.word	0x200002e8
 80046d8:	20000380 	.word	0x20000380
 80046dc:	20000304 	.word	0x20000304
 80046e0:	2000030c 	.word	0x2000030c
 80046e4:	43020000 	.word	0x43020000
 80046e8:	20000390 	.word	0x20000390
 80046ec:	20000280 	.word	0x20000280
 80046f0:	20000344 	.word	0x20000344
 80046f4:	2000088c 	.word	0x2000088c
 80046f8:	20000235 	.word	0x20000235
 80046fc:	20000699 	.word	0x20000699
		}
		else if(BATT_State == STATE_CHARGE){
 8004700:	4ba7      	ldr	r3, [pc, #668]	; (80049a0 <TIM2_IRQHandler+0x760>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <TIM2_IRQHandler+0x4cc>
			Batt_Protection_when_charge();
 8004708:	f001 f826 	bl	8005758 <Batt_Protection_when_charge>
		}
		if(BATT_State == STATE_FULL_CHARGE_DISCHARGE){
 800470c:	4ba4      	ldr	r3, [pc, #656]	; (80049a0 <TIM2_IRQHandler+0x760>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b03      	cmp	r3, #3
 8004712:	d101      	bne.n	8004718 <TIM2_IRQHandler+0x4d8>
			Batt_Protection_when_chargedischarge();
 8004714:	f001 fd0c 	bl	8006130 <Batt_Protection_when_chargedischarge>
		}

		//********************* Clearing protection status *****************************////
		// ---> Clearing UnderVoltage
		if(((Clear_Trip_undervoltage==1)||(VBATT>54))&&flag_trip_undervoltage==ON){
 8004718:	4ba2      	ldr	r3, [pc, #648]	; (80049a4 <TIM2_IRQHandler+0x764>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d008      	beq.n	8004732 <TIM2_IRQHandler+0x4f2>
 8004720:	4ba1      	ldr	r3, [pc, #644]	; (80049a8 <TIM2_IRQHandler+0x768>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	49a1      	ldr	r1, [pc, #644]	; (80049ac <TIM2_IRQHandler+0x76c>)
 8004726:	4618      	mov	r0, r3
 8004728:	f7fc fd54 	bl	80011d4 <__aeabi_fcmpgt>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <TIM2_IRQHandler+0x506>
 8004732:	4b9f      	ldr	r3, [pc, #636]	; (80049b0 <TIM2_IRQHandler+0x770>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d105      	bne.n	8004746 <TIM2_IRQHandler+0x506>
			flag_trip_undervoltage=OFF;
 800473a:	4b9d      	ldr	r3, [pc, #628]	; (80049b0 <TIM2_IRQHandler+0x770>)
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]
			Clear_Trip_undervoltage=0;
 8004740:	4b98      	ldr	r3, [pc, #608]	; (80049a4 <TIM2_IRQHandler+0x764>)
 8004742:	2200      	movs	r2, #0
 8004744:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverCurrent Discharge
		if(flag_trip_overcurrentdischarge==ON && Clear_Trip_overcurrentdischarge==1){
 8004746:	4b9b      	ldr	r3, [pc, #620]	; (80049b4 <TIM2_IRQHandler+0x774>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d109      	bne.n	8004762 <TIM2_IRQHandler+0x522>
 800474e:	4b9a      	ldr	r3, [pc, #616]	; (80049b8 <TIM2_IRQHandler+0x778>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d105      	bne.n	8004762 <TIM2_IRQHandler+0x522>
			flag_trip_overcurrentdischarge=OFF;
 8004756:	4b97      	ldr	r3, [pc, #604]	; (80049b4 <TIM2_IRQHandler+0x774>)
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
			Clear_Trip_overcurrentdischarge=0;
 800475c:	4b96      	ldr	r3, [pc, #600]	; (80049b8 <TIM2_IRQHandler+0x778>)
 800475e:	2200      	movs	r2, #0
 8004760:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverTemperature
		if(flag_trip_overtemperature==ON && (Suhu_T1<40)&&(Suhu_T2<50)&&(Suhu_T3<40)&&(Suhu_T4<50)){
 8004762:	4b96      	ldr	r3, [pc, #600]	; (80049bc <TIM2_IRQHandler+0x77c>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d126      	bne.n	80047b8 <TIM2_IRQHandler+0x578>
 800476a:	4b95      	ldr	r3, [pc, #596]	; (80049c0 <TIM2_IRQHandler+0x780>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4995      	ldr	r1, [pc, #596]	; (80049c4 <TIM2_IRQHandler+0x784>)
 8004770:	4618      	mov	r0, r3
 8004772:	f7fc fd11 	bl	8001198 <__aeabi_fcmplt>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01d      	beq.n	80047b8 <TIM2_IRQHandler+0x578>
 800477c:	4b92      	ldr	r3, [pc, #584]	; (80049c8 <TIM2_IRQHandler+0x788>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4992      	ldr	r1, [pc, #584]	; (80049cc <TIM2_IRQHandler+0x78c>)
 8004782:	4618      	mov	r0, r3
 8004784:	f7fc fd08 	bl	8001198 <__aeabi_fcmplt>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d014      	beq.n	80047b8 <TIM2_IRQHandler+0x578>
 800478e:	4b90      	ldr	r3, [pc, #576]	; (80049d0 <TIM2_IRQHandler+0x790>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	498c      	ldr	r1, [pc, #560]	; (80049c4 <TIM2_IRQHandler+0x784>)
 8004794:	4618      	mov	r0, r3
 8004796:	f7fc fcff 	bl	8001198 <__aeabi_fcmplt>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00b      	beq.n	80047b8 <TIM2_IRQHandler+0x578>
 80047a0:	4b8c      	ldr	r3, [pc, #560]	; (80049d4 <TIM2_IRQHandler+0x794>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4989      	ldr	r1, [pc, #548]	; (80049cc <TIM2_IRQHandler+0x78c>)
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fc fcf6 	bl	8001198 <__aeabi_fcmplt>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <TIM2_IRQHandler+0x578>
			flag_trip_overtemperature=OFF;
 80047b2:	4b82      	ldr	r3, [pc, #520]	; (80049bc <TIM2_IRQHandler+0x77c>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing UnderTemperature
		if(flag_trip_undertemperature==ON && (Suhu_T1>20)&&(Suhu_T2>20)&&(Suhu_T3>20)&&(Suhu_T4>20)){
 80047b8:	4b87      	ldr	r3, [pc, #540]	; (80049d8 <TIM2_IRQHandler+0x798>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d126      	bne.n	800480e <TIM2_IRQHandler+0x5ce>
 80047c0:	4b7f      	ldr	r3, [pc, #508]	; (80049c0 <TIM2_IRQHandler+0x780>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4985      	ldr	r1, [pc, #532]	; (80049dc <TIM2_IRQHandler+0x79c>)
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fc fd04 	bl	80011d4 <__aeabi_fcmpgt>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d01d      	beq.n	800480e <TIM2_IRQHandler+0x5ce>
 80047d2:	4b7d      	ldr	r3, [pc, #500]	; (80049c8 <TIM2_IRQHandler+0x788>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4981      	ldr	r1, [pc, #516]	; (80049dc <TIM2_IRQHandler+0x79c>)
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fc fcfb 	bl	80011d4 <__aeabi_fcmpgt>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d014      	beq.n	800480e <TIM2_IRQHandler+0x5ce>
 80047e4:	4b7a      	ldr	r3, [pc, #488]	; (80049d0 <TIM2_IRQHandler+0x790>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	497c      	ldr	r1, [pc, #496]	; (80049dc <TIM2_IRQHandler+0x79c>)
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fc fcf2 	bl	80011d4 <__aeabi_fcmpgt>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <TIM2_IRQHandler+0x5ce>
 80047f6:	4b77      	ldr	r3, [pc, #476]	; (80049d4 <TIM2_IRQHandler+0x794>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4978      	ldr	r1, [pc, #480]	; (80049dc <TIM2_IRQHandler+0x79c>)
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fc fce9 	bl	80011d4 <__aeabi_fcmpgt>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <TIM2_IRQHandler+0x5ce>
			flag_trip_undertemperature=OFF;
 8004808:	4b73      	ldr	r3, [pc, #460]	; (80049d8 <TIM2_IRQHandler+0x798>)
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverDischarge
		if(flag_trip_SOCOverDischarge==ON && Pack_SOC>20){
 800480e:	4b74      	ldr	r3, [pc, #464]	; (80049e0 <TIM2_IRQHandler+0x7a0>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d10b      	bne.n	800482e <TIM2_IRQHandler+0x5ee>
 8004816:	4b73      	ldr	r3, [pc, #460]	; (80049e4 <TIM2_IRQHandler+0x7a4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4970      	ldr	r1, [pc, #448]	; (80049dc <TIM2_IRQHandler+0x79c>)
 800481c:	4618      	mov	r0, r3
 800481e:	f7fc fcd9 	bl	80011d4 <__aeabi_fcmpgt>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <TIM2_IRQHandler+0x5ee>
			flag_trip_SOCOverDischarge=OFF;
 8004828:	4b6d      	ldr	r3, [pc, #436]	; (80049e0 <TIM2_IRQHandler+0x7a0>)
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverCharge
		if(flag_trip_SOCOverCharge==ON && Pack_SOC<70){
 800482e:	4b6e      	ldr	r3, [pc, #440]	; (80049e8 <TIM2_IRQHandler+0x7a8>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d10b      	bne.n	800484e <TIM2_IRQHandler+0x60e>
 8004836:	4b6b      	ldr	r3, [pc, #428]	; (80049e4 <TIM2_IRQHandler+0x7a4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	496c      	ldr	r1, [pc, #432]	; (80049ec <TIM2_IRQHandler+0x7ac>)
 800483c:	4618      	mov	r0, r3
 800483e:	f7fc fcab 	bl	8001198 <__aeabi_fcmplt>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <TIM2_IRQHandler+0x60e>
			flag_trip_SOCOverCharge=OFF;
 8004848:	4b67      	ldr	r3, [pc, #412]	; (80049e8 <TIM2_IRQHandler+0x7a8>)
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
		}
	}

	i++;
 800484e:	4b68      	ldr	r3, [pc, #416]	; (80049f0 <TIM2_IRQHandler+0x7b0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3301      	adds	r3, #1
 8004854:	4a66      	ldr	r2, [pc, #408]	; (80049f0 <TIM2_IRQHandler+0x7b0>)
 8004856:	6013      	str	r3, [r2, #0]
	i=i%maxdata;
 8004858:	4b65      	ldr	r3, [pc, #404]	; (80049f0 <TIM2_IRQHandler+0x7b0>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4b65      	ldr	r3, [pc, #404]	; (80049f4 <TIM2_IRQHandler+0x7b4>)
 800485e:	fb83 1302 	smull	r1, r3, r3, r2
 8004862:	1199      	asrs	r1, r3, #6
 8004864:	17d3      	asrs	r3, r2, #31
 8004866:	1acb      	subs	r3, r1, r3
 8004868:	21c8      	movs	r1, #200	; 0xc8
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	4a5f      	ldr	r2, [pc, #380]	; (80049f0 <TIM2_IRQHandler+0x7b0>)
 8004872:	6013      	str	r3, [r2, #0]

	//////////// Bagian Hitung SOC /////// SOC akan dihitung berdasarkan state baterai (Jika charge maupun discharge)
	if(BATT_State==STATE_CHARGE||BATT_State==STATE_DISCHARGE||BATT_State==STATE_FULL_CHARGE_DISCHARGE)
 8004874:	4b4a      	ldr	r3, [pc, #296]	; (80049a0 <TIM2_IRQHandler+0x760>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d008      	beq.n	800488e <TIM2_IRQHandler+0x64e>
 800487c:	4b48      	ldr	r3, [pc, #288]	; (80049a0 <TIM2_IRQHandler+0x760>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b02      	cmp	r3, #2
 8004882:	d004      	beq.n	800488e <TIM2_IRQHandler+0x64e>
 8004884:	4b46      	ldr	r3, [pc, #280]	; (80049a0 <TIM2_IRQHandler+0x760>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b03      	cmp	r3, #3
 800488a:	f040 80e0 	bne.w	8004a4e <TIM2_IRQHandler+0x80e>
	{
		time_soc++;
 800488e:	4b5a      	ldr	r3, [pc, #360]	; (80049f8 <TIM2_IRQHandler+0x7b8>)
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	3301      	adds	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	4b58      	ldr	r3, [pc, #352]	; (80049f8 <TIM2_IRQHandler+0x7b8>)
 8004898:	801a      	strh	r2, [r3, #0]
		sum_current+=IBATT;
 800489a:	4b58      	ldr	r3, [pc, #352]	; (80049fc <TIM2_IRQHandler+0x7bc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a58      	ldr	r2, [pc, #352]	; (8004a00 <TIM2_IRQHandler+0x7c0>)
 80048a0:	6812      	ldr	r2, [r2, #0]
 80048a2:	4611      	mov	r1, r2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fc f9d1 	bl	8000c4c <__addsf3>
 80048aa:	4603      	mov	r3, r0
 80048ac:	461a      	mov	r2, r3
 80048ae:	4b53      	ldr	r3, [pc, #332]	; (80049fc <TIM2_IRQHandler+0x7bc>)
 80048b0:	601a      	str	r2, [r3, #0]
		if(time_soc>99)
 80048b2:	4b51      	ldr	r3, [pc, #324]	; (80049f8 <TIM2_IRQHandler+0x7b8>)
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	2b63      	cmp	r3, #99	; 0x63
 80048b8:	f240 80c9 	bls.w	8004a4e <TIM2_IRQHandler+0x80e>
		{
			AH_Consumption = (-1*sum_current/100*(1.0/3600.0))/Pack_Cap*100-(4e-5); //Konsumsi System 4e-5
 80048bc:	4b4f      	ldr	r3, [pc, #316]	; (80049fc <TIM2_IRQHandler+0x7bc>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80048c4:	494f      	ldr	r1, [pc, #316]	; (8004a04 <TIM2_IRQHandler+0x7c4>)
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fc fb7c 	bl	8000fc4 <__aeabi_fdiv>
 80048cc:	4603      	mov	r3, r0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fb fe16 	bl	8000500 <__aeabi_f2d>
 80048d4:	a32e      	add	r3, pc, #184	; (adr r3, 8004990 <TIM2_IRQHandler+0x750>)
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	f7fb fe69 	bl	80005b0 <__aeabi_dmul>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4614      	mov	r4, r2
 80048e4:	461d      	mov	r5, r3
 80048e6:	4b31      	ldr	r3, [pc, #196]	; (80049ac <TIM2_IRQHandler+0x76c>)
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fb fe09 	bl	8000500 <__aeabi_f2d>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4620      	mov	r0, r4
 80048f4:	4629      	mov	r1, r5
 80048f6:	f7fb ff85 	bl	8000804 <__aeabi_ddiv>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4610      	mov	r0, r2
 8004900:	4619      	mov	r1, r3
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	4b40      	ldr	r3, [pc, #256]	; (8004a08 <TIM2_IRQHandler+0x7c8>)
 8004908:	f7fb fe52 	bl	80005b0 <__aeabi_dmul>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4610      	mov	r0, r2
 8004912:	4619      	mov	r1, r3
 8004914:	a320      	add	r3, pc, #128	; (adr r3, 8004998 <TIM2_IRQHandler+0x758>)
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f7fb fc91 	bl	8000240 <__aeabi_dsub>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4610      	mov	r0, r2
 8004924:	4619      	mov	r1, r3
 8004926:	f7fc f93b 	bl	8000ba0 <__aeabi_d2f>
 800492a:	4603      	mov	r3, r0
 800492c:	4a37      	ldr	r2, [pc, #220]	; (8004a0c <TIM2_IRQHandler+0x7cc>)
 800492e:	6013      	str	r3, [r2, #0]
			Pack_SOC=Pack_SOC+AH_Consumption;
 8004930:	4b2c      	ldr	r3, [pc, #176]	; (80049e4 <TIM2_IRQHandler+0x7a4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a35      	ldr	r2, [pc, #212]	; (8004a0c <TIM2_IRQHandler+0x7cc>)
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	4611      	mov	r1, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f7fc f986 	bl	8000c4c <__addsf3>
 8004940:	4603      	mov	r3, r0
 8004942:	461a      	mov	r2, r3
 8004944:	4b27      	ldr	r3, [pc, #156]	; (80049e4 <TIM2_IRQHandler+0x7a4>)
 8004946:	601a      	str	r2, [r3, #0]
			time_soc=0;
 8004948:	4b2b      	ldr	r3, [pc, #172]	; (80049f8 <TIM2_IRQHandler+0x7b8>)
 800494a:	2200      	movs	r2, #0
 800494c:	801a      	strh	r2, [r3, #0]
			sum_current=0;
 800494e:	4b2b      	ldr	r3, [pc, #172]	; (80049fc <TIM2_IRQHandler+0x7bc>)
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	601a      	str	r2, [r3, #0]

			grad=(100-0)/(batas_atas-batas_bawah);
 8004956:	4b2e      	ldr	r3, [pc, #184]	; (8004a10 <TIM2_IRQHandler+0x7d0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a2e      	ldr	r2, [pc, #184]	; (8004a14 <TIM2_IRQHandler+0x7d4>)
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f7fc f971 	bl	8000c48 <__aeabi_fsub>
 8004966:	4603      	mov	r3, r0
 8004968:	4619      	mov	r1, r3
 800496a:	4826      	ldr	r0, [pc, #152]	; (8004a04 <TIM2_IRQHandler+0x7c4>)
 800496c:	f7fc fb2a 	bl	8000fc4 <__aeabi_fdiv>
 8004970:	4603      	mov	r3, r0
 8004972:	461a      	mov	r2, r3
 8004974:	4b28      	ldr	r3, [pc, #160]	; (8004a18 <TIM2_IRQHandler+0x7d8>)
 8004976:	601a      	str	r2, [r3, #0]
			constanta=grad*batas_bawah*(-1);
 8004978:	4b27      	ldr	r3, [pc, #156]	; (8004a18 <TIM2_IRQHandler+0x7d8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a25      	ldr	r2, [pc, #148]	; (8004a14 <TIM2_IRQHandler+0x7d4>)
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	4611      	mov	r1, r2
 8004982:	4618      	mov	r0, r3
 8004984:	f7fc fa6a 	bl	8000e5c <__aeabi_fmul>
 8004988:	e048      	b.n	8004a1c <TIM2_IRQHandler+0x7dc>
 800498a:	bf00      	nop
 800498c:	f3af 8000 	nop.w
 8004990:	789abcdf 	.word	0x789abcdf
 8004994:	3f323456 	.word	0x3f323456
 8004998:	88e368f1 	.word	0x88e368f1
 800499c:	3f04f8b5 	.word	0x3f04f8b5
 80049a0:	20000699 	.word	0x20000699
 80049a4:	2000035c 	.word	0x2000035c
 80049a8:	2000027c 	.word	0x2000027c
 80049ac:	42580000 	.word	0x42580000
 80049b0:	20000301 	.word	0x20000301
 80049b4:	20000314 	.word	0x20000314
 80049b8:	2000028c 	.word	0x2000028c
 80049bc:	20000278 	.word	0x20000278
 80049c0:	2000030c 	.word	0x2000030c
 80049c4:	42200000 	.word	0x42200000
 80049c8:	20000390 	.word	0x20000390
 80049cc:	42480000 	.word	0x42480000
 80049d0:	20000280 	.word	0x20000280
 80049d4:	20000344 	.word	0x20000344
 80049d8:	20000300 	.word	0x20000300
 80049dc:	41a00000 	.word	0x41a00000
 80049e0:	20000338 	.word	0x20000338
 80049e4:	20000388 	.word	0x20000388
 80049e8:	2000025a 	.word	0x2000025a
 80049ec:	428c0000 	.word	0x428c0000
 80049f0:	20000878 	.word	0x20000878
 80049f4:	51eb851f 	.word	0x51eb851f
 80049f8:	20000876 	.word	0x20000876
 80049fc:	20000890 	.word	0x20000890
 8004a00:	200002f8 	.word	0x200002f8
 8004a04:	42c80000 	.word	0x42c80000
 8004a08:	40590000 	.word	0x40590000
 8004a0c:	20000260 	.word	0x20000260
 8004a10:	2000024c 	.word	0x2000024c
 8004a14:	20000310 	.word	0x20000310
 8004a18:	2000031c 	.word	0x2000031c
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004a22:	4a0c      	ldr	r2, [pc, #48]	; (8004a54 <TIM2_IRQHandler+0x814>)
 8004a24:	6013      	str	r3, [r2, #0]
			SOC_manipulasi=grad*Pack_SOC+constanta;
 8004a26:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <TIM2_IRQHandler+0x818>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a0c      	ldr	r2, [pc, #48]	; (8004a5c <TIM2_IRQHandler+0x81c>)
 8004a2c:	6812      	ldr	r2, [r2, #0]
 8004a2e:	4611      	mov	r1, r2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fc fa13 	bl	8000e5c <__aeabi_fmul>
 8004a36:	4603      	mov	r3, r0
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <TIM2_IRQHandler+0x814>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4610      	mov	r0, r2
 8004a42:	f7fc f903 	bl	8000c4c <__addsf3>
 8004a46:	4603      	mov	r3, r0
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <TIM2_IRQHandler+0x820>)
 8004a4c:	601a      	str	r2, [r3, #0]
		}
	}
	/* USER CODE END TIM2_IRQn 1 */
}
 8004a4e:	bf00      	nop
 8004a50:	bdb0      	pop	{r4, r5, r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000288 	.word	0x20000288
 8004a58:	2000031c 	.word	0x2000031c
 8004a5c:	20000388 	.word	0x20000388
 8004a60:	2000032c 	.word	0x2000032c

08004a64 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a68:	481a      	ldr	r0, [pc, #104]	; (8004ad4 <TIM3_IRQHandler+0x70>)
 8004a6a:	f006 fbbf 	bl	800b1ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(flag_start_shutdown==1){
 8004a6e:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <TIM3_IRQHandler+0x74>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d12b      	bne.n	8004ace <TIM3_IRQHandler+0x6a>
		if(Tick_33ms == 1) CANTX_BattParameter();
 8004a76:	4b19      	ldr	r3, [pc, #100]	; (8004adc <TIM3_IRQHandler+0x78>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d102      	bne.n	8004a84 <TIM3_IRQHandler+0x20>
 8004a7e:	f7fe fa53 	bl	8002f28 <CANTX_BattParameter>
 8004a82:	e00f      	b.n	8004aa4 <TIM3_IRQHandler+0x40>
		else if(Tick_33ms == 2) CANTX_BattProtection();
 8004a84:	4b15      	ldr	r3, [pc, #84]	; (8004adc <TIM3_IRQHandler+0x78>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d102      	bne.n	8004a92 <TIM3_IRQHandler+0x2e>
 8004a8c:	f7fe fb96 	bl	80031bc <CANTX_BattProtection>
 8004a90:	e008      	b.n	8004aa4 <TIM3_IRQHandler+0x40>
		else if(Tick_33ms == 3) {
 8004a92:	4b12      	ldr	r3, [pc, #72]	; (8004adc <TIM3_IRQHandler+0x78>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b03      	cmp	r3, #3
 8004a98:	d104      	bne.n	8004aa4 <TIM3_IRQHandler+0x40>
			CANTX_ReportToCharger();
 8004a9a:	f7fe fcd5 	bl	8003448 <CANTX_ReportToCharger>
			Tick_33ms = 0;
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <TIM3_IRQHandler+0x78>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	701a      	strb	r2, [r3, #0]
		}
		if(Tick_BattId > 30) {
 8004aa4:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <TIM3_IRQHandler+0x7c>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b1e      	cmp	r3, #30
 8004aaa:	d904      	bls.n	8004ab6 <TIM3_IRQHandler+0x52>
			CANTX_BattId();
 8004aac:	f7fe fd44 	bl	8003538 <CANTX_BattId>
			Tick_BattId = 0;
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <TIM3_IRQHandler+0x7c>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
		}
		Tick_33ms++;
 8004ab6:	4b09      	ldr	r3, [pc, #36]	; (8004adc <TIM3_IRQHandler+0x78>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	3301      	adds	r3, #1
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	4b07      	ldr	r3, [pc, #28]	; (8004adc <TIM3_IRQHandler+0x78>)
 8004ac0:	701a      	strb	r2, [r3, #0]
		Tick_BattId++;
 8004ac2:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <TIM3_IRQHandler+0x7c>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <TIM3_IRQHandler+0x7c>)
 8004acc:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000894 	.word	0x20000894
 8004ad8:	20000279 	.word	0x20000279
 8004adc:	20000881 	.word	0x20000881
 8004ae0:	20000880 	.word	0x20000880
 8004ae4:	00000000 	.word	0x00000000

08004ae8 <Batt_Protection_when_discharge>:

/* USER CODE BEGIN 1 */
void Batt_Protection_when_discharge(void) {
 8004ae8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004aec:	af00      	add	r7, sp, #0
	//***************** Short Circuit Protection ***********************************//
	if(IBATT > (VBATT/0.5)) {
 8004aee:	4baa      	ldr	r3, [pc, #680]	; (8004d98 <Batt_Protection_when_discharge+0x2b0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fb fd04 	bl	8000500 <__aeabi_f2d>
 8004af8:	4604      	mov	r4, r0
 8004afa:	460d      	mov	r5, r1
 8004afc:	4ba7      	ldr	r3, [pc, #668]	; (8004d9c <Batt_Protection_when_discharge+0x2b4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fb fcfd 	bl	8000500 <__aeabi_f2d>
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	4ba5      	ldr	r3, [pc, #660]	; (8004da0 <Batt_Protection_when_discharge+0x2b8>)
 8004b0c:	f7fb fe7a 	bl	8000804 <__aeabi_ddiv>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4620      	mov	r0, r4
 8004b16:	4629      	mov	r1, r5
 8004b18:	f7fb ffda 	bl	8000ad0 <__aeabi_dcmpgt>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d017      	beq.n	8004b52 <Batt_Protection_when_discharge+0x6a>
		Isc = IBATT;
 8004b22:	4b9d      	ldr	r3, [pc, #628]	; (8004d98 <Batt_Protection_when_discharge+0x2b0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a9f      	ldr	r2, [pc, #636]	; (8004da4 <Batt_Protection_when_discharge+0x2bc>)
 8004b28:	6013      	str	r3, [r2, #0]
		Vsc = VBATT;
 8004b2a:	4b9c      	ldr	r3, [pc, #624]	; (8004d9c <Batt_Protection_when_discharge+0x2b4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a9e      	ldr	r2, [pc, #632]	; (8004da8 <Batt_Protection_when_discharge+0x2c0>)
 8004b30:	6013      	str	r3, [r2, #0]
		fault_code = 12;
 8004b32:	4b9e      	ldr	r3, [pc, #632]	; (8004dac <Batt_Protection_when_discharge+0x2c4>)
 8004b34:	220c      	movs	r2, #12
 8004b36:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8004b38:	f7fc fd00 	bl	800153c <Batt_Open_Mode>
		flag_trip_shortcircuit = ON;
 8004b3c:	4b9c      	ldr	r3, [pc, #624]	; (8004db0 <Batt_Protection_when_discharge+0x2c8>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004b42:	2200      	movs	r2, #0
 8004b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b48:	489a      	ldr	r0, [pc, #616]	; (8004db4 <Batt_Protection_when_discharge+0x2cc>)
 8004b4a:	f004 fc24 	bl	8009396 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle<0)
			T_I_Over_trip_cycle=0;
	}
}
 8004b4e:	f000 bded 	b.w	800572c <Batt_Protection_when_discharge+0xc44>
	else if(VBATT<V_Under_Set && flag_trip_undervoltage==OFF ) {   //Indikasi terjadi Undervoltage
 8004b52:	4b92      	ldr	r3, [pc, #584]	; (8004d9c <Batt_Protection_when_discharge+0x2b4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a98      	ldr	r2, [pc, #608]	; (8004db8 <Batt_Protection_when_discharge+0x2d0>)
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fc fb1b 	bl	8001198 <__aeabi_fcmplt>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d054      	beq.n	8004c12 <Batt_Protection_when_discharge+0x12a>
 8004b68:	4b94      	ldr	r3, [pc, #592]	; (8004dbc <Batt_Protection_when_discharge+0x2d4>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d150      	bne.n	8004c12 <Batt_Protection_when_discharge+0x12a>
		fault_code=1;
 8004b70:	4b8e      	ldr	r3, [pc, #568]	; (8004dac <Batt_Protection_when_discharge+0x2c4>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	701a      	strb	r2, [r3, #0]
		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 8004b76:	4b92      	ldr	r3, [pc, #584]	; (8004dc0 <Batt_Protection_when_discharge+0x2d8>)
 8004b78:	681c      	ldr	r4, [r3, #0]
 8004b7a:	4b88      	ldr	r3, [pc, #544]	; (8004d9c <Batt_Protection_when_discharge+0x2b4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a8e      	ldr	r2, [pc, #568]	; (8004db8 <Batt_Protection_when_discharge+0x2d0>)
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	4611      	mov	r1, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fc fa1d 	bl	8000fc4 <__aeabi_fdiv>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004b92:	f7fc f859 	bl	8000c48 <__aeabi_fsub>
 8004b96:	4603      	mov	r3, r0
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f7fc fa12 	bl	8000fc4 <__aeabi_fdiv>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	4b87      	ldr	r3, [pc, #540]	; (8004dc4 <Batt_Protection_when_discharge+0x2dc>)
 8004ba6:	601a      	str	r2, [r3, #0]
		T_trip_cycle+=0.001;
 8004ba8:	4b87      	ldr	r3, [pc, #540]	; (8004dc8 <Batt_Protection_when_discharge+0x2e0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fb fca7 	bl	8000500 <__aeabi_f2d>
 8004bb2:	a373      	add	r3, pc, #460	; (adr r3, 8004d80 <Batt_Protection_when_discharge+0x298>)
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f7fb fb44 	bl	8000244 <__adddf3>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	f7fb ffec 	bl	8000ba0 <__aeabi_d2f>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4a7f      	ldr	r2, [pc, #508]	; (8004dc8 <Batt_Protection_when_discharge+0x2e0>)
 8004bcc:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8004bce:	4b7e      	ldr	r3, [pc, #504]	; (8004dc8 <Batt_Protection_when_discharge+0x2e0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a7c      	ldr	r2, [pc, #496]	; (8004dc4 <Batt_Protection_when_discharge+0x2dc>)
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fc fafb 	bl	80011d4 <__aeabi_fcmpgt>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 85a0 	beq.w	8005726 <Batt_Protection_when_discharge+0xc3e>
 8004be6:	4b75      	ldr	r3, [pc, #468]	; (8004dbc <Batt_Protection_when_discharge+0x2d4>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f040 859b 	bne.w	8005726 <Batt_Protection_when_discharge+0xc3e>
			Batt_Open_Mode();
 8004bf0:	f7fc fca4 	bl	800153c <Batt_Open_Mode>
			T_trip_cycle=T_Under_trip;
 8004bf4:	4b73      	ldr	r3, [pc, #460]	; (8004dc4 <Batt_Protection_when_discharge+0x2dc>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a73      	ldr	r2, [pc, #460]	; (8004dc8 <Batt_Protection_when_discharge+0x2e0>)
 8004bfa:	6013      	str	r3, [r2, #0]
			flag_trip_undervoltage=ON;
 8004bfc:	4b6f      	ldr	r3, [pc, #444]	; (8004dbc <Batt_Protection_when_discharge+0x2d4>)
 8004bfe:	2201      	movs	r2, #1
 8004c00:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 8004c02:	2200      	movs	r2, #0
 8004c04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c08:	4870      	ldr	r0, [pc, #448]	; (8004dcc <Batt_Protection_when_discharge+0x2e4>)
 8004c0a:	f004 fbc4 	bl	8009396 <HAL_GPIO_WritePin>
		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8004c0e:	f000 bd8a 	b.w	8005726 <Batt_Protection_when_discharge+0xc3e>
	else if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF) {   //Indikasi terjadi Over Current
 8004c12:	4b61      	ldr	r3, [pc, #388]	; (8004d98 <Batt_Protection_when_discharge+0x2b0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a6e      	ldr	r2, [pc, #440]	; (8004dd0 <Batt_Protection_when_discharge+0x2e8>)
 8004c18:	6812      	ldr	r2, [r2, #0]
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fc f813 	bl	8000c48 <__aeabi_fsub>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f04f 0100 	mov.w	r1, #0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fc fad3 	bl	80011d4 <__aeabi_fcmpgt>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 814b 	beq.w	8004ecc <Batt_Protection_when_discharge+0x3e4>
 8004c36:	4b67      	ldr	r3, [pc, #412]	; (8004dd4 <Batt_Protection_when_discharge+0x2ec>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f040 8146 	bne.w	8004ecc <Batt_Protection_when_discharge+0x3e4>
		fault_code=2;
 8004c40:	4b5a      	ldr	r3, [pc, #360]	; (8004dac <Batt_Protection_when_discharge+0x2c4>)
 8004c42:	2202      	movs	r2, #2
 8004c44:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=I_Over_Set/(((IBATT/6.9)*(IBATT/6.9))-1);
 8004c46:	4b62      	ldr	r3, [pc, #392]	; (8004dd0 <Batt_Protection_when_discharge+0x2e8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fb fc58 	bl	8000500 <__aeabi_f2d>
 8004c50:	4604      	mov	r4, r0
 8004c52:	460d      	mov	r5, r1
 8004c54:	4b50      	ldr	r3, [pc, #320]	; (8004d98 <Batt_Protection_when_discharge+0x2b0>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fb fc51 	bl	8000500 <__aeabi_f2d>
 8004c5e:	a34a      	add	r3, pc, #296	; (adr r3, 8004d88 <Batt_Protection_when_discharge+0x2a0>)
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f7fb fdce 	bl	8000804 <__aeabi_ddiv>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4690      	mov	r8, r2
 8004c6e:	4699      	mov	r9, r3
 8004c70:	4b49      	ldr	r3, [pc, #292]	; (8004d98 <Batt_Protection_when_discharge+0x2b0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fb fc43 	bl	8000500 <__aeabi_f2d>
 8004c7a:	a343      	add	r3, pc, #268	; (adr r3, 8004d88 <Batt_Protection_when_discharge+0x2a0>)
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	f7fb fdc0 	bl	8000804 <__aeabi_ddiv>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4640      	mov	r0, r8
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	f7fb fc90 	bl	80005b0 <__aeabi_dmul>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4610      	mov	r0, r2
 8004c96:	4619      	mov	r1, r3
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	4b4e      	ldr	r3, [pc, #312]	; (8004dd8 <Batt_Protection_when_discharge+0x2f0>)
 8004c9e:	f7fb facf 	bl	8000240 <__aeabi_dsub>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	4629      	mov	r1, r5
 8004caa:	f7fb fdab 	bl	8000804 <__aeabi_ddiv>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f7fb ff73 	bl	8000ba0 <__aeabi_d2f>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4a47      	ldr	r2, [pc, #284]	; (8004ddc <Batt_Protection_when_discharge+0x2f4>)
 8004cbe:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle+=0.01;
 8004cc0:	4b47      	ldr	r3, [pc, #284]	; (8004de0 <Batt_Protection_when_discharge+0x2f8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fb fc1b 	bl	8000500 <__aeabi_f2d>
 8004cca:	a331      	add	r3, pc, #196	; (adr r3, 8004d90 <Batt_Protection_when_discharge+0x2a8>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb fab8 	bl	8000244 <__adddf3>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4619      	mov	r1, r3
 8004cdc:	f7fb ff60 	bl	8000ba0 <__aeabi_d2f>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4a3f      	ldr	r2, [pc, #252]	; (8004de0 <Batt_Protection_when_discharge+0x2f8>)
 8004ce4:	6013      	str	r3, [r2, #0]
		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF) {
 8004ce6:	4b3e      	ldr	r3, [pc, #248]	; (8004de0 <Batt_Protection_when_discharge+0x2f8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a3c      	ldr	r2, [pc, #240]	; (8004ddc <Batt_Protection_when_discharge+0x2f4>)
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fc fa6f 	bl	80011d4 <__aeabi_fcmpgt>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d012      	beq.n	8004d22 <Batt_Protection_when_discharge+0x23a>
 8004cfc:	4b35      	ldr	r3, [pc, #212]	; (8004dd4 <Batt_Protection_when_discharge+0x2ec>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10e      	bne.n	8004d22 <Batt_Protection_when_discharge+0x23a>
			Batt_Open_Mode();
 8004d04:	f7fc fc1a 	bl	800153c <Batt_Open_Mode>
			T_I_Over_trip_cycle=T_I_Over_trip;
 8004d08:	4b34      	ldr	r3, [pc, #208]	; (8004ddc <Batt_Protection_when_discharge+0x2f4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a34      	ldr	r2, [pc, #208]	; (8004de0 <Batt_Protection_when_discharge+0x2f8>)
 8004d0e:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentdischarge=ON;
 8004d10:	4b30      	ldr	r3, [pc, #192]	; (8004dd4 <Batt_Protection_when_discharge+0x2ec>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004d16:	2200      	movs	r2, #0
 8004d18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d1c:	4825      	ldr	r0, [pc, #148]	; (8004db4 <Batt_Protection_when_discharge+0x2cc>)
 8004d1e:	f004 fb3a 	bl	8009396 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 8004d22:	4b2c      	ldr	r3, [pc, #176]	; (8004dd4 <Batt_Protection_when_discharge+0x2ec>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f040 84ff 	bne.w	800572a <Batt_Protection_when_discharge+0xc42>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 8004d2c:	4b2b      	ldr	r3, [pc, #172]	; (8004ddc <Batt_Protection_when_discharge+0x2f4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a2b      	ldr	r2, [pc, #172]	; (8004de0 <Batt_Protection_when_discharge+0x2f8>)
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	4611      	mov	r1, r2
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fb ff86 	bl	8000c48 <__aeabi_fsub>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4929      	ldr	r1, [pc, #164]	; (8004de4 <Batt_Protection_when_discharge+0x2fc>)
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fc fa47 	bl	80011d4 <__aeabi_fcmpgt>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d051      	beq.n	8004df0 <Batt_Protection_when_discharge+0x308>
				if((test_tim2%1000)==0) {
 8004d4c:	4b26      	ldr	r3, [pc, #152]	; (8004de8 <Batt_Protection_when_discharge+0x300>)
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	4b26      	ldr	r3, [pc, #152]	; (8004dec <Batt_Protection_when_discharge+0x304>)
 8004d52:	fb83 1302 	smull	r1, r3, r3, r2
 8004d56:	1199      	asrs	r1, r3, #6
 8004d58:	17d3      	asrs	r3, r2, #31
 8004d5a:	1acb      	subs	r3, r1, r3
 8004d5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d60:	fb01 f303 	mul.w	r3, r1, r3
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f040 84df 	bne.w	800572a <Batt_Protection_when_discharge+0xc42>
					BUZZ_Toggle;
 8004d6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d70:	4810      	ldr	r0, [pc, #64]	; (8004db4 <Batt_Protection_when_discharge+0x2cc>)
 8004d72:	f004 fb28 	bl	80093c6 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8004d76:	4b1c      	ldr	r3, [pc, #112]	; (8004de8 <Batt_Protection_when_discharge+0x300>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 8004d7c:	f000 bcd5 	b.w	800572a <Batt_Protection_when_discharge+0xc42>
 8004d80:	d2f1a9fc 	.word	0xd2f1a9fc
 8004d84:	3f50624d 	.word	0x3f50624d
 8004d88:	9999999a 	.word	0x9999999a
 8004d8c:	401b9999 	.word	0x401b9999
 8004d90:	47ae147b 	.word	0x47ae147b
 8004d94:	3f847ae1 	.word	0x3f847ae1
 8004d98:	200002f8 	.word	0x200002f8
 8004d9c:	2000027c 	.word	0x2000027c
 8004da0:	3fe00000 	.word	0x3fe00000
 8004da4:	200002d8 	.word	0x200002d8
 8004da8:	20000324 	.word	0x20000324
 8004dac:	2000030a 	.word	0x2000030a
 8004db0:	2000025c 	.word	0x2000025c
 8004db4:	40011000 	.word	0x40011000
 8004db8:	20000024 	.word	0x20000024
 8004dbc:	20000301 	.word	0x20000301
 8004dc0:	20000030 	.word	0x20000030
 8004dc4:	20000870 	.word	0x20000870
 8004dc8:	2000087c 	.word	0x2000087c
 8004dcc:	40010800 	.word	0x40010800
 8004dd0:	2000000c 	.word	0x2000000c
 8004dd4:	20000314 	.word	0x20000314
 8004dd8:	3ff00000 	.word	0x3ff00000
 8004ddc:	20000268 	.word	0x20000268
 8004de0:	2000034c 	.word	0x2000034c
 8004de4:	41700000 	.word	0x41700000
 8004de8:	20000378 	.word	0x20000378
 8004dec:	10624dd3 	.word	0x10624dd3
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10){
 8004df0:	4ba8      	ldr	r3, [pc, #672]	; (8005094 <Batt_Protection_when_discharge+0x5ac>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4aa8      	ldr	r2, [pc, #672]	; (8005098 <Batt_Protection_when_discharge+0x5b0>)
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fb ff24 	bl	8000c48 <__aeabi_fsub>
 8004e00:	4603      	mov	r3, r0
 8004e02:	49a6      	ldr	r1, [pc, #664]	; (800509c <Batt_Protection_when_discharge+0x5b4>)
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fc f9e5 	bl	80011d4 <__aeabi_fcmpgt>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d018      	beq.n	8004e42 <Batt_Protection_when_discharge+0x35a>
				if((test_tim2%100)==0){
 8004e10:	4ba3      	ldr	r3, [pc, #652]	; (80050a0 <Batt_Protection_when_discharge+0x5b8>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4ba3      	ldr	r3, [pc, #652]	; (80050a4 <Batt_Protection_when_discharge+0x5bc>)
 8004e16:	fb83 1302 	smull	r1, r3, r3, r2
 8004e1a:	1159      	asrs	r1, r3, #5
 8004e1c:	17d3      	asrs	r3, r2, #31
 8004e1e:	1acb      	subs	r3, r1, r3
 8004e20:	2164      	movs	r1, #100	; 0x64
 8004e22:	fb01 f303 	mul.w	r3, r1, r3
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f040 847e 	bne.w	800572a <Batt_Protection_when_discharge+0xc42>
					BUZZ_Toggle;
 8004e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e32:	489d      	ldr	r0, [pc, #628]	; (80050a8 <Batt_Protection_when_discharge+0x5c0>)
 8004e34:	f004 fac7 	bl	80093c6 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8004e38:	4b99      	ldr	r3, [pc, #612]	; (80050a0 <Batt_Protection_when_discharge+0x5b8>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 8004e3e:	f000 bc74 	b.w	800572a <Batt_Protection_when_discharge+0xc42>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>3){
 8004e42:	4b94      	ldr	r3, [pc, #592]	; (8005094 <Batt_Protection_when_discharge+0x5ac>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a94      	ldr	r2, [pc, #592]	; (8005098 <Batt_Protection_when_discharge+0x5b0>)
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fb fefb 	bl	8000c48 <__aeabi_fsub>
 8004e52:	4603      	mov	r3, r0
 8004e54:	4995      	ldr	r1, [pc, #596]	; (80050ac <Batt_Protection_when_discharge+0x5c4>)
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fc f9bc 	bl	80011d4 <__aeabi_fcmpgt>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d019      	beq.n	8004e96 <Batt_Protection_when_discharge+0x3ae>
				if((test_tim2%10)==0){
 8004e62:	4b8f      	ldr	r3, [pc, #572]	; (80050a0 <Batt_Protection_when_discharge+0x5b8>)
 8004e64:	6819      	ldr	r1, [r3, #0]
 8004e66:	4b92      	ldr	r3, [pc, #584]	; (80050b0 <Batt_Protection_when_discharge+0x5c8>)
 8004e68:	fb83 2301 	smull	r2, r3, r3, r1
 8004e6c:	109a      	asrs	r2, r3, #2
 8004e6e:	17cb      	asrs	r3, r1, #31
 8004e70:	1ad2      	subs	r2, r2, r3
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	1aca      	subs	r2, r1, r3
 8004e7c:	2a00      	cmp	r2, #0
 8004e7e:	f040 8454 	bne.w	800572a <Batt_Protection_when_discharge+0xc42>
					BUZZ_Toggle;
 8004e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e86:	4888      	ldr	r0, [pc, #544]	; (80050a8 <Batt_Protection_when_discharge+0x5c0>)
 8004e88:	f004 fa9d 	bl	80093c6 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8004e8c:	4b84      	ldr	r3, [pc, #528]	; (80050a0 <Batt_Protection_when_discharge+0x5b8>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 8004e92:	f000 bc4a 	b.w	800572a <Batt_Protection_when_discharge+0xc42>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1){
 8004e96:	4b7f      	ldr	r3, [pc, #508]	; (8005094 <Batt_Protection_when_discharge+0x5ac>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a7f      	ldr	r2, [pc, #508]	; (8005098 <Batt_Protection_when_discharge+0x5b0>)
 8004e9c:	6812      	ldr	r2, [r2, #0]
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fb fed1 	bl	8000c48 <__aeabi_fsub>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fc f991 	bl	80011d4 <__aeabi_fcmpgt>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <Batt_Protection_when_discharge+0x3d4>
		if(flag_trip_overcurrentdischarge==OFF) {
 8004eb8:	f000 bc37 	b.w	800572a <Batt_Protection_when_discharge+0xc42>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ec2:	4879      	ldr	r0, [pc, #484]	; (80050a8 <Batt_Protection_when_discharge+0x5c0>)
 8004ec4:	f004 fa67 	bl	8009396 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 8004ec8:	f000 bc2f 	b.w	800572a <Batt_Protection_when_discharge+0xc42>
	else if(((Suhu_T1>Disc_OverTemp)||(Suhu_T2>Disc_OverTemp)||(Suhu_T3>Disc_OverTemp)||(Suhu_T4>Disc_OverTemp)) && flag_trip_overtemperature==OFF) {
 8004ecc:	4b79      	ldr	r3, [pc, #484]	; (80050b4 <Batt_Protection_when_discharge+0x5cc>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a79      	ldr	r2, [pc, #484]	; (80050b8 <Batt_Protection_when_discharge+0x5d0>)
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fc f97c 	bl	80011d4 <__aeabi_fcmpgt>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d121      	bne.n	8004f26 <Batt_Protection_when_discharge+0x43e>
 8004ee2:	4b76      	ldr	r3, [pc, #472]	; (80050bc <Batt_Protection_when_discharge+0x5d4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a74      	ldr	r2, [pc, #464]	; (80050b8 <Batt_Protection_when_discharge+0x5d0>)
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	4611      	mov	r1, r2
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fc f971 	bl	80011d4 <__aeabi_fcmpgt>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d116      	bne.n	8004f26 <Batt_Protection_when_discharge+0x43e>
 8004ef8:	4b71      	ldr	r3, [pc, #452]	; (80050c0 <Batt_Protection_when_discharge+0x5d8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a6e      	ldr	r2, [pc, #440]	; (80050b8 <Batt_Protection_when_discharge+0x5d0>)
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	4611      	mov	r1, r2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fc f966 	bl	80011d4 <__aeabi_fcmpgt>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10b      	bne.n	8004f26 <Batt_Protection_when_discharge+0x43e>
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	; (80050c4 <Batt_Protection_when_discharge+0x5dc>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a69      	ldr	r2, [pc, #420]	; (80050b8 <Batt_Protection_when_discharge+0x5d0>)
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	4611      	mov	r1, r2
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fc f95b 	bl	80011d4 <__aeabi_fcmpgt>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8129 	beq.w	8005178 <Batt_Protection_when_discharge+0x690>
 8004f26:	4b68      	ldr	r3, [pc, #416]	; (80050c8 <Batt_Protection_when_discharge+0x5e0>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f040 8124 	bne.w	8005178 <Batt_Protection_when_discharge+0x690>
		fault_code=3;
 8004f30:	4b66      	ldr	r3, [pc, #408]	; (80050cc <Batt_Protection_when_discharge+0x5e4>)
 8004f32:	2203      	movs	r2, #3
 8004f34:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Disc_OverTemp && Suhu_T1<=Disc_OverTemp+1) {
 8004f36:	4b5f      	ldr	r3, [pc, #380]	; (80050b4 <Batt_Protection_when_discharge+0x5cc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a5f      	ldr	r2, [pc, #380]	; (80050b8 <Batt_Protection_when_discharge+0x5d0>)
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	4611      	mov	r1, r2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fc f947 	bl	80011d4 <__aeabi_fcmpgt>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d02a      	beq.n	8004fa2 <Batt_Protection_when_discharge+0x4ba>
 8004f4c:	4b5a      	ldr	r3, [pc, #360]	; (80050b8 <Batt_Protection_when_discharge+0x5d0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fb fe79 	bl	8000c4c <__addsf3>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4b55      	ldr	r3, [pc, #340]	; (80050b4 <Batt_Protection_when_discharge+0x5cc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4619      	mov	r1, r3
 8004f64:	4610      	mov	r0, r2
 8004f66:	f7fc f92b 	bl	80011c0 <__aeabi_fcmpge>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d018      	beq.n	8004fa2 <Batt_Protection_when_discharge+0x4ba>
			if((test_tim2%1000)==0) {
 8004f70:	4b4b      	ldr	r3, [pc, #300]	; (80050a0 <Batt_Protection_when_discharge+0x5b8>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4b56      	ldr	r3, [pc, #344]	; (80050d0 <Batt_Protection_when_discharge+0x5e8>)
 8004f76:	fb83 1302 	smull	r1, r3, r3, r2
 8004f7a:	1199      	asrs	r1, r3, #6
 8004f7c:	17d3      	asrs	r3, r2, #31
 8004f7e:	1acb      	subs	r3, r1, r3
 8004f80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f84:	fb01 f303 	mul.w	r3, r1, r3
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f040 80f3 	bne.w	8005176 <Batt_Protection_when_discharge+0x68e>
				BUZZ_Toggle;
 8004f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f94:	4844      	ldr	r0, [pc, #272]	; (80050a8 <Batt_Protection_when_discharge+0x5c0>)
 8004f96:	f004 fa16 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004f9a:	4b41      	ldr	r3, [pc, #260]	; (80050a0 <Batt_Protection_when_discharge+0x5b8>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 8004fa0:	e0e9      	b.n	8005176 <Batt_Protection_when_discharge+0x68e>
		else if(Suhu_T1>Disc_OverTemp+1 && Suhu_T1<=Disc_OverTemp+2){
 8004fa2:	4b45      	ldr	r3, [pc, #276]	; (80050b8 <Batt_Protection_when_discharge+0x5d0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fb fe4e 	bl	8000c4c <__addsf3>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	4b3f      	ldr	r3, [pc, #252]	; (80050b4 <Batt_Protection_when_discharge+0x5cc>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f7fc f8ec 	bl	8001198 <__aeabi_fcmplt>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d02a      	beq.n	800501c <Batt_Protection_when_discharge+0x534>
 8004fc6:	4b3c      	ldr	r3, [pc, #240]	; (80050b8 <Batt_Protection_when_discharge+0x5d0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fb fe3c 	bl	8000c4c <__addsf3>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	4b36      	ldr	r3, [pc, #216]	; (80050b4 <Batt_Protection_when_discharge+0x5cc>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f7fc f8ee 	bl	80011c0 <__aeabi_fcmpge>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d018      	beq.n	800501c <Batt_Protection_when_discharge+0x534>
			if((test_tim2%500)==0){
 8004fea:	4b2d      	ldr	r3, [pc, #180]	; (80050a0 <Batt_Protection_when_discharge+0x5b8>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b38      	ldr	r3, [pc, #224]	; (80050d0 <Batt_Protection_when_discharge+0x5e8>)
 8004ff0:	fb83 1302 	smull	r1, r3, r3, r2
 8004ff4:	1159      	asrs	r1, r3, #5
 8004ff6:	17d3      	asrs	r3, r2, #31
 8004ff8:	1acb      	subs	r3, r1, r3
 8004ffa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004ffe:	fb01 f303 	mul.w	r3, r1, r3
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	f040 80b6 	bne.w	8005176 <Batt_Protection_when_discharge+0x68e>
				BUZZ_Toggle;
 800500a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800500e:	4826      	ldr	r0, [pc, #152]	; (80050a8 <Batt_Protection_when_discharge+0x5c0>)
 8005010:	f004 f9d9 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005014:	4b22      	ldr	r3, [pc, #136]	; (80050a0 <Batt_Protection_when_discharge+0x5b8>)
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 800501a:	e0ac      	b.n	8005176 <Batt_Protection_when_discharge+0x68e>
		else if(Suhu_T1>Disc_OverTemp+2 && Suhu_T1<=Disc_OverTemp+3){
 800501c:	4b26      	ldr	r3, [pc, #152]	; (80050b8 <Batt_Protection_when_discharge+0x5d0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005024:	4618      	mov	r0, r3
 8005026:	f7fb fe11 	bl	8000c4c <__addsf3>
 800502a:	4603      	mov	r3, r0
 800502c:	461a      	mov	r2, r3
 800502e:	4b21      	ldr	r3, [pc, #132]	; (80050b4 <Batt_Protection_when_discharge+0x5cc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f7fc f8af 	bl	8001198 <__aeabi_fcmplt>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d049      	beq.n	80050d4 <Batt_Protection_when_discharge+0x5ec>
 8005040:	4b1d      	ldr	r3, [pc, #116]	; (80050b8 <Batt_Protection_when_discharge+0x5d0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4919      	ldr	r1, [pc, #100]	; (80050ac <Batt_Protection_when_discharge+0x5c4>)
 8005046:	4618      	mov	r0, r3
 8005048:	f7fb fe00 	bl	8000c4c <__addsf3>
 800504c:	4603      	mov	r3, r0
 800504e:	461a      	mov	r2, r3
 8005050:	4b18      	ldr	r3, [pc, #96]	; (80050b4 <Batt_Protection_when_discharge+0x5cc>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f7fc f8b2 	bl	80011c0 <__aeabi_fcmpge>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d038      	beq.n	80050d4 <Batt_Protection_when_discharge+0x5ec>
			if((test_tim2%500)==0){
 8005062:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <Batt_Protection_when_discharge+0x5b8>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <Batt_Protection_when_discharge+0x5e8>)
 8005068:	fb83 1302 	smull	r1, r3, r3, r2
 800506c:	1159      	asrs	r1, r3, #5
 800506e:	17d3      	asrs	r3, r2, #31
 8005070:	1acb      	subs	r3, r1, r3
 8005072:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005076:	fb01 f303 	mul.w	r3, r1, r3
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d17a      	bne.n	8005176 <Batt_Protection_when_discharge+0x68e>
				BUZZ_Toggle;
 8005080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005084:	4808      	ldr	r0, [pc, #32]	; (80050a8 <Batt_Protection_when_discharge+0x5c0>)
 8005086:	f004 f99e 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <Batt_Protection_when_discharge+0x5b8>)
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8005090:	e071      	b.n	8005176 <Batt_Protection_when_discharge+0x68e>
 8005092:	bf00      	nop
 8005094:	20000268 	.word	0x20000268
 8005098:	2000034c 	.word	0x2000034c
 800509c:	41200000 	.word	0x41200000
 80050a0:	20000378 	.word	0x20000378
 80050a4:	51eb851f 	.word	0x51eb851f
 80050a8:	40011000 	.word	0x40011000
 80050ac:	40400000 	.word	0x40400000
 80050b0:	66666667 	.word	0x66666667
 80050b4:	2000030c 	.word	0x2000030c
 80050b8:	20000014 	.word	0x20000014
 80050bc:	20000390 	.word	0x20000390
 80050c0:	20000280 	.word	0x20000280
 80050c4:	20000344 	.word	0x20000344
 80050c8:	20000278 	.word	0x20000278
 80050cc:	2000030a 	.word	0x2000030a
 80050d0:	10624dd3 	.word	0x10624dd3
		else if(Suhu_T1>Disc_OverTemp+3||Suhu_T2>Disc_OverTemp+3||Suhu_T3>Disc_OverTemp+3||Suhu_T4>Disc_OverTemp+3){
 80050d4:	4ba3      	ldr	r3, [pc, #652]	; (8005364 <Batt_Protection_when_discharge+0x87c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	49a3      	ldr	r1, [pc, #652]	; (8005368 <Batt_Protection_when_discharge+0x880>)
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fb fdb6 	bl	8000c4c <__addsf3>
 80050e0:	4603      	mov	r3, r0
 80050e2:	461a      	mov	r2, r3
 80050e4:	4ba1      	ldr	r3, [pc, #644]	; (800536c <Batt_Protection_when_discharge+0x884>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f7fc f854 	bl	8001198 <__aeabi_fcmplt>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d133      	bne.n	800515e <Batt_Protection_when_discharge+0x676>
 80050f6:	4b9b      	ldr	r3, [pc, #620]	; (8005364 <Batt_Protection_when_discharge+0x87c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	499b      	ldr	r1, [pc, #620]	; (8005368 <Batt_Protection_when_discharge+0x880>)
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fb fda5 	bl	8000c4c <__addsf3>
 8005102:	4603      	mov	r3, r0
 8005104:	461a      	mov	r2, r3
 8005106:	4b9a      	ldr	r3, [pc, #616]	; (8005370 <Batt_Protection_when_discharge+0x888>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4619      	mov	r1, r3
 800510c:	4610      	mov	r0, r2
 800510e:	f7fc f843 	bl	8001198 <__aeabi_fcmplt>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d122      	bne.n	800515e <Batt_Protection_when_discharge+0x676>
 8005118:	4b92      	ldr	r3, [pc, #584]	; (8005364 <Batt_Protection_when_discharge+0x87c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4992      	ldr	r1, [pc, #584]	; (8005368 <Batt_Protection_when_discharge+0x880>)
 800511e:	4618      	mov	r0, r3
 8005120:	f7fb fd94 	bl	8000c4c <__addsf3>
 8005124:	4603      	mov	r3, r0
 8005126:	461a      	mov	r2, r3
 8005128:	4b92      	ldr	r3, [pc, #584]	; (8005374 <Batt_Protection_when_discharge+0x88c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f7fc f832 	bl	8001198 <__aeabi_fcmplt>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d111      	bne.n	800515e <Batt_Protection_when_discharge+0x676>
 800513a:	4b8a      	ldr	r3, [pc, #552]	; (8005364 <Batt_Protection_when_discharge+0x87c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	498a      	ldr	r1, [pc, #552]	; (8005368 <Batt_Protection_when_discharge+0x880>)
 8005140:	4618      	mov	r0, r3
 8005142:	f7fb fd83 	bl	8000c4c <__addsf3>
 8005146:	4603      	mov	r3, r0
 8005148:	461a      	mov	r2, r3
 800514a:	4b8b      	ldr	r3, [pc, #556]	; (8005378 <Batt_Protection_when_discharge+0x890>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4619      	mov	r1, r3
 8005150:	4610      	mov	r0, r2
 8005152:	f7fc f821 	bl	8001198 <__aeabi_fcmplt>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d100      	bne.n	800515e <Batt_Protection_when_discharge+0x676>
		if(Suhu_T1>Disc_OverTemp && Suhu_T1<=Disc_OverTemp+1) {
 800515c:	e2e6      	b.n	800572c <Batt_Protection_when_discharge+0xc44>
			Batt_Open_Mode();
 800515e:	f7fc f9ed 	bl	800153c <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 8005162:	4b86      	ldr	r3, [pc, #536]	; (800537c <Batt_Protection_when_discharge+0x894>)
 8005164:	2201      	movs	r2, #1
 8005166:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005168:	2200      	movs	r2, #0
 800516a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800516e:	4884      	ldr	r0, [pc, #528]	; (8005380 <Batt_Protection_when_discharge+0x898>)
 8005170:	f004 f911 	bl	8009396 <HAL_GPIO_WritePin>
		if(Suhu_T1>Disc_OverTemp && Suhu_T1<=Disc_OverTemp+1) {
 8005174:	e2da      	b.n	800572c <Batt_Protection_when_discharge+0xc44>
 8005176:	e2d9      	b.n	800572c <Batt_Protection_when_discharge+0xc44>
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 8005178:	4b7c      	ldr	r3, [pc, #496]	; (800536c <Batt_Protection_when_discharge+0x884>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a81      	ldr	r2, [pc, #516]	; (8005384 <Batt_Protection_when_discharge+0x89c>)
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	4611      	mov	r1, r2
 8005182:	4618      	mov	r0, r3
 8005184:	f7fb fd60 	bl	8000c48 <__aeabi_fsub>
 8005188:	4603      	mov	r3, r0
 800518a:	497f      	ldr	r1, [pc, #508]	; (8005388 <Batt_Protection_when_discharge+0x8a0>)
 800518c:	4618      	mov	r0, r3
 800518e:	f7fc f80d 	bl	80011ac <__aeabi_fcmple>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d130      	bne.n	80051fa <Batt_Protection_when_discharge+0x712>
 8005198:	4b75      	ldr	r3, [pc, #468]	; (8005370 <Batt_Protection_when_discharge+0x888>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a79      	ldr	r2, [pc, #484]	; (8005384 <Batt_Protection_when_discharge+0x89c>)
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	4611      	mov	r1, r2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fb fd50 	bl	8000c48 <__aeabi_fsub>
 80051a8:	4603      	mov	r3, r0
 80051aa:	4977      	ldr	r1, [pc, #476]	; (8005388 <Batt_Protection_when_discharge+0x8a0>)
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fb fffd 	bl	80011ac <__aeabi_fcmple>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d120      	bne.n	80051fa <Batt_Protection_when_discharge+0x712>
 80051b8:	4b6e      	ldr	r3, [pc, #440]	; (8005374 <Batt_Protection_when_discharge+0x88c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a71      	ldr	r2, [pc, #452]	; (8005384 <Batt_Protection_when_discharge+0x89c>)
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	4611      	mov	r1, r2
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fb fd40 	bl	8000c48 <__aeabi_fsub>
 80051c8:	4603      	mov	r3, r0
 80051ca:	496f      	ldr	r1, [pc, #444]	; (8005388 <Batt_Protection_when_discharge+0x8a0>)
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fb ffed 	bl	80011ac <__aeabi_fcmple>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d110      	bne.n	80051fa <Batt_Protection_when_discharge+0x712>
 80051d8:	4b67      	ldr	r3, [pc, #412]	; (8005378 <Batt_Protection_when_discharge+0x890>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a69      	ldr	r2, [pc, #420]	; (8005384 <Batt_Protection_when_discharge+0x89c>)
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	4611      	mov	r1, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fb fd30 	bl	8000c48 <__aeabi_fsub>
 80051e8:	4603      	mov	r3, r0
 80051ea:	4967      	ldr	r1, [pc, #412]	; (8005388 <Batt_Protection_when_discharge+0x8a0>)
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fb ffdd 	bl	80011ac <__aeabi_fcmple>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 810d 	beq.w	8005414 <Batt_Protection_when_discharge+0x92c>
 80051fa:	4b64      	ldr	r3, [pc, #400]	; (800538c <Batt_Protection_when_discharge+0x8a4>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f040 8108 	bne.w	8005414 <Batt_Protection_when_discharge+0x92c>
		fault_code=4;
 8005204:	4b62      	ldr	r3, [pc, #392]	; (8005390 <Batt_Protection_when_discharge+0x8a8>)
 8005206:	2204      	movs	r2, #4
 8005208:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 800520a:	4b5e      	ldr	r3, [pc, #376]	; (8005384 <Batt_Protection_when_discharge+0x89c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	495e      	ldr	r1, [pc, #376]	; (8005388 <Batt_Protection_when_discharge+0x8a0>)
 8005210:	4618      	mov	r0, r3
 8005212:	f7fb fd1b 	bl	8000c4c <__addsf3>
 8005216:	4603      	mov	r3, r0
 8005218:	461a      	mov	r2, r3
 800521a:	4b54      	ldr	r3, [pc, #336]	; (800536c <Batt_Protection_when_discharge+0x884>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f7fb ffcd 	bl	80011c0 <__aeabi_fcmpge>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d029      	beq.n	8005280 <Batt_Protection_when_discharge+0x798>
 800522c:	4b55      	ldr	r3, [pc, #340]	; (8005384 <Batt_Protection_when_discharge+0x89c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4958      	ldr	r1, [pc, #352]	; (8005394 <Batt_Protection_when_discharge+0x8ac>)
 8005232:	4618      	mov	r0, r3
 8005234:	f7fb fd0a 	bl	8000c4c <__addsf3>
 8005238:	4603      	mov	r3, r0
 800523a:	461a      	mov	r2, r3
 800523c:	4b4b      	ldr	r3, [pc, #300]	; (800536c <Batt_Protection_when_discharge+0x884>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f7fb ffa8 	bl	8001198 <__aeabi_fcmplt>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d018      	beq.n	8005280 <Batt_Protection_when_discharge+0x798>
			if((test_tim2%1000)==0){
 800524e:	4b52      	ldr	r3, [pc, #328]	; (8005398 <Batt_Protection_when_discharge+0x8b0>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b52      	ldr	r3, [pc, #328]	; (800539c <Batt_Protection_when_discharge+0x8b4>)
 8005254:	fb83 1302 	smull	r1, r3, r3, r2
 8005258:	1199      	asrs	r1, r3, #6
 800525a:	17d3      	asrs	r3, r2, #31
 800525c:	1acb      	subs	r3, r1, r3
 800525e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	f040 80d2 	bne.w	8005412 <Batt_Protection_when_discharge+0x92a>
				BUZZ_Toggle;
 800526e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005272:	4843      	ldr	r0, [pc, #268]	; (8005380 <Batt_Protection_when_discharge+0x898>)
 8005274:	f004 f8a7 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005278:	4b47      	ldr	r3, [pc, #284]	; (8005398 <Batt_Protection_when_discharge+0x8b0>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 800527e:	e0c8      	b.n	8005412 <Batt_Protection_when_discharge+0x92a>
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2){
 8005280:	4b40      	ldr	r3, [pc, #256]	; (8005384 <Batt_Protection_when_discharge+0x89c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4943      	ldr	r1, [pc, #268]	; (8005394 <Batt_Protection_when_discharge+0x8ac>)
 8005286:	4618      	mov	r0, r3
 8005288:	f7fb fce0 	bl	8000c4c <__addsf3>
 800528c:	4603      	mov	r3, r0
 800528e:	461a      	mov	r2, r3
 8005290:	4b36      	ldr	r3, [pc, #216]	; (800536c <Batt_Protection_when_discharge+0x884>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4619      	mov	r1, r3
 8005296:	4610      	mov	r0, r2
 8005298:	f7fb ff92 	bl	80011c0 <__aeabi_fcmpge>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d02a      	beq.n	80052f8 <Batt_Protection_when_discharge+0x810>
 80052a2:	4b38      	ldr	r3, [pc, #224]	; (8005384 <Batt_Protection_when_discharge+0x89c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fb fcce 	bl	8000c4c <__addsf3>
 80052b0:	4603      	mov	r3, r0
 80052b2:	461a      	mov	r2, r3
 80052b4:	4b2d      	ldr	r3, [pc, #180]	; (800536c <Batt_Protection_when_discharge+0x884>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f7fb ff6c 	bl	8001198 <__aeabi_fcmplt>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d018      	beq.n	80052f8 <Batt_Protection_when_discharge+0x810>
			if((test_tim2%500)==0){
 80052c6:	4b34      	ldr	r3, [pc, #208]	; (8005398 <Batt_Protection_when_discharge+0x8b0>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b34      	ldr	r3, [pc, #208]	; (800539c <Batt_Protection_when_discharge+0x8b4>)
 80052cc:	fb83 1302 	smull	r1, r3, r3, r2
 80052d0:	1159      	asrs	r1, r3, #5
 80052d2:	17d3      	asrs	r3, r2, #31
 80052d4:	1acb      	subs	r3, r1, r3
 80052d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80052da:	fb01 f303 	mul.w	r3, r1, r3
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f040 8096 	bne.w	8005412 <Batt_Protection_when_discharge+0x92a>
				BUZZ_Toggle;
 80052e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052ea:	4825      	ldr	r0, [pc, #148]	; (8005380 <Batt_Protection_when_discharge+0x898>)
 80052ec:	f004 f86b 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80052f0:	4b29      	ldr	r3, [pc, #164]	; (8005398 <Batt_Protection_when_discharge+0x8b0>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80052f6:	e08c      	b.n	8005412 <Batt_Protection_when_discharge+0x92a>
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set){
 80052f8:	4b22      	ldr	r3, [pc, #136]	; (8005384 <Batt_Protection_when_discharge+0x89c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005300:	4618      	mov	r0, r3
 8005302:	f7fb fca3 	bl	8000c4c <__addsf3>
 8005306:	4603      	mov	r3, r0
 8005308:	461a      	mov	r2, r3
 800530a:	4b18      	ldr	r3, [pc, #96]	; (800536c <Batt_Protection_when_discharge+0x884>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4619      	mov	r1, r3
 8005310:	4610      	mov	r0, r2
 8005312:	f7fb ff5f 	bl	80011d4 <__aeabi_fcmpgt>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d041      	beq.n	80053a0 <Batt_Protection_when_discharge+0x8b8>
 800531c:	4b13      	ldr	r3, [pc, #76]	; (800536c <Batt_Protection_when_discharge+0x884>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a18      	ldr	r2, [pc, #96]	; (8005384 <Batt_Protection_when_discharge+0x89c>)
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	4611      	mov	r1, r2
 8005326:	4618      	mov	r0, r3
 8005328:	f7fb ff4a 	bl	80011c0 <__aeabi_fcmpge>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d036      	beq.n	80053a0 <Batt_Protection_when_discharge+0x8b8>
			if((test_tim2%500)==0){
 8005332:	4b19      	ldr	r3, [pc, #100]	; (8005398 <Batt_Protection_when_discharge+0x8b0>)
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b19      	ldr	r3, [pc, #100]	; (800539c <Batt_Protection_when_discharge+0x8b4>)
 8005338:	fb83 1302 	smull	r1, r3, r3, r2
 800533c:	1159      	asrs	r1, r3, #5
 800533e:	17d3      	asrs	r3, r2, #31
 8005340:	1acb      	subs	r3, r1, r3
 8005342:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005346:	fb01 f303 	mul.w	r3, r1, r3
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d160      	bne.n	8005412 <Batt_Protection_when_discharge+0x92a>
				BUZZ_Toggle;
 8005350:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005354:	480a      	ldr	r0, [pc, #40]	; (8005380 <Batt_Protection_when_discharge+0x898>)
 8005356:	f004 f836 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800535a:	4b0f      	ldr	r3, [pc, #60]	; (8005398 <Batt_Protection_when_discharge+0x8b0>)
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8005360:	e057      	b.n	8005412 <Batt_Protection_when_discharge+0x92a>
 8005362:	bf00      	nop
 8005364:	20000014 	.word	0x20000014
 8005368:	40400000 	.word	0x40400000
 800536c:	2000030c 	.word	0x2000030c
 8005370:	20000390 	.word	0x20000390
 8005374:	20000280 	.word	0x20000280
 8005378:	20000344 	.word	0x20000344
 800537c:	20000278 	.word	0x20000278
 8005380:	40011000 	.word	0x40011000
 8005384:	2000001c 	.word	0x2000001c
 8005388:	41200000 	.word	0x41200000
 800538c:	20000300 	.word	0x20000300
 8005390:	2000030a 	.word	0x2000030a
 8005394:	40a00000 	.word	0x40a00000
 8005398:	20000378 	.word	0x20000378
 800539c:	10624dd3 	.word	0x10624dd3
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set){
 80053a0:	4ba1      	ldr	r3, [pc, #644]	; (8005628 <Batt_Protection_when_discharge+0xb40>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4aa1      	ldr	r2, [pc, #644]	; (800562c <Batt_Protection_when_discharge+0xb44>)
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	4611      	mov	r1, r2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fb fef4 	bl	8001198 <__aeabi_fcmplt>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d121      	bne.n	80053fa <Batt_Protection_when_discharge+0x912>
 80053b6:	4b9e      	ldr	r3, [pc, #632]	; (8005630 <Batt_Protection_when_discharge+0xb48>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a9c      	ldr	r2, [pc, #624]	; (800562c <Batt_Protection_when_discharge+0xb44>)
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	4611      	mov	r1, r2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fb fee9 	bl	8001198 <__aeabi_fcmplt>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d116      	bne.n	80053fa <Batt_Protection_when_discharge+0x912>
 80053cc:	4b99      	ldr	r3, [pc, #612]	; (8005634 <Batt_Protection_when_discharge+0xb4c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a96      	ldr	r2, [pc, #600]	; (800562c <Batt_Protection_when_discharge+0xb44>)
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	4611      	mov	r1, r2
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fb fede 	bl	8001198 <__aeabi_fcmplt>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10b      	bne.n	80053fa <Batt_Protection_when_discharge+0x912>
 80053e2:	4b95      	ldr	r3, [pc, #596]	; (8005638 <Batt_Protection_when_discharge+0xb50>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a91      	ldr	r2, [pc, #580]	; (800562c <Batt_Protection_when_discharge+0xb44>)
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	4611      	mov	r1, r2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fb fed3 	bl	8001198 <__aeabi_fcmplt>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d100      	bne.n	80053fa <Batt_Protection_when_discharge+0x912>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 80053f8:	e198      	b.n	800572c <Batt_Protection_when_discharge+0xc44>
			Batt_Open_Mode();
 80053fa:	f7fc f89f 	bl	800153c <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 80053fe:	4b8f      	ldr	r3, [pc, #572]	; (800563c <Batt_Protection_when_discharge+0xb54>)
 8005400:	2201      	movs	r2, #1
 8005402:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005404:	2200      	movs	r2, #0
 8005406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800540a:	488d      	ldr	r0, [pc, #564]	; (8005640 <Batt_Protection_when_discharge+0xb58>)
 800540c:	f003 ffc3 	bl	8009396 <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8005410:	e18c      	b.n	800572c <Batt_Protection_when_discharge+0xc44>
 8005412:	e18b      	b.n	800572c <Batt_Protection_when_discharge+0xc44>
	else if(Pack_SOC <= SOC_Under_Set+5 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE) {
 8005414:	4b8b      	ldr	r3, [pc, #556]	; (8005644 <Batt_Protection_when_discharge+0xb5c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	498b      	ldr	r1, [pc, #556]	; (8005648 <Batt_Protection_when_discharge+0xb60>)
 800541a:	4618      	mov	r0, r3
 800541c:	f7fb fc16 	bl	8000c4c <__addsf3>
 8005420:	4603      	mov	r3, r0
 8005422:	461a      	mov	r2, r3
 8005424:	4b89      	ldr	r3, [pc, #548]	; (800564c <Batt_Protection_when_discharge+0xb64>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f7fb fec8 	bl	80011c0 <__aeabi_fcmpge>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80d1 	beq.w	80055da <Batt_Protection_when_discharge+0xaf2>
 8005438:	4b85      	ldr	r3, [pc, #532]	; (8005650 <Batt_Protection_when_discharge+0xb68>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	f040 80cc 	bne.w	80055da <Batt_Protection_when_discharge+0xaf2>
 8005442:	4b84      	ldr	r3, [pc, #528]	; (8005654 <Batt_Protection_when_discharge+0xb6c>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b02      	cmp	r3, #2
 8005448:	f040 80c7 	bne.w	80055da <Batt_Protection_when_discharge+0xaf2>
		fault_code=5;
 800544c:	4b82      	ldr	r3, [pc, #520]	; (8005658 <Batt_Protection_when_discharge+0xb70>)
 800544e:	2205      	movs	r2, #5
 8005450:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC <= SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 8005452:	4b7c      	ldr	r3, [pc, #496]	; (8005644 <Batt_Protection_when_discharge+0xb5c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	497c      	ldr	r1, [pc, #496]	; (8005648 <Batt_Protection_when_discharge+0xb60>)
 8005458:	4618      	mov	r0, r3
 800545a:	f7fb fbf7 	bl	8000c4c <__addsf3>
 800545e:	4603      	mov	r3, r0
 8005460:	461a      	mov	r2, r3
 8005462:	4b7a      	ldr	r3, [pc, #488]	; (800564c <Batt_Protection_when_discharge+0xb64>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4619      	mov	r1, r3
 8005468:	4610      	mov	r0, r2
 800546a:	f7fb fea9 	bl	80011c0 <__aeabi_fcmpge>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d029      	beq.n	80054c8 <Batt_Protection_when_discharge+0x9e0>
 8005474:	4b73      	ldr	r3, [pc, #460]	; (8005644 <Batt_Protection_when_discharge+0xb5c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4978      	ldr	r1, [pc, #480]	; (800565c <Batt_Protection_when_discharge+0xb74>)
 800547a:	4618      	mov	r0, r3
 800547c:	f7fb fbe6 	bl	8000c4c <__addsf3>
 8005480:	4603      	mov	r3, r0
 8005482:	461a      	mov	r2, r3
 8005484:	4b71      	ldr	r3, [pc, #452]	; (800564c <Batt_Protection_when_discharge+0xb64>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f7fb fe84 	bl	8001198 <__aeabi_fcmplt>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d018      	beq.n	80054c8 <Batt_Protection_when_discharge+0x9e0>
			if((test_tim2%1000)==0){
 8005496:	4b72      	ldr	r3, [pc, #456]	; (8005660 <Batt_Protection_when_discharge+0xb78>)
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4b72      	ldr	r3, [pc, #456]	; (8005664 <Batt_Protection_when_discharge+0xb7c>)
 800549c:	fb83 1302 	smull	r1, r3, r3, r2
 80054a0:	1199      	asrs	r1, r3, #6
 80054a2:	17d3      	asrs	r3, r2, #31
 80054a4:	1acb      	subs	r3, r1, r3
 80054a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80054aa:	fb01 f303 	mul.w	r3, r1, r3
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f040 8091 	bne.w	80055d8 <Batt_Protection_when_discharge+0xaf0>
				BUZZ_Toggle;
 80054b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054ba:	4861      	ldr	r0, [pc, #388]	; (8005640 <Batt_Protection_when_discharge+0xb58>)
 80054bc:	f003 ff83 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80054c0:	4b67      	ldr	r3, [pc, #412]	; (8005660 <Batt_Protection_when_discharge+0xb78>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 80054c6:	e087      	b.n	80055d8 <Batt_Protection_when_discharge+0xaf0>
		else if(Pack_SOC <= SOC_Under_Set+3 && Pack_SOC>SOC_Under_Set+2){
 80054c8:	4b5e      	ldr	r3, [pc, #376]	; (8005644 <Batt_Protection_when_discharge+0xb5c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4963      	ldr	r1, [pc, #396]	; (800565c <Batt_Protection_when_discharge+0xb74>)
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fb fbbc 	bl	8000c4c <__addsf3>
 80054d4:	4603      	mov	r3, r0
 80054d6:	461a      	mov	r2, r3
 80054d8:	4b5c      	ldr	r3, [pc, #368]	; (800564c <Batt_Protection_when_discharge+0xb64>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f7fb fe6e 	bl	80011c0 <__aeabi_fcmpge>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d029      	beq.n	800553e <Batt_Protection_when_discharge+0xa56>
 80054ea:	4b56      	ldr	r3, [pc, #344]	; (8005644 <Batt_Protection_when_discharge+0xb5c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fb fbaa 	bl	8000c4c <__addsf3>
 80054f8:	4603      	mov	r3, r0
 80054fa:	461a      	mov	r2, r3
 80054fc:	4b53      	ldr	r3, [pc, #332]	; (800564c <Batt_Protection_when_discharge+0xb64>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4619      	mov	r1, r3
 8005502:	4610      	mov	r0, r2
 8005504:	f7fb fe48 	bl	8001198 <__aeabi_fcmplt>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d017      	beq.n	800553e <Batt_Protection_when_discharge+0xa56>
			if((test_tim2%500)==0){
 800550e:	4b54      	ldr	r3, [pc, #336]	; (8005660 <Batt_Protection_when_discharge+0xb78>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	4b54      	ldr	r3, [pc, #336]	; (8005664 <Batt_Protection_when_discharge+0xb7c>)
 8005514:	fb83 1302 	smull	r1, r3, r3, r2
 8005518:	1159      	asrs	r1, r3, #5
 800551a:	17d3      	asrs	r3, r2, #31
 800551c:	1acb      	subs	r3, r1, r3
 800551e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005522:	fb01 f303 	mul.w	r3, r1, r3
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d155      	bne.n	80055d8 <Batt_Protection_when_discharge+0xaf0>
				BUZZ_Toggle;
 800552c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005530:	4843      	ldr	r0, [pc, #268]	; (8005640 <Batt_Protection_when_discharge+0xb58>)
 8005532:	f003 ff48 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005536:	4b4a      	ldr	r3, [pc, #296]	; (8005660 <Batt_Protection_when_discharge+0xb78>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 800553c:	e04c      	b.n	80055d8 <Batt_Protection_when_discharge+0xaf0>
		else if(Pack_SOC <= SOC_Under_Set+2 && Pack_SOC>SOC_Under_Set){
 800553e:	4b41      	ldr	r3, [pc, #260]	; (8005644 <Batt_Protection_when_discharge+0xb5c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005546:	4618      	mov	r0, r3
 8005548:	f7fb fb80 	bl	8000c4c <__addsf3>
 800554c:	4603      	mov	r3, r0
 800554e:	461a      	mov	r2, r3
 8005550:	4b3e      	ldr	r3, [pc, #248]	; (800564c <Batt_Protection_when_discharge+0xb64>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4619      	mov	r1, r3
 8005556:	4610      	mov	r0, r2
 8005558:	f7fb fe32 	bl	80011c0 <__aeabi_fcmpge>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d022      	beq.n	80055a8 <Batt_Protection_when_discharge+0xac0>
 8005562:	4b3a      	ldr	r3, [pc, #232]	; (800564c <Batt_Protection_when_discharge+0xb64>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a37      	ldr	r2, [pc, #220]	; (8005644 <Batt_Protection_when_discharge+0xb5c>)
 8005568:	6812      	ldr	r2, [r2, #0]
 800556a:	4611      	mov	r1, r2
 800556c:	4618      	mov	r0, r3
 800556e:	f7fb fe31 	bl	80011d4 <__aeabi_fcmpgt>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d017      	beq.n	80055a8 <Batt_Protection_when_discharge+0xac0>
			if((test_tim2%500)==0){
 8005578:	4b39      	ldr	r3, [pc, #228]	; (8005660 <Batt_Protection_when_discharge+0xb78>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	4b39      	ldr	r3, [pc, #228]	; (8005664 <Batt_Protection_when_discharge+0xb7c>)
 800557e:	fb83 1302 	smull	r1, r3, r3, r2
 8005582:	1159      	asrs	r1, r3, #5
 8005584:	17d3      	asrs	r3, r2, #31
 8005586:	1acb      	subs	r3, r1, r3
 8005588:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d120      	bne.n	80055d8 <Batt_Protection_when_discharge+0xaf0>
				BUZZ_Toggle;
 8005596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800559a:	4829      	ldr	r0, [pc, #164]	; (8005640 <Batt_Protection_when_discharge+0xb58>)
 800559c:	f003 ff13 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80055a0:	4b2f      	ldr	r3, [pc, #188]	; (8005660 <Batt_Protection_when_discharge+0xb78>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80055a6:	e017      	b.n	80055d8 <Batt_Protection_when_discharge+0xaf0>
		else if(Pack_SOC <= SOC_Under_Set){
 80055a8:	4b28      	ldr	r3, [pc, #160]	; (800564c <Batt_Protection_when_discharge+0xb64>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a25      	ldr	r2, [pc, #148]	; (8005644 <Batt_Protection_when_discharge+0xb5c>)
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	4611      	mov	r1, r2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fb fdfa 	bl	80011ac <__aeabi_fcmple>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d100      	bne.n	80055c0 <Batt_Protection_when_discharge+0xad8>
		if(Pack_SOC <= SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 80055be:	e0b5      	b.n	800572c <Batt_Protection_when_discharge+0xc44>
			Batt_Open_Mode();
 80055c0:	f7fb ffbc 	bl	800153c <Batt_Open_Mode>
			flag_trip_SOCOverDischarge=ON;
 80055c4:	4b22      	ldr	r3, [pc, #136]	; (8005650 <Batt_Protection_when_discharge+0xb68>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80055ca:	2200      	movs	r2, #0
 80055cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055d0:	481b      	ldr	r0, [pc, #108]	; (8005640 <Batt_Protection_when_discharge+0xb58>)
 80055d2:	f003 fee0 	bl	8009396 <HAL_GPIO_WritePin>
		if(Pack_SOC <= SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 80055d6:	e0a9      	b.n	800572c <Batt_Protection_when_discharge+0xc44>
 80055d8:	e0a8      	b.n	800572c <Batt_Protection_when_discharge+0xc44>
	else if(persen_imbalance >= Persen_Imbalance_Set + 5)
 80055da:	4b23      	ldr	r3, [pc, #140]	; (8005668 <Batt_Protection_when_discharge+0xb80>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	491a      	ldr	r1, [pc, #104]	; (8005648 <Batt_Protection_when_discharge+0xb60>)
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fb fb33 	bl	8000c4c <__addsf3>
 80055e6:	4603      	mov	r3, r0
 80055e8:	461a      	mov	r2, r3
 80055ea:	4b20      	ldr	r3, [pc, #128]	; (800566c <Batt_Protection_when_discharge+0xb84>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4619      	mov	r1, r3
 80055f0:	4610      	mov	r0, r2
 80055f2:	f7fb fddb 	bl	80011ac <__aeabi_fcmple>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d03b      	beq.n	8005674 <Batt_Protection_when_discharge+0xb8c>
		fault_code=6;
 80055fc:	4b16      	ldr	r3, [pc, #88]	; (8005658 <Batt_Protection_when_discharge+0xb70>)
 80055fe:	2206      	movs	r2, #6
 8005600:	701a      	strb	r2, [r3, #0]
		if(persen_imbalance >= Persen_Imbalance_Set)
 8005602:	4b1a      	ldr	r3, [pc, #104]	; (800566c <Batt_Protection_when_discharge+0xb84>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a18      	ldr	r2, [pc, #96]	; (8005668 <Batt_Protection_when_discharge+0xb80>)
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	4611      	mov	r1, r2
 800560c:	4618      	mov	r0, r3
 800560e:	f7fb fdd7 	bl	80011c0 <__aeabi_fcmpge>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d100      	bne.n	800561a <Batt_Protection_when_discharge+0xb32>
}
 8005618:	e088      	b.n	800572c <Batt_Protection_when_discharge+0xc44>
			flag_trip_unbalance=ON;
 800561a:	4b15      	ldr	r3, [pc, #84]	; (8005670 <Batt_Protection_when_discharge+0xb88>)
 800561c:	2201      	movs	r2, #1
 800561e:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 8005620:	f7fb ff8c 	bl	800153c <Batt_Open_Mode>
}
 8005624:	e082      	b.n	800572c <Batt_Protection_when_discharge+0xc44>
 8005626:	bf00      	nop
 8005628:	2000030c 	.word	0x2000030c
 800562c:	2000001c 	.word	0x2000001c
 8005630:	20000390 	.word	0x20000390
 8005634:	20000280 	.word	0x20000280
 8005638:	20000344 	.word	0x20000344
 800563c:	20000300 	.word	0x20000300
 8005640:	40011000 	.word	0x40011000
 8005644:	20000238 	.word	0x20000238
 8005648:	40a00000 	.word	0x40a00000
 800564c:	20000388 	.word	0x20000388
 8005650:	20000338 	.word	0x20000338
 8005654:	20000699 	.word	0x20000699
 8005658:	2000030a 	.word	0x2000030a
 800565c:	40400000 	.word	0x40400000
 8005660:	20000378 	.word	0x20000378
 8005664:	10624dd3 	.word	0x10624dd3
 8005668:	2000002c 	.word	0x2000002c
 800566c:	20000340 	.word	0x20000340
 8005670:	20000259 	.word	0x20000259
		if(fault_code!=0){
 8005674:	4b32      	ldr	r3, [pc, #200]	; (8005740 <Batt_Protection_when_discharge+0xc58>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <Batt_Protection_when_discharge+0xb9c>
			last_fault_code=fault_code;
 800567c:	4b30      	ldr	r3, [pc, #192]	; (8005740 <Batt_Protection_when_discharge+0xc58>)
 800567e:	781a      	ldrb	r2, [r3, #0]
 8005680:	4b30      	ldr	r3, [pc, #192]	; (8005744 <Batt_Protection_when_discharge+0xc5c>)
 8005682:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 8005684:	4b2e      	ldr	r3, [pc, #184]	; (8005740 <Batt_Protection_when_discharge+0xc58>)
 8005686:	2200      	movs	r2, #0
 8005688:	701a      	strb	r2, [r3, #0]
		T_Under_trip=0;
 800568a:	4b2f      	ldr	r3, [pc, #188]	; (8005748 <Batt_Protection_when_discharge+0xc60>)
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 8005692:	4b2e      	ldr	r3, [pc, #184]	; (800574c <Batt_Protection_when_discharge+0xc64>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f7fa ff32 	bl	8000500 <__aeabi_f2d>
 800569c:	a326      	add	r3, pc, #152	; (adr r3, 8005738 <Batt_Protection_when_discharge+0xc50>)
 800569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a2:	f7fa fdcd 	bl	8000240 <__aeabi_dsub>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4610      	mov	r0, r2
 80056ac:	4619      	mov	r1, r3
 80056ae:	f7fb fa77 	bl	8000ba0 <__aeabi_d2f>
 80056b2:	4603      	mov	r3, r0
 80056b4:	4a25      	ldr	r2, [pc, #148]	; (800574c <Batt_Protection_when_discharge+0xc64>)
 80056b6:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 80056b8:	4b25      	ldr	r3, [pc, #148]	; (8005750 <Batt_Protection_when_discharge+0xc68>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fa ff1f 	bl	8000500 <__aeabi_f2d>
 80056c2:	a31d      	add	r3, pc, #116	; (adr r3, 8005738 <Batt_Protection_when_discharge+0xc50>)
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	f7fa fdba 	bl	8000240 <__aeabi_dsub>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4610      	mov	r0, r2
 80056d2:	4619      	mov	r1, r3
 80056d4:	f7fb fa64 	bl	8000ba0 <__aeabi_d2f>
 80056d8:	4603      	mov	r3, r0
 80056da:	4a1d      	ldr	r2, [pc, #116]	; (8005750 <Batt_Protection_when_discharge+0xc68>)
 80056dc:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80056de:	2200      	movs	r2, #0
 80056e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056e4:	481b      	ldr	r0, [pc, #108]	; (8005754 <Batt_Protection_when_discharge+0xc6c>)
 80056e6:	f003 fe56 	bl	8009396 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
 80056ea:	4b18      	ldr	r3, [pc, #96]	; (800574c <Batt_Protection_when_discharge+0xc64>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f04f 0100 	mov.w	r1, #0
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fb fd50 	bl	8001198 <__aeabi_fcmplt>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <Batt_Protection_when_discharge+0xc1e>
			T_trip_cycle=0;
 80056fe:	4b13      	ldr	r3, [pc, #76]	; (800574c <Batt_Protection_when_discharge+0xc64>)
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle<0)
 8005706:	4b12      	ldr	r3, [pc, #72]	; (8005750 <Batt_Protection_when_discharge+0xc68>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f04f 0100 	mov.w	r1, #0
 800570e:	4618      	mov	r0, r3
 8005710:	f7fb fd42 	bl	8001198 <__aeabi_fcmplt>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d100      	bne.n	800571c <Batt_Protection_when_discharge+0xc34>
}
 800571a:	e007      	b.n	800572c <Batt_Protection_when_discharge+0xc44>
			T_I_Over_trip_cycle=0;
 800571c:	4b0c      	ldr	r3, [pc, #48]	; (8005750 <Batt_Protection_when_discharge+0xc68>)
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	601a      	str	r2, [r3, #0]
}
 8005724:	e002      	b.n	800572c <Batt_Protection_when_discharge+0xc44>
		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8005726:	bf00      	nop
 8005728:	e000      	b.n	800572c <Batt_Protection_when_discharge+0xc44>
		if(flag_trip_overcurrentdischarge==OFF) {
 800572a:	bf00      	nop
}
 800572c:	bf00      	nop
 800572e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005732:	bf00      	nop
 8005734:	f3af 8000 	nop.w
 8005738:	d2f1a9fc 	.word	0xd2f1a9fc
 800573c:	3f50624d 	.word	0x3f50624d
 8005740:	2000030a 	.word	0x2000030a
 8005744:	20000385 	.word	0x20000385
 8005748:	20000870 	.word	0x20000870
 800574c:	2000087c 	.word	0x2000087c
 8005750:	2000034c 	.word	0x2000034c
 8005754:	40011000 	.word	0x40011000

08005758 <Batt_Protection_when_charge>:

void Batt_Protection_when_charge(void){
 8005758:	b5b0      	push	{r4, r5, r7, lr}
 800575a:	af00      	add	r7, sp, #0
	//***************** Short Circuit Protection ***********************************//
	if(IBATT > (VBATT)) {
 800575c:	4b9b      	ldr	r3, [pc, #620]	; (80059cc <Batt_Protection_when_charge+0x274>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a9b      	ldr	r2, [pc, #620]	; (80059d0 <Batt_Protection_when_charge+0x278>)
 8005762:	6812      	ldr	r2, [r2, #0]
 8005764:	4611      	mov	r1, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f7fb fd34 	bl	80011d4 <__aeabi_fcmpgt>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d017      	beq.n	80057a2 <Batt_Protection_when_charge+0x4a>
		Isc = IBATT;
 8005772:	4b96      	ldr	r3, [pc, #600]	; (80059cc <Batt_Protection_when_charge+0x274>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a97      	ldr	r2, [pc, #604]	; (80059d4 <Batt_Protection_when_charge+0x27c>)
 8005778:	6013      	str	r3, [r2, #0]
		Vsc = VBATT;
 800577a:	4b95      	ldr	r3, [pc, #596]	; (80059d0 <Batt_Protection_when_charge+0x278>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a96      	ldr	r2, [pc, #600]	; (80059d8 <Batt_Protection_when_charge+0x280>)
 8005780:	6013      	str	r3, [r2, #0]
		fault_code = 12;
 8005782:	4b96      	ldr	r3, [pc, #600]	; (80059dc <Batt_Protection_when_charge+0x284>)
 8005784:	220c      	movs	r2, #12
 8005786:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8005788:	f7fb fed8 	bl	800153c <Batt_Open_Mode>
		flag_trip_shortcircuit = ON;
 800578c:	4b94      	ldr	r3, [pc, #592]	; (80059e0 <Batt_Protection_when_charge+0x288>)
 800578e:	2201      	movs	r2, #1
 8005790:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005792:	2200      	movs	r2, #0
 8005794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005798:	4892      	ldr	r0, [pc, #584]	; (80059e4 <Batt_Protection_when_charge+0x28c>)
 800579a:	f003 fdfc 	bl	8009396 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle<0)
			T_I_Over_trip_cycle=0;
	}
}
 800579e:	f000 bcac 	b.w	80060fa <Batt_Protection_when_charge+0x9a2>
	else if(Pack_SOC >= SOC_Over_Set-10 && flag_trip_SOCOverCharge==OFF) {
 80057a2:	4b91      	ldr	r3, [pc, #580]	; (80059e8 <Batt_Protection_when_charge+0x290>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4991      	ldr	r1, [pc, #580]	; (80059ec <Batt_Protection_when_charge+0x294>)
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7fb fa4d 	bl	8000c48 <__aeabi_fsub>
 80057ae:	4603      	mov	r3, r0
 80057b0:	461a      	mov	r2, r3
 80057b2:	4b8f      	ldr	r3, [pc, #572]	; (80059f0 <Batt_Protection_when_charge+0x298>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4619      	mov	r1, r3
 80057b8:	4610      	mov	r0, r2
 80057ba:	f7fb fcf7 	bl	80011ac <__aeabi_fcmple>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d01f      	beq.n	8005804 <Batt_Protection_when_charge+0xac>
 80057c4:	4b8b      	ldr	r3, [pc, #556]	; (80059f4 <Batt_Protection_when_charge+0x29c>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d11b      	bne.n	8005804 <Batt_Protection_when_charge+0xac>
		fault_code=7;
 80057cc:	4b83      	ldr	r3, [pc, #524]	; (80059dc <Batt_Protection_when_charge+0x284>)
 80057ce:	2207      	movs	r2, #7
 80057d0:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC>SOC_Over_Set){
 80057d2:	4b87      	ldr	r3, [pc, #540]	; (80059f0 <Batt_Protection_when_charge+0x298>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a84      	ldr	r2, [pc, #528]	; (80059e8 <Batt_Protection_when_charge+0x290>)
 80057d8:	6812      	ldr	r2, [r2, #0]
 80057da:	4611      	mov	r1, r2
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fb fcf9 	bl	80011d4 <__aeabi_fcmpgt>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8488 	beq.w	80060fa <Batt_Protection_when_charge+0x9a2>
			Batt_Open_Mode();
 80057ea:	f7fb fea7 	bl	800153c <Batt_Open_Mode>
			flag_trip_SOCOverCharge=ON;
 80057ee:	4b81      	ldr	r3, [pc, #516]	; (80059f4 <Batt_Protection_when_charge+0x29c>)
 80057f0:	2201      	movs	r2, #1
 80057f2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80057f4:	2200      	movs	r2, #0
 80057f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057fa:	487a      	ldr	r0, [pc, #488]	; (80059e4 <Batt_Protection_when_charge+0x28c>)
 80057fc:	f003 fdcb 	bl	8009396 <HAL_GPIO_WritePin>
		if(Pack_SOC>SOC_Over_Set){
 8005800:	f000 bc7b 	b.w	80060fa <Batt_Protection_when_charge+0x9a2>
	else if(((Suhu_T1>Chg_OverTemp)||(Suhu_T2>Chg_OverTemp)||(Suhu_T3>Chg_OverTemp)||(Suhu_T4>Chg_OverTemp)) && flag_trip_overtemperature==OFF) {
 8005804:	4b7c      	ldr	r3, [pc, #496]	; (80059f8 <Batt_Protection_when_charge+0x2a0>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a7c      	ldr	r2, [pc, #496]	; (80059fc <Batt_Protection_when_charge+0x2a4>)
 800580a:	6812      	ldr	r2, [r2, #0]
 800580c:	4611      	mov	r1, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f7fb fce0 	bl	80011d4 <__aeabi_fcmpgt>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d121      	bne.n	800585e <Batt_Protection_when_charge+0x106>
 800581a:	4b79      	ldr	r3, [pc, #484]	; (8005a00 <Batt_Protection_when_charge+0x2a8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a77      	ldr	r2, [pc, #476]	; (80059fc <Batt_Protection_when_charge+0x2a4>)
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	4611      	mov	r1, r2
 8005824:	4618      	mov	r0, r3
 8005826:	f7fb fcd5 	bl	80011d4 <__aeabi_fcmpgt>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d116      	bne.n	800585e <Batt_Protection_when_charge+0x106>
 8005830:	4b74      	ldr	r3, [pc, #464]	; (8005a04 <Batt_Protection_when_charge+0x2ac>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a71      	ldr	r2, [pc, #452]	; (80059fc <Batt_Protection_when_charge+0x2a4>)
 8005836:	6812      	ldr	r2, [r2, #0]
 8005838:	4611      	mov	r1, r2
 800583a:	4618      	mov	r0, r3
 800583c:	f7fb fcca 	bl	80011d4 <__aeabi_fcmpgt>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10b      	bne.n	800585e <Batt_Protection_when_charge+0x106>
 8005846:	4b70      	ldr	r3, [pc, #448]	; (8005a08 <Batt_Protection_when_charge+0x2b0>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a6c      	ldr	r2, [pc, #432]	; (80059fc <Batt_Protection_when_charge+0x2a4>)
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	4611      	mov	r1, r2
 8005850:	4618      	mov	r0, r3
 8005852:	f7fb fcbf 	bl	80011d4 <__aeabi_fcmpgt>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8131 	beq.w	8005ac0 <Batt_Protection_when_charge+0x368>
 800585e:	4b6b      	ldr	r3, [pc, #428]	; (8005a0c <Batt_Protection_when_charge+0x2b4>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f040 812c 	bne.w	8005ac0 <Batt_Protection_when_charge+0x368>
		fault_code=3;
 8005868:	4b5c      	ldr	r3, [pc, #368]	; (80059dc <Batt_Protection_when_charge+0x284>)
 800586a:	2203      	movs	r2, #3
 800586c:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Chg_OverTemp && Suhu_T1<=Chg_OverTemp+1) {
 800586e:	4b62      	ldr	r3, [pc, #392]	; (80059f8 <Batt_Protection_when_charge+0x2a0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a62      	ldr	r2, [pc, #392]	; (80059fc <Batt_Protection_when_charge+0x2a4>)
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f7fb fcab 	bl	80011d4 <__aeabi_fcmpgt>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d02a      	beq.n	80058da <Batt_Protection_when_charge+0x182>
 8005884:	4b5d      	ldr	r3, [pc, #372]	; (80059fc <Batt_Protection_when_charge+0x2a4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800588c:	4618      	mov	r0, r3
 800588e:	f7fb f9dd 	bl	8000c4c <__addsf3>
 8005892:	4603      	mov	r3, r0
 8005894:	461a      	mov	r2, r3
 8005896:	4b58      	ldr	r3, [pc, #352]	; (80059f8 <Batt_Protection_when_charge+0x2a0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4619      	mov	r1, r3
 800589c:	4610      	mov	r0, r2
 800589e:	f7fb fc8f 	bl	80011c0 <__aeabi_fcmpge>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d018      	beq.n	80058da <Batt_Protection_when_charge+0x182>
			if((test_tim2%1000)==0) {
 80058a8:	4b59      	ldr	r3, [pc, #356]	; (8005a10 <Batt_Protection_when_charge+0x2b8>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	4b59      	ldr	r3, [pc, #356]	; (8005a14 <Batt_Protection_when_charge+0x2bc>)
 80058ae:	fb83 1302 	smull	r1, r3, r3, r2
 80058b2:	1199      	asrs	r1, r3, #6
 80058b4:	17d3      	asrs	r3, r2, #31
 80058b6:	1acb      	subs	r3, r1, r3
 80058b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f040 80fb 	bne.w	8005abe <Batt_Protection_when_charge+0x366>
				BUZZ_Toggle;
 80058c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058cc:	4845      	ldr	r0, [pc, #276]	; (80059e4 <Batt_Protection_when_charge+0x28c>)
 80058ce:	f003 fd7a 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80058d2:	4b4f      	ldr	r3, [pc, #316]	; (8005a10 <Batt_Protection_when_charge+0x2b8>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 80058d8:	e0f1      	b.n	8005abe <Batt_Protection_when_charge+0x366>
		else if(Suhu_T1>Chg_OverTemp+1 && Suhu_T1<=Chg_OverTemp+2){
 80058da:	4b48      	ldr	r3, [pc, #288]	; (80059fc <Batt_Protection_when_charge+0x2a4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fb f9b2 	bl	8000c4c <__addsf3>
 80058e8:	4603      	mov	r3, r0
 80058ea:	461a      	mov	r2, r3
 80058ec:	4b42      	ldr	r3, [pc, #264]	; (80059f8 <Batt_Protection_when_charge+0x2a0>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4619      	mov	r1, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f7fb fc50 	bl	8001198 <__aeabi_fcmplt>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d02a      	beq.n	8005954 <Batt_Protection_when_charge+0x1fc>
 80058fe:	4b3f      	ldr	r3, [pc, #252]	; (80059fc <Batt_Protection_when_charge+0x2a4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005906:	4618      	mov	r0, r3
 8005908:	f7fb f9a0 	bl	8000c4c <__addsf3>
 800590c:	4603      	mov	r3, r0
 800590e:	461a      	mov	r2, r3
 8005910:	4b39      	ldr	r3, [pc, #228]	; (80059f8 <Batt_Protection_when_charge+0x2a0>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4619      	mov	r1, r3
 8005916:	4610      	mov	r0, r2
 8005918:	f7fb fc52 	bl	80011c0 <__aeabi_fcmpge>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d018      	beq.n	8005954 <Batt_Protection_when_charge+0x1fc>
			if((test_tim2%500)==0){
 8005922:	4b3b      	ldr	r3, [pc, #236]	; (8005a10 <Batt_Protection_when_charge+0x2b8>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4b3b      	ldr	r3, [pc, #236]	; (8005a14 <Batt_Protection_when_charge+0x2bc>)
 8005928:	fb83 1302 	smull	r1, r3, r3, r2
 800592c:	1159      	asrs	r1, r3, #5
 800592e:	17d3      	asrs	r3, r2, #31
 8005930:	1acb      	subs	r3, r1, r3
 8005932:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005936:	fb01 f303 	mul.w	r3, r1, r3
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	f040 80be 	bne.w	8005abe <Batt_Protection_when_charge+0x366>
				BUZZ_Toggle;
 8005942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005946:	4827      	ldr	r0, [pc, #156]	; (80059e4 <Batt_Protection_when_charge+0x28c>)
 8005948:	f003 fd3d 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800594c:	4b30      	ldr	r3, [pc, #192]	; (8005a10 <Batt_Protection_when_charge+0x2b8>)
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8005952:	e0b4      	b.n	8005abe <Batt_Protection_when_charge+0x366>
		else if(Suhu_T1>Chg_OverTemp+2 && Suhu_T1<=Chg_OverTemp+3){
 8005954:	4b29      	ldr	r3, [pc, #164]	; (80059fc <Batt_Protection_when_charge+0x2a4>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800595c:	4618      	mov	r0, r3
 800595e:	f7fb f975 	bl	8000c4c <__addsf3>
 8005962:	4603      	mov	r3, r0
 8005964:	461a      	mov	r2, r3
 8005966:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <Batt_Protection_when_charge+0x2a0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4619      	mov	r1, r3
 800596c:	4610      	mov	r0, r2
 800596e:	f7fb fc13 	bl	8001198 <__aeabi_fcmplt>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d051      	beq.n	8005a1c <Batt_Protection_when_charge+0x2c4>
 8005978:	4b20      	ldr	r3, [pc, #128]	; (80059fc <Batt_Protection_when_charge+0x2a4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4926      	ldr	r1, [pc, #152]	; (8005a18 <Batt_Protection_when_charge+0x2c0>)
 800597e:	4618      	mov	r0, r3
 8005980:	f7fb f964 	bl	8000c4c <__addsf3>
 8005984:	4603      	mov	r3, r0
 8005986:	461a      	mov	r2, r3
 8005988:	4b1b      	ldr	r3, [pc, #108]	; (80059f8 <Batt_Protection_when_charge+0x2a0>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f7fb fc16 	bl	80011c0 <__aeabi_fcmpge>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d040      	beq.n	8005a1c <Batt_Protection_when_charge+0x2c4>
			if((test_tim2%500)==0){
 800599a:	4b1d      	ldr	r3, [pc, #116]	; (8005a10 <Batt_Protection_when_charge+0x2b8>)
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b1d      	ldr	r3, [pc, #116]	; (8005a14 <Batt_Protection_when_charge+0x2bc>)
 80059a0:	fb83 1302 	smull	r1, r3, r3, r2
 80059a4:	1159      	asrs	r1, r3, #5
 80059a6:	17d3      	asrs	r3, r2, #31
 80059a8:	1acb      	subs	r3, r1, r3
 80059aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80059ae:	fb01 f303 	mul.w	r3, r1, r3
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f040 8082 	bne.w	8005abe <Batt_Protection_when_charge+0x366>
				BUZZ_Toggle;
 80059ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059be:	4809      	ldr	r0, [pc, #36]	; (80059e4 <Batt_Protection_when_charge+0x28c>)
 80059c0:	f003 fd01 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80059c4:	4b12      	ldr	r3, [pc, #72]	; (8005a10 <Batt_Protection_when_charge+0x2b8>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80059ca:	e078      	b.n	8005abe <Batt_Protection_when_charge+0x366>
 80059cc:	200002f8 	.word	0x200002f8
 80059d0:	2000027c 	.word	0x2000027c
 80059d4:	200002d8 	.word	0x200002d8
 80059d8:	20000324 	.word	0x20000324
 80059dc:	2000030a 	.word	0x2000030a
 80059e0:	2000025c 	.word	0x2000025c
 80059e4:	40011000 	.word	0x40011000
 80059e8:	20000020 	.word	0x20000020
 80059ec:	41200000 	.word	0x41200000
 80059f0:	20000388 	.word	0x20000388
 80059f4:	2000025a 	.word	0x2000025a
 80059f8:	2000030c 	.word	0x2000030c
 80059fc:	20000018 	.word	0x20000018
 8005a00:	20000390 	.word	0x20000390
 8005a04:	20000280 	.word	0x20000280
 8005a08:	20000344 	.word	0x20000344
 8005a0c:	20000278 	.word	0x20000278
 8005a10:	20000378 	.word	0x20000378
 8005a14:	10624dd3 	.word	0x10624dd3
 8005a18:	40400000 	.word	0x40400000
		else if(Suhu_T1>Chg_OverTemp+3||Suhu_T2>Chg_OverTemp+3||Suhu_T3>Chg_OverTemp+3||Suhu_T4>Chg_OverTemp+3){
 8005a1c:	4ba3      	ldr	r3, [pc, #652]	; (8005cac <Batt_Protection_when_charge+0x554>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	49a3      	ldr	r1, [pc, #652]	; (8005cb0 <Batt_Protection_when_charge+0x558>)
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fb f912 	bl	8000c4c <__addsf3>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4ba1      	ldr	r3, [pc, #644]	; (8005cb4 <Batt_Protection_when_charge+0x55c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4619      	mov	r1, r3
 8005a32:	4610      	mov	r0, r2
 8005a34:	f7fb fbb0 	bl	8001198 <__aeabi_fcmplt>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d133      	bne.n	8005aa6 <Batt_Protection_when_charge+0x34e>
 8005a3e:	4b9b      	ldr	r3, [pc, #620]	; (8005cac <Batt_Protection_when_charge+0x554>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	499b      	ldr	r1, [pc, #620]	; (8005cb0 <Batt_Protection_when_charge+0x558>)
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fb f901 	bl	8000c4c <__addsf3>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	4b9a      	ldr	r3, [pc, #616]	; (8005cb8 <Batt_Protection_when_charge+0x560>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f7fb fb9f 	bl	8001198 <__aeabi_fcmplt>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d122      	bne.n	8005aa6 <Batt_Protection_when_charge+0x34e>
 8005a60:	4b92      	ldr	r3, [pc, #584]	; (8005cac <Batt_Protection_when_charge+0x554>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4992      	ldr	r1, [pc, #584]	; (8005cb0 <Batt_Protection_when_charge+0x558>)
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fb f8f0 	bl	8000c4c <__addsf3>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	461a      	mov	r2, r3
 8005a70:	4b92      	ldr	r3, [pc, #584]	; (8005cbc <Batt_Protection_when_charge+0x564>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f7fb fb8e 	bl	8001198 <__aeabi_fcmplt>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d111      	bne.n	8005aa6 <Batt_Protection_when_charge+0x34e>
 8005a82:	4b8a      	ldr	r3, [pc, #552]	; (8005cac <Batt_Protection_when_charge+0x554>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	498a      	ldr	r1, [pc, #552]	; (8005cb0 <Batt_Protection_when_charge+0x558>)
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fb f8df 	bl	8000c4c <__addsf3>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	461a      	mov	r2, r3
 8005a92:	4b8b      	ldr	r3, [pc, #556]	; (8005cc0 <Batt_Protection_when_charge+0x568>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f7fb fb7d 	bl	8001198 <__aeabi_fcmplt>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d100      	bne.n	8005aa6 <Batt_Protection_when_charge+0x34e>
		if(Suhu_T1>Chg_OverTemp && Suhu_T1<=Chg_OverTemp+1) {
 8005aa4:	e329      	b.n	80060fa <Batt_Protection_when_charge+0x9a2>
			Batt_Open_Mode();
 8005aa6:	f7fb fd49 	bl	800153c <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 8005aaa:	4b86      	ldr	r3, [pc, #536]	; (8005cc4 <Batt_Protection_when_charge+0x56c>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ab6:	4884      	ldr	r0, [pc, #528]	; (8005cc8 <Batt_Protection_when_charge+0x570>)
 8005ab8:	f003 fc6d 	bl	8009396 <HAL_GPIO_WritePin>
		if(Suhu_T1>Chg_OverTemp && Suhu_T1<=Chg_OverTemp+1) {
 8005abc:	e31d      	b.n	80060fa <Batt_Protection_when_charge+0x9a2>
 8005abe:	e31c      	b.n	80060fa <Batt_Protection_when_charge+0x9a2>
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 8005ac0:	4b7c      	ldr	r3, [pc, #496]	; (8005cb4 <Batt_Protection_when_charge+0x55c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a81      	ldr	r2, [pc, #516]	; (8005ccc <Batt_Protection_when_charge+0x574>)
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	4611      	mov	r1, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fb f8bc 	bl	8000c48 <__aeabi_fsub>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	497f      	ldr	r1, [pc, #508]	; (8005cd0 <Batt_Protection_when_charge+0x578>)
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fb fb69 	bl	80011ac <__aeabi_fcmple>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d130      	bne.n	8005b42 <Batt_Protection_when_charge+0x3ea>
 8005ae0:	4b75      	ldr	r3, [pc, #468]	; (8005cb8 <Batt_Protection_when_charge+0x560>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a79      	ldr	r2, [pc, #484]	; (8005ccc <Batt_Protection_when_charge+0x574>)
 8005ae6:	6812      	ldr	r2, [r2, #0]
 8005ae8:	4611      	mov	r1, r2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fb f8ac 	bl	8000c48 <__aeabi_fsub>
 8005af0:	4603      	mov	r3, r0
 8005af2:	4977      	ldr	r1, [pc, #476]	; (8005cd0 <Batt_Protection_when_charge+0x578>)
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fb fb59 	bl	80011ac <__aeabi_fcmple>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d120      	bne.n	8005b42 <Batt_Protection_when_charge+0x3ea>
 8005b00:	4b6e      	ldr	r3, [pc, #440]	; (8005cbc <Batt_Protection_when_charge+0x564>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a71      	ldr	r2, [pc, #452]	; (8005ccc <Batt_Protection_when_charge+0x574>)
 8005b06:	6812      	ldr	r2, [r2, #0]
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fb f89c 	bl	8000c48 <__aeabi_fsub>
 8005b10:	4603      	mov	r3, r0
 8005b12:	496f      	ldr	r1, [pc, #444]	; (8005cd0 <Batt_Protection_when_charge+0x578>)
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fb fb49 	bl	80011ac <__aeabi_fcmple>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d110      	bne.n	8005b42 <Batt_Protection_when_charge+0x3ea>
 8005b20:	4b67      	ldr	r3, [pc, #412]	; (8005cc0 <Batt_Protection_when_charge+0x568>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a69      	ldr	r2, [pc, #420]	; (8005ccc <Batt_Protection_when_charge+0x574>)
 8005b26:	6812      	ldr	r2, [r2, #0]
 8005b28:	4611      	mov	r1, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fb f88c 	bl	8000c48 <__aeabi_fsub>
 8005b30:	4603      	mov	r3, r0
 8005b32:	4967      	ldr	r1, [pc, #412]	; (8005cd0 <Batt_Protection_when_charge+0x578>)
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fb fb39 	bl	80011ac <__aeabi_fcmple>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 810d 	beq.w	8005d5c <Batt_Protection_when_charge+0x604>
 8005b42:	4b64      	ldr	r3, [pc, #400]	; (8005cd4 <Batt_Protection_when_charge+0x57c>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f040 8108 	bne.w	8005d5c <Batt_Protection_when_charge+0x604>
		fault_code=4;
 8005b4c:	4b62      	ldr	r3, [pc, #392]	; (8005cd8 <Batt_Protection_when_charge+0x580>)
 8005b4e:	2204      	movs	r2, #4
 8005b50:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8005b52:	4b5e      	ldr	r3, [pc, #376]	; (8005ccc <Batt_Protection_when_charge+0x574>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	495e      	ldr	r1, [pc, #376]	; (8005cd0 <Batt_Protection_when_charge+0x578>)
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fb f877 	bl	8000c4c <__addsf3>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	461a      	mov	r2, r3
 8005b62:	4b54      	ldr	r3, [pc, #336]	; (8005cb4 <Batt_Protection_when_charge+0x55c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4619      	mov	r1, r3
 8005b68:	4610      	mov	r0, r2
 8005b6a:	f7fb fb29 	bl	80011c0 <__aeabi_fcmpge>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d029      	beq.n	8005bc8 <Batt_Protection_when_charge+0x470>
 8005b74:	4b55      	ldr	r3, [pc, #340]	; (8005ccc <Batt_Protection_when_charge+0x574>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4958      	ldr	r1, [pc, #352]	; (8005cdc <Batt_Protection_when_charge+0x584>)
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fb f866 	bl	8000c4c <__addsf3>
 8005b80:	4603      	mov	r3, r0
 8005b82:	461a      	mov	r2, r3
 8005b84:	4b4b      	ldr	r3, [pc, #300]	; (8005cb4 <Batt_Protection_when_charge+0x55c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f7fb fb04 	bl	8001198 <__aeabi_fcmplt>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d018      	beq.n	8005bc8 <Batt_Protection_when_charge+0x470>
			if((test_tim2%1000)==0){
 8005b96:	4b52      	ldr	r3, [pc, #328]	; (8005ce0 <Batt_Protection_when_charge+0x588>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b52      	ldr	r3, [pc, #328]	; (8005ce4 <Batt_Protection_when_charge+0x58c>)
 8005b9c:	fb83 1302 	smull	r1, r3, r3, r2
 8005ba0:	1199      	asrs	r1, r3, #6
 8005ba2:	17d3      	asrs	r3, r2, #31
 8005ba4:	1acb      	subs	r3, r1, r3
 8005ba6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005baa:	fb01 f303 	mul.w	r3, r1, r3
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f040 80d2 	bne.w	8005d5a <Batt_Protection_when_charge+0x602>
				BUZZ_Toggle;
 8005bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bba:	4843      	ldr	r0, [pc, #268]	; (8005cc8 <Batt_Protection_when_charge+0x570>)
 8005bbc:	f003 fc03 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005bc0:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <Batt_Protection_when_charge+0x588>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 8005bc6:	e0c8      	b.n	8005d5a <Batt_Protection_when_charge+0x602>
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2){
 8005bc8:	4b40      	ldr	r3, [pc, #256]	; (8005ccc <Batt_Protection_when_charge+0x574>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4943      	ldr	r1, [pc, #268]	; (8005cdc <Batt_Protection_when_charge+0x584>)
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fb f83c 	bl	8000c4c <__addsf3>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	4b36      	ldr	r3, [pc, #216]	; (8005cb4 <Batt_Protection_when_charge+0x55c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f7fb faee 	bl	80011c0 <__aeabi_fcmpge>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d02a      	beq.n	8005c40 <Batt_Protection_when_charge+0x4e8>
 8005bea:	4b38      	ldr	r3, [pc, #224]	; (8005ccc <Batt_Protection_when_charge+0x574>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fb f82a 	bl	8000c4c <__addsf3>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	4b2d      	ldr	r3, [pc, #180]	; (8005cb4 <Batt_Protection_when_charge+0x55c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4619      	mov	r1, r3
 8005c02:	4610      	mov	r0, r2
 8005c04:	f7fb fac8 	bl	8001198 <__aeabi_fcmplt>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d018      	beq.n	8005c40 <Batt_Protection_when_charge+0x4e8>
			if((test_tim2%500)==0){
 8005c0e:	4b34      	ldr	r3, [pc, #208]	; (8005ce0 <Batt_Protection_when_charge+0x588>)
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	4b34      	ldr	r3, [pc, #208]	; (8005ce4 <Batt_Protection_when_charge+0x58c>)
 8005c14:	fb83 1302 	smull	r1, r3, r3, r2
 8005c18:	1159      	asrs	r1, r3, #5
 8005c1a:	17d3      	asrs	r3, r2, #31
 8005c1c:	1acb      	subs	r3, r1, r3
 8005c1e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005c22:	fb01 f303 	mul.w	r3, r1, r3
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f040 8096 	bne.w	8005d5a <Batt_Protection_when_charge+0x602>
				BUZZ_Toggle;
 8005c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c32:	4825      	ldr	r0, [pc, #148]	; (8005cc8 <Batt_Protection_when_charge+0x570>)
 8005c34:	f003 fbc7 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005c38:	4b29      	ldr	r3, [pc, #164]	; (8005ce0 <Batt_Protection_when_charge+0x588>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8005c3e:	e08c      	b.n	8005d5a <Batt_Protection_when_charge+0x602>
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set){
 8005c40:	4b22      	ldr	r3, [pc, #136]	; (8005ccc <Batt_Protection_when_charge+0x574>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fa ffff 	bl	8000c4c <__addsf3>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	461a      	mov	r2, r3
 8005c52:	4b18      	ldr	r3, [pc, #96]	; (8005cb4 <Batt_Protection_when_charge+0x55c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4619      	mov	r1, r3
 8005c58:	4610      	mov	r0, r2
 8005c5a:	f7fb fabb 	bl	80011d4 <__aeabi_fcmpgt>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d041      	beq.n	8005ce8 <Batt_Protection_when_charge+0x590>
 8005c64:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <Batt_Protection_when_charge+0x55c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a18      	ldr	r2, [pc, #96]	; (8005ccc <Batt_Protection_when_charge+0x574>)
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fb faa6 	bl	80011c0 <__aeabi_fcmpge>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d036      	beq.n	8005ce8 <Batt_Protection_when_charge+0x590>
			if((test_tim2%500)==0){
 8005c7a:	4b19      	ldr	r3, [pc, #100]	; (8005ce0 <Batt_Protection_when_charge+0x588>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <Batt_Protection_when_charge+0x58c>)
 8005c80:	fb83 1302 	smull	r1, r3, r3, r2
 8005c84:	1159      	asrs	r1, r3, #5
 8005c86:	17d3      	asrs	r3, r2, #31
 8005c88:	1acb      	subs	r3, r1, r3
 8005c8a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005c8e:	fb01 f303 	mul.w	r3, r1, r3
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d160      	bne.n	8005d5a <Batt_Protection_when_charge+0x602>
				BUZZ_Toggle;
 8005c98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c9c:	480a      	ldr	r0, [pc, #40]	; (8005cc8 <Batt_Protection_when_charge+0x570>)
 8005c9e:	f003 fb92 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005ca2:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <Batt_Protection_when_charge+0x588>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8005ca8:	e057      	b.n	8005d5a <Batt_Protection_when_charge+0x602>
 8005caa:	bf00      	nop
 8005cac:	20000018 	.word	0x20000018
 8005cb0:	40400000 	.word	0x40400000
 8005cb4:	2000030c 	.word	0x2000030c
 8005cb8:	20000390 	.word	0x20000390
 8005cbc:	20000280 	.word	0x20000280
 8005cc0:	20000344 	.word	0x20000344
 8005cc4:	20000278 	.word	0x20000278
 8005cc8:	40011000 	.word	0x40011000
 8005ccc:	2000001c 	.word	0x2000001c
 8005cd0:	41200000 	.word	0x41200000
 8005cd4:	20000300 	.word	0x20000300
 8005cd8:	2000030a 	.word	0x2000030a
 8005cdc:	40a00000 	.word	0x40a00000
 8005ce0:	20000378 	.word	0x20000378
 8005ce4:	10624dd3 	.word	0x10624dd3
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set){
 8005ce8:	4bb3      	ldr	r3, [pc, #716]	; (8005fb8 <Batt_Protection_when_charge+0x860>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4ab3      	ldr	r2, [pc, #716]	; (8005fbc <Batt_Protection_when_charge+0x864>)
 8005cee:	6812      	ldr	r2, [r2, #0]
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fb fa50 	bl	8001198 <__aeabi_fcmplt>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d121      	bne.n	8005d42 <Batt_Protection_when_charge+0x5ea>
 8005cfe:	4bb0      	ldr	r3, [pc, #704]	; (8005fc0 <Batt_Protection_when_charge+0x868>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4aae      	ldr	r2, [pc, #696]	; (8005fbc <Batt_Protection_when_charge+0x864>)
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	4611      	mov	r1, r2
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fb fa45 	bl	8001198 <__aeabi_fcmplt>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d116      	bne.n	8005d42 <Batt_Protection_when_charge+0x5ea>
 8005d14:	4bab      	ldr	r3, [pc, #684]	; (8005fc4 <Batt_Protection_when_charge+0x86c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4aa8      	ldr	r2, [pc, #672]	; (8005fbc <Batt_Protection_when_charge+0x864>)
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fb fa3a 	bl	8001198 <__aeabi_fcmplt>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10b      	bne.n	8005d42 <Batt_Protection_when_charge+0x5ea>
 8005d2a:	4ba7      	ldr	r3, [pc, #668]	; (8005fc8 <Batt_Protection_when_charge+0x870>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4aa3      	ldr	r2, [pc, #652]	; (8005fbc <Batt_Protection_when_charge+0x864>)
 8005d30:	6812      	ldr	r2, [r2, #0]
 8005d32:	4611      	mov	r1, r2
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7fb fa2f 	bl	8001198 <__aeabi_fcmplt>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d100      	bne.n	8005d42 <Batt_Protection_when_charge+0x5ea>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8005d40:	e1db      	b.n	80060fa <Batt_Protection_when_charge+0x9a2>
			Batt_Open_Mode();
 8005d42:	f7fb fbfb 	bl	800153c <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 8005d46:	4ba1      	ldr	r3, [pc, #644]	; (8005fcc <Batt_Protection_when_charge+0x874>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d52:	489f      	ldr	r0, [pc, #636]	; (8005fd0 <Batt_Protection_when_charge+0x878>)
 8005d54:	f003 fb1f 	bl	8009396 <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8005d58:	e1cf      	b.n	80060fa <Batt_Protection_when_charge+0x9a2>
 8005d5a:	e1ce      	b.n	80060fa <Batt_Protection_when_charge+0x9a2>
	else if((fabs(IBATT)-I_Over_Set_Charge)>0 && flag_trip_overcurrentcharge==OFF) {  //Indikasi terjadi Over Current
 8005d5c:	4b9d      	ldr	r3, [pc, #628]	; (8005fd4 <Batt_Protection_when_charge+0x87c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fa fbcb 	bl	8000500 <__aeabi_f2d>
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	460d      	mov	r5, r1
 8005d6e:	4b9a      	ldr	r3, [pc, #616]	; (8005fd8 <Batt_Protection_when_charge+0x880>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fa fbc4 	bl	8000500 <__aeabi_f2d>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	4629      	mov	r1, r5
 8005d80:	f7fa fa5e 	bl	8000240 <__aeabi_dsub>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4610      	mov	r0, r2
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	f7fa fe9c 	bl	8000ad0 <__aeabi_dcmpgt>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 813f 	beq.w	800601e <Batt_Protection_when_charge+0x8c6>
 8005da0:	4b8e      	ldr	r3, [pc, #568]	; (8005fdc <Batt_Protection_when_charge+0x884>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f040 813a 	bne.w	800601e <Batt_Protection_when_charge+0x8c6>
		fault_code=10;
 8005daa:	4b8d      	ldr	r3, [pc, #564]	; (8005fe0 <Batt_Protection_when_charge+0x888>)
 8005dac:	220a      	movs	r2, #10
 8005dae:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=8/(((IBATT/6.9)*(IBATT/6.9))-1);
 8005db0:	4b88      	ldr	r3, [pc, #544]	; (8005fd4 <Batt_Protection_when_charge+0x87c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fa fba3 	bl	8000500 <__aeabi_f2d>
 8005dba:	a37b      	add	r3, pc, #492	; (adr r3, 8005fa8 <Batt_Protection_when_charge+0x850>)
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f7fa fd20 	bl	8000804 <__aeabi_ddiv>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4614      	mov	r4, r2
 8005dca:	461d      	mov	r5, r3
 8005dcc:	4b81      	ldr	r3, [pc, #516]	; (8005fd4 <Batt_Protection_when_charge+0x87c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fa fb95 	bl	8000500 <__aeabi_f2d>
 8005dd6:	a374      	add	r3, pc, #464	; (adr r3, 8005fa8 <Batt_Protection_when_charge+0x850>)
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f7fa fd12 	bl	8000804 <__aeabi_ddiv>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4620      	mov	r0, r4
 8005de6:	4629      	mov	r1, r5
 8005de8:	f7fa fbe2 	bl	80005b0 <__aeabi_dmul>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4610      	mov	r0, r2
 8005df2:	4619      	mov	r1, r3
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	4b7a      	ldr	r3, [pc, #488]	; (8005fe4 <Batt_Protection_when_charge+0x88c>)
 8005dfa:	f7fa fa21 	bl	8000240 <__aeabi_dsub>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	f04f 0000 	mov.w	r0, #0
 8005e06:	4978      	ldr	r1, [pc, #480]	; (8005fe8 <Batt_Protection_when_charge+0x890>)
 8005e08:	f7fa fcfc 	bl	8000804 <__aeabi_ddiv>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4610      	mov	r0, r2
 8005e12:	4619      	mov	r1, r3
 8005e14:	f7fa fec4 	bl	8000ba0 <__aeabi_d2f>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	4a74      	ldr	r2, [pc, #464]	; (8005fec <Batt_Protection_when_charge+0x894>)
 8005e1c:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle+=0.01;
 8005e1e:	4b74      	ldr	r3, [pc, #464]	; (8005ff0 <Batt_Protection_when_charge+0x898>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fa fb6c 	bl	8000500 <__aeabi_f2d>
 8005e28:	a361      	add	r3, pc, #388	; (adr r3, 8005fb0 <Batt_Protection_when_charge+0x858>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	f7fa fa09 	bl	8000244 <__adddf3>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4610      	mov	r0, r2
 8005e38:	4619      	mov	r1, r3
 8005e3a:	f7fa feb1 	bl	8000ba0 <__aeabi_d2f>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	4a6b      	ldr	r2, [pc, #428]	; (8005ff0 <Batt_Protection_when_charge+0x898>)
 8005e42:	6013      	str	r3, [r2, #0]
		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentcharge==OFF) {
 8005e44:	4b6a      	ldr	r3, [pc, #424]	; (8005ff0 <Batt_Protection_when_charge+0x898>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a68      	ldr	r2, [pc, #416]	; (8005fec <Batt_Protection_when_charge+0x894>)
 8005e4a:	6812      	ldr	r2, [r2, #0]
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fb f9c0 	bl	80011d4 <__aeabi_fcmpgt>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d012      	beq.n	8005e80 <Batt_Protection_when_charge+0x728>
 8005e5a:	4b60      	ldr	r3, [pc, #384]	; (8005fdc <Batt_Protection_when_charge+0x884>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10e      	bne.n	8005e80 <Batt_Protection_when_charge+0x728>
			Batt_Open_Mode();
 8005e62:	f7fb fb6b 	bl	800153c <Batt_Open_Mode>
			T_I_Over_trip_cycle=T_I_Over_trip;
 8005e66:	4b61      	ldr	r3, [pc, #388]	; (8005fec <Batt_Protection_when_charge+0x894>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a61      	ldr	r2, [pc, #388]	; (8005ff0 <Batt_Protection_when_charge+0x898>)
 8005e6c:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentcharge=ON;
 8005e6e:	4b5b      	ldr	r3, [pc, #364]	; (8005fdc <Batt_Protection_when_charge+0x884>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005e74:	2200      	movs	r2, #0
 8005e76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e7a:	4855      	ldr	r0, [pc, #340]	; (8005fd0 <Batt_Protection_when_charge+0x878>)
 8005e7c:	f003 fa8b 	bl	8009396 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentcharge==OFF) {
 8005e80:	4b56      	ldr	r3, [pc, #344]	; (8005fdc <Batt_Protection_when_charge+0x884>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f040 8137 	bne.w	80060f8 <Batt_Protection_when_charge+0x9a0>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 8005e8a:	4b58      	ldr	r3, [pc, #352]	; (8005fec <Batt_Protection_when_charge+0x894>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a58      	ldr	r2, [pc, #352]	; (8005ff0 <Batt_Protection_when_charge+0x898>)
 8005e90:	6812      	ldr	r2, [r2, #0]
 8005e92:	4611      	mov	r1, r2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fa fed7 	bl	8000c48 <__aeabi_fsub>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	4955      	ldr	r1, [pc, #340]	; (8005ff4 <Batt_Protection_when_charge+0x89c>)
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fb f998 	bl	80011d4 <__aeabi_fcmpgt>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d018      	beq.n	8005edc <Batt_Protection_when_charge+0x784>
				if((test_tim2%1000)==0) {
 8005eaa:	4b53      	ldr	r3, [pc, #332]	; (8005ff8 <Batt_Protection_when_charge+0x8a0>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	4b53      	ldr	r3, [pc, #332]	; (8005ffc <Batt_Protection_when_charge+0x8a4>)
 8005eb0:	fb83 1302 	smull	r1, r3, r3, r2
 8005eb4:	1199      	asrs	r1, r3, #6
 8005eb6:	17d3      	asrs	r3, r2, #31
 8005eb8:	1acb      	subs	r3, r1, r3
 8005eba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005ebe:	fb01 f303 	mul.w	r3, r1, r3
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f040 8117 	bne.w	80060f8 <Batt_Protection_when_charge+0x9a0>
					BUZZ_Toggle;
 8005eca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ece:	4840      	ldr	r0, [pc, #256]	; (8005fd0 <Batt_Protection_when_charge+0x878>)
 8005ed0:	f003 fa79 	bl	80093c6 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005ed4:	4b48      	ldr	r3, [pc, #288]	; (8005ff8 <Batt_Protection_when_charge+0x8a0>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 8005eda:	e10d      	b.n	80060f8 <Batt_Protection_when_charge+0x9a0>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10) {
 8005edc:	4b43      	ldr	r3, [pc, #268]	; (8005fec <Batt_Protection_when_charge+0x894>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a43      	ldr	r2, [pc, #268]	; (8005ff0 <Batt_Protection_when_charge+0x898>)
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fa feae 	bl	8000c48 <__aeabi_fsub>
 8005eec:	4603      	mov	r3, r0
 8005eee:	4944      	ldr	r1, [pc, #272]	; (8006000 <Batt_Protection_when_charge+0x8a8>)
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fb f96f 	bl	80011d4 <__aeabi_fcmpgt>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d017      	beq.n	8005f2c <Batt_Protection_when_charge+0x7d4>
				if((test_tim2%100)==0) {
 8005efc:	4b3e      	ldr	r3, [pc, #248]	; (8005ff8 <Batt_Protection_when_charge+0x8a0>)
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	4b40      	ldr	r3, [pc, #256]	; (8006004 <Batt_Protection_when_charge+0x8ac>)
 8005f02:	fb83 1302 	smull	r1, r3, r3, r2
 8005f06:	1159      	asrs	r1, r3, #5
 8005f08:	17d3      	asrs	r3, r2, #31
 8005f0a:	1acb      	subs	r3, r1, r3
 8005f0c:	2164      	movs	r1, #100	; 0x64
 8005f0e:	fb01 f303 	mul.w	r3, r1, r3
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f040 80ef 	bne.w	80060f8 <Batt_Protection_when_charge+0x9a0>
					BUZZ_Toggle;
 8005f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f1e:	482c      	ldr	r0, [pc, #176]	; (8005fd0 <Batt_Protection_when_charge+0x878>)
 8005f20:	f003 fa51 	bl	80093c6 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005f24:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <Batt_Protection_when_charge+0x8a0>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 8005f2a:	e0e5      	b.n	80060f8 <Batt_Protection_when_charge+0x9a0>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>3) {
 8005f2c:	4b2f      	ldr	r3, [pc, #188]	; (8005fec <Batt_Protection_when_charge+0x894>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a2f      	ldr	r2, [pc, #188]	; (8005ff0 <Batt_Protection_when_charge+0x898>)
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	4611      	mov	r1, r2
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fa fe86 	bl	8000c48 <__aeabi_fsub>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	4932      	ldr	r1, [pc, #200]	; (8006008 <Batt_Protection_when_charge+0x8b0>)
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fb f947 	bl	80011d4 <__aeabi_fcmpgt>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d018      	beq.n	8005f7e <Batt_Protection_when_charge+0x826>
				if((test_tim2%10)==0) {
 8005f4c:	4b2a      	ldr	r3, [pc, #168]	; (8005ff8 <Batt_Protection_when_charge+0x8a0>)
 8005f4e:	6819      	ldr	r1, [r3, #0]
 8005f50:	4b2e      	ldr	r3, [pc, #184]	; (800600c <Batt_Protection_when_charge+0x8b4>)
 8005f52:	fb83 2301 	smull	r2, r3, r3, r1
 8005f56:	109a      	asrs	r2, r3, #2
 8005f58:	17cb      	asrs	r3, r1, #31
 8005f5a:	1ad2      	subs	r2, r2, r3
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	1aca      	subs	r2, r1, r3
 8005f66:	2a00      	cmp	r2, #0
 8005f68:	f040 80c6 	bne.w	80060f8 <Batt_Protection_when_charge+0x9a0>
					BUZZ_Toggle;
 8005f6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f70:	4817      	ldr	r0, [pc, #92]	; (8005fd0 <Batt_Protection_when_charge+0x878>)
 8005f72:	f003 fa28 	bl	80093c6 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005f76:	4b20      	ldr	r3, [pc, #128]	; (8005ff8 <Batt_Protection_when_charge+0x8a0>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 8005f7c:	e0bc      	b.n	80060f8 <Batt_Protection_when_charge+0x9a0>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1) {
 8005f7e:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <Batt_Protection_when_charge+0x894>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1b      	ldr	r2, [pc, #108]	; (8005ff0 <Batt_Protection_when_charge+0x898>)
 8005f84:	6812      	ldr	r2, [r2, #0]
 8005f86:	4611      	mov	r1, r2
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fa fe5d 	bl	8000c48 <__aeabi_fsub>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fb f91d 	bl	80011d4 <__aeabi_fcmpgt>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d137      	bne.n	8006010 <Batt_Protection_when_charge+0x8b8>
		if(flag_trip_overcurrentcharge==OFF) {
 8005fa0:	e0aa      	b.n	80060f8 <Batt_Protection_when_charge+0x9a0>
 8005fa2:	bf00      	nop
 8005fa4:	f3af 8000 	nop.w
 8005fa8:	9999999a 	.word	0x9999999a
 8005fac:	401b9999 	.word	0x401b9999
 8005fb0:	47ae147b 	.word	0x47ae147b
 8005fb4:	3f847ae1 	.word	0x3f847ae1
 8005fb8:	2000030c 	.word	0x2000030c
 8005fbc:	2000001c 	.word	0x2000001c
 8005fc0:	20000390 	.word	0x20000390
 8005fc4:	20000280 	.word	0x20000280
 8005fc8:	20000344 	.word	0x20000344
 8005fcc:	20000300 	.word	0x20000300
 8005fd0:	40011000 	.word	0x40011000
 8005fd4:	200002f8 	.word	0x200002f8
 8005fd8:	20000010 	.word	0x20000010
 8005fdc:	20000332 	.word	0x20000332
 8005fe0:	2000030a 	.word	0x2000030a
 8005fe4:	3ff00000 	.word	0x3ff00000
 8005fe8:	40200000 	.word	0x40200000
 8005fec:	20000268 	.word	0x20000268
 8005ff0:	2000034c 	.word	0x2000034c
 8005ff4:	41700000 	.word	0x41700000
 8005ff8:	20000378 	.word	0x20000378
 8005ffc:	10624dd3 	.word	0x10624dd3
 8006000:	41200000 	.word	0x41200000
 8006004:	51eb851f 	.word	0x51eb851f
 8006008:	40400000 	.word	0x40400000
 800600c:	66666667 	.word	0x66666667
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8006010:	2201      	movs	r2, #1
 8006012:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006016:	483c      	ldr	r0, [pc, #240]	; (8006108 <Batt_Protection_when_charge+0x9b0>)
 8006018:	f003 f9bd 	bl	8009396 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentcharge==OFF) {
 800601c:	e06c      	b.n	80060f8 <Batt_Protection_when_charge+0x9a0>
	else if(VBATT>V_Over_Set) {
 800601e:	4b3b      	ldr	r3, [pc, #236]	; (800610c <Batt_Protection_when_charge+0x9b4>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a3b      	ldr	r2, [pc, #236]	; (8006110 <Batt_Protection_when_charge+0x9b8>)
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	4611      	mov	r1, r2
 8006028:	4618      	mov	r0, r3
 800602a:	f7fb f8d3 	bl	80011d4 <__aeabi_fcmpgt>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d008      	beq.n	8006046 <Batt_Protection_when_charge+0x8ee>
		fault_code=11;
 8006034:	4b37      	ldr	r3, [pc, #220]	; (8006114 <Batt_Protection_when_charge+0x9bc>)
 8006036:	220b      	movs	r2, #11
 8006038:	701a      	strb	r2, [r3, #0]
		flag_trip_overvoltage=ON;
 800603a:	4b37      	ldr	r3, [pc, #220]	; (8006118 <Batt_Protection_when_charge+0x9c0>)
 800603c:	2201      	movs	r2, #1
 800603e:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8006040:	f7fb fa7c 	bl	800153c <Batt_Open_Mode>
}
 8006044:	e059      	b.n	80060fa <Batt_Protection_when_charge+0x9a2>
		if(fault_code!=0){
 8006046:	4b33      	ldr	r3, [pc, #204]	; (8006114 <Batt_Protection_when_charge+0x9bc>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <Batt_Protection_when_charge+0x8fe>
			last_fault_code=fault_code;
 800604e:	4b31      	ldr	r3, [pc, #196]	; (8006114 <Batt_Protection_when_charge+0x9bc>)
 8006050:	781a      	ldrb	r2, [r3, #0]
 8006052:	4b32      	ldr	r3, [pc, #200]	; (800611c <Batt_Protection_when_charge+0x9c4>)
 8006054:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 8006056:	4b2f      	ldr	r3, [pc, #188]	; (8006114 <Batt_Protection_when_charge+0x9bc>)
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
		T_Under_trip=0;
 800605c:	4b30      	ldr	r3, [pc, #192]	; (8006120 <Batt_Protection_when_charge+0x9c8>)
 800605e:	f04f 0200 	mov.w	r2, #0
 8006062:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 8006064:	4b2f      	ldr	r3, [pc, #188]	; (8006124 <Batt_Protection_when_charge+0x9cc>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4618      	mov	r0, r3
 800606a:	f7fa fa49 	bl	8000500 <__aeabi_f2d>
 800606e:	a324      	add	r3, pc, #144	; (adr r3, 8006100 <Batt_Protection_when_charge+0x9a8>)
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	f7fa f8e4 	bl	8000240 <__aeabi_dsub>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4610      	mov	r0, r2
 800607e:	4619      	mov	r1, r3
 8006080:	f7fa fd8e 	bl	8000ba0 <__aeabi_d2f>
 8006084:	4603      	mov	r3, r0
 8006086:	4a27      	ldr	r2, [pc, #156]	; (8006124 <Batt_Protection_when_charge+0x9cc>)
 8006088:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 800608a:	4b27      	ldr	r3, [pc, #156]	; (8006128 <Batt_Protection_when_charge+0x9d0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f7fa fa36 	bl	8000500 <__aeabi_f2d>
 8006094:	a31a      	add	r3, pc, #104	; (adr r3, 8006100 <Batt_Protection_when_charge+0x9a8>)
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	f7fa f8d1 	bl	8000240 <__aeabi_dsub>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4610      	mov	r0, r2
 80060a4:	4619      	mov	r1, r3
 80060a6:	f7fa fd7b 	bl	8000ba0 <__aeabi_d2f>
 80060aa:	4603      	mov	r3, r0
 80060ac:	4a1e      	ldr	r2, [pc, #120]	; (8006128 <Batt_Protection_when_charge+0x9d0>)
 80060ae:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80060b0:	2200      	movs	r2, #0
 80060b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060b6:	4814      	ldr	r0, [pc, #80]	; (8006108 <Batt_Protection_when_charge+0x9b0>)
 80060b8:	f003 f96d 	bl	8009396 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
 80060bc:	4b19      	ldr	r3, [pc, #100]	; (8006124 <Batt_Protection_when_charge+0x9cc>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f04f 0100 	mov.w	r1, #0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fb f867 	bl	8001198 <__aeabi_fcmplt>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <Batt_Protection_when_charge+0x980>
			T_trip_cycle=0;
 80060d0:	4b14      	ldr	r3, [pc, #80]	; (8006124 <Batt_Protection_when_charge+0x9cc>)
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle<0)
 80060d8:	4b13      	ldr	r3, [pc, #76]	; (8006128 <Batt_Protection_when_charge+0x9d0>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f04f 0100 	mov.w	r1, #0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fb f859 	bl	8001198 <__aeabi_fcmplt>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d100      	bne.n	80060ee <Batt_Protection_when_charge+0x996>
}
 80060ec:	e005      	b.n	80060fa <Batt_Protection_when_charge+0x9a2>
			T_I_Over_trip_cycle=0;
 80060ee:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <Batt_Protection_when_charge+0x9d0>)
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
}
 80060f6:	e000      	b.n	80060fa <Batt_Protection_when_charge+0x9a2>
		if(flag_trip_overcurrentcharge==OFF) {
 80060f8:	bf00      	nop
}
 80060fa:	bf00      	nop
 80060fc:	bdb0      	pop	{r4, r5, r7, pc}
 80060fe:	bf00      	nop
 8006100:	d2f1a9fc 	.word	0xd2f1a9fc
 8006104:	3f50624d 	.word	0x3f50624d
 8006108:	40011000 	.word	0x40011000
 800610c:	2000027c 	.word	0x2000027c
 8006110:	20000028 	.word	0x20000028
 8006114:	2000030a 	.word	0x2000030a
 8006118:	2000038c 	.word	0x2000038c
 800611c:	20000385 	.word	0x20000385
 8006120:	20000870 	.word	0x20000870
 8006124:	2000087c 	.word	0x2000087c
 8006128:	2000034c 	.word	0x2000034c
 800612c:	00000000 	.word	0x00000000

08006130 <Batt_Protection_when_chargedischarge>:


void Batt_Protection_when_chargedischarge(void) {
 8006130:	b5b0      	push	{r4, r5, r7, lr}
 8006132:	af00      	add	r7, sp, #0
	//***************** Short Circuit Protection ***********************************//
	if(IBATT > (VBATT)) {
 8006134:	4b5c      	ldr	r3, [pc, #368]	; (80062a8 <Batt_Protection_when_chargedischarge+0x178>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a5c      	ldr	r2, [pc, #368]	; (80062ac <Batt_Protection_when_chargedischarge+0x17c>)
 800613a:	6812      	ldr	r2, [r2, #0]
 800613c:	4611      	mov	r1, r2
 800613e:	4618      	mov	r0, r3
 8006140:	f7fb f848 	bl	80011d4 <__aeabi_fcmpgt>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d017      	beq.n	800617a <Batt_Protection_when_chargedischarge+0x4a>
		Isc = IBATT;
 800614a:	4b57      	ldr	r3, [pc, #348]	; (80062a8 <Batt_Protection_when_chargedischarge+0x178>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a58      	ldr	r2, [pc, #352]	; (80062b0 <Batt_Protection_when_chargedischarge+0x180>)
 8006150:	6013      	str	r3, [r2, #0]
		Vsc = VBATT;
 8006152:	4b56      	ldr	r3, [pc, #344]	; (80062ac <Batt_Protection_when_chargedischarge+0x17c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a57      	ldr	r2, [pc, #348]	; (80062b4 <Batt_Protection_when_chargedischarge+0x184>)
 8006158:	6013      	str	r3, [r2, #0]
		fault_code = 12;
 800615a:	4b57      	ldr	r3, [pc, #348]	; (80062b8 <Batt_Protection_when_chargedischarge+0x188>)
 800615c:	220c      	movs	r2, #12
 800615e:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8006160:	f7fb f9ec 	bl	800153c <Batt_Open_Mode>
		flag_trip_shortcircuit = ON;
 8006164:	4b55      	ldr	r3, [pc, #340]	; (80062bc <Batt_Protection_when_chargedischarge+0x18c>)
 8006166:	2201      	movs	r2, #1
 8006168:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800616a:	2200      	movs	r2, #0
 800616c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006170:	4853      	ldr	r0, [pc, #332]	; (80062c0 <Batt_Protection_when_chargedischarge+0x190>)
 8006172:	f003 f910 	bl	8009396 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle<0)
			T_I_Over_trip_cycle=0;
	}
}
 8006176:	f000 be25 	b.w	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
	else if(Pack_SOC >= SOC_Over_Set-10 && flag_trip_SOCOverCharge==OFF) {
 800617a:	4b52      	ldr	r3, [pc, #328]	; (80062c4 <Batt_Protection_when_chargedischarge+0x194>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4952      	ldr	r1, [pc, #328]	; (80062c8 <Batt_Protection_when_chargedischarge+0x198>)
 8006180:	4618      	mov	r0, r3
 8006182:	f7fa fd61 	bl	8000c48 <__aeabi_fsub>
 8006186:	4603      	mov	r3, r0
 8006188:	461a      	mov	r2, r3
 800618a:	4b50      	ldr	r3, [pc, #320]	; (80062cc <Batt_Protection_when_chargedischarge+0x19c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4619      	mov	r1, r3
 8006190:	4610      	mov	r0, r2
 8006192:	f7fb f80b 	bl	80011ac <__aeabi_fcmple>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01f      	beq.n	80061dc <Batt_Protection_when_chargedischarge+0xac>
 800619c:	4b4c      	ldr	r3, [pc, #304]	; (80062d0 <Batt_Protection_when_chargedischarge+0x1a0>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d11b      	bne.n	80061dc <Batt_Protection_when_chargedischarge+0xac>
		fault_code=7;
 80061a4:	4b44      	ldr	r3, [pc, #272]	; (80062b8 <Batt_Protection_when_chargedischarge+0x188>)
 80061a6:	2207      	movs	r2, #7
 80061a8:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC>SOC_Over_Set){
 80061aa:	4b48      	ldr	r3, [pc, #288]	; (80062cc <Batt_Protection_when_chargedischarge+0x19c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a45      	ldr	r2, [pc, #276]	; (80062c4 <Batt_Protection_when_chargedischarge+0x194>)
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	4611      	mov	r1, r2
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fb f80d 	bl	80011d4 <__aeabi_fcmpgt>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 8601 	beq.w	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
			Batt_Open_Mode();
 80061c2:	f7fb f9bb 	bl	800153c <Batt_Open_Mode>
			flag_trip_SOCOverCharge=ON;
 80061c6:	4b42      	ldr	r3, [pc, #264]	; (80062d0 <Batt_Protection_when_chargedischarge+0x1a0>)
 80061c8:	2201      	movs	r2, #1
 80061ca:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80061cc:	2200      	movs	r2, #0
 80061ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061d2:	483b      	ldr	r0, [pc, #236]	; (80062c0 <Batt_Protection_when_chargedischarge+0x190>)
 80061d4:	f003 f8df 	bl	8009396 <HAL_GPIO_WritePin>
		if(Pack_SOC>SOC_Over_Set){
 80061d8:	f000 bdf4 	b.w	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
		else if(VBATT<V_Under_Set && flag_trip_undervoltage==OFF ) {   //Indikasi terjadi Undervoltage
 80061dc:	4b33      	ldr	r3, [pc, #204]	; (80062ac <Batt_Protection_when_chargedischarge+0x17c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a3c      	ldr	r2, [pc, #240]	; (80062d4 <Batt_Protection_when_chargedischarge+0x1a4>)
 80061e2:	6812      	ldr	r2, [r2, #0]
 80061e4:	4611      	mov	r1, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fa ffd6 	bl	8001198 <__aeabi_fcmplt>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d07c      	beq.n	80062ec <Batt_Protection_when_chargedischarge+0x1bc>
 80061f2:	4b39      	ldr	r3, [pc, #228]	; (80062d8 <Batt_Protection_when_chargedischarge+0x1a8>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d178      	bne.n	80062ec <Batt_Protection_when_chargedischarge+0x1bc>
			fault_code=1;
 80061fa:	4b2f      	ldr	r3, [pc, #188]	; (80062b8 <Batt_Protection_when_chargedischarge+0x188>)
 80061fc:	2201      	movs	r2, #1
 80061fe:	701a      	strb	r2, [r3, #0]
			T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 8006200:	4b36      	ldr	r3, [pc, #216]	; (80062dc <Batt_Protection_when_chargedischarge+0x1ac>)
 8006202:	681c      	ldr	r4, [r3, #0]
 8006204:	4b29      	ldr	r3, [pc, #164]	; (80062ac <Batt_Protection_when_chargedischarge+0x17c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a32      	ldr	r2, [pc, #200]	; (80062d4 <Batt_Protection_when_chargedischarge+0x1a4>)
 800620a:	6812      	ldr	r2, [r2, #0]
 800620c:	4611      	mov	r1, r2
 800620e:	4618      	mov	r0, r3
 8006210:	f7fa fed8 	bl	8000fc4 <__aeabi_fdiv>
 8006214:	4603      	mov	r3, r0
 8006216:	4619      	mov	r1, r3
 8006218:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800621c:	f7fa fd14 	bl	8000c48 <__aeabi_fsub>
 8006220:	4603      	mov	r3, r0
 8006222:	4619      	mov	r1, r3
 8006224:	4620      	mov	r0, r4
 8006226:	f7fa fecd 	bl	8000fc4 <__aeabi_fdiv>
 800622a:	4603      	mov	r3, r0
 800622c:	461a      	mov	r2, r3
 800622e:	4b2c      	ldr	r3, [pc, #176]	; (80062e0 <Batt_Protection_when_chargedischarge+0x1b0>)
 8006230:	601a      	str	r2, [r3, #0]
			T_trip_cycle+=0.001;
 8006232:	4b2c      	ldr	r3, [pc, #176]	; (80062e4 <Batt_Protection_when_chargedischarge+0x1b4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4618      	mov	r0, r3
 8006238:	f7fa f962 	bl	8000500 <__aeabi_f2d>
 800623c:	a318      	add	r3, pc, #96	; (adr r3, 80062a0 <Batt_Protection_when_chargedischarge+0x170>)
 800623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006242:	f7f9 ffff 	bl	8000244 <__adddf3>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4610      	mov	r0, r2
 800624c:	4619      	mov	r1, r3
 800624e:	f7fa fca7 	bl	8000ba0 <__aeabi_d2f>
 8006252:	4603      	mov	r3, r0
 8006254:	4a23      	ldr	r2, [pc, #140]	; (80062e4 <Batt_Protection_when_chargedischarge+0x1b4>)
 8006256:	6013      	str	r3, [r2, #0]
			if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8006258:	4b22      	ldr	r3, [pc, #136]	; (80062e4 <Batt_Protection_when_chargedischarge+0x1b4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a20      	ldr	r2, [pc, #128]	; (80062e0 <Batt_Protection_when_chargedischarge+0x1b0>)
 800625e:	6812      	ldr	r2, [r2, #0]
 8006260:	4611      	mov	r1, r2
 8006262:	4618      	mov	r0, r3
 8006264:	f7fa ffb6 	bl	80011d4 <__aeabi_fcmpgt>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 85a7 	beq.w	8006dbe <Batt_Protection_when_chargedischarge+0xc8e>
 8006270:	4b19      	ldr	r3, [pc, #100]	; (80062d8 <Batt_Protection_when_chargedischarge+0x1a8>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	f040 85a2 	bne.w	8006dbe <Batt_Protection_when_chargedischarge+0xc8e>
				Batt_Open_Mode();
 800627a:	f7fb f95f 	bl	800153c <Batt_Open_Mode>
				T_trip_cycle=T_Under_trip;
 800627e:	4b18      	ldr	r3, [pc, #96]	; (80062e0 <Batt_Protection_when_chargedischarge+0x1b0>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a18      	ldr	r2, [pc, #96]	; (80062e4 <Batt_Protection_when_chargedischarge+0x1b4>)
 8006284:	6013      	str	r3, [r2, #0]
				flag_trip_undervoltage=ON;
 8006286:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <Batt_Protection_when_chargedischarge+0x1a8>)
 8006288:	2201      	movs	r2, #1
 800628a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 800628c:	2200      	movs	r2, #0
 800628e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006292:	4815      	ldr	r0, [pc, #84]	; (80062e8 <Batt_Protection_when_chargedischarge+0x1b8>)
 8006294:	f003 f87f 	bl	8009396 <HAL_GPIO_WritePin>
			if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8006298:	f000 bd91 	b.w	8006dbe <Batt_Protection_when_chargedischarge+0xc8e>
 800629c:	f3af 8000 	nop.w
 80062a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80062a4:	3f50624d 	.word	0x3f50624d
 80062a8:	200002f8 	.word	0x200002f8
 80062ac:	2000027c 	.word	0x2000027c
 80062b0:	200002d8 	.word	0x200002d8
 80062b4:	20000324 	.word	0x20000324
 80062b8:	2000030a 	.word	0x2000030a
 80062bc:	2000025c 	.word	0x2000025c
 80062c0:	40011000 	.word	0x40011000
 80062c4:	20000020 	.word	0x20000020
 80062c8:	41200000 	.word	0x41200000
 80062cc:	20000388 	.word	0x20000388
 80062d0:	2000025a 	.word	0x2000025a
 80062d4:	20000024 	.word	0x20000024
 80062d8:	20000301 	.word	0x20000301
 80062dc:	20000030 	.word	0x20000030
 80062e0:	20000870 	.word	0x20000870
 80062e4:	2000087c 	.word	0x2000087c
 80062e8:	40010800 	.word	0x40010800
		else if((fabs(IBATT)-I_Over_Set_Charge)>0 && flag_trip_overcurrentcharge==OFF) {  //Indikasi terjadi Over Current
 80062ec:	4b9c      	ldr	r3, [pc, #624]	; (8006560 <Batt_Protection_when_chargedischarge+0x430>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fa f903 	bl	8000500 <__aeabi_f2d>
 80062fa:	4604      	mov	r4, r0
 80062fc:	460d      	mov	r5, r1
 80062fe:	4b99      	ldr	r3, [pc, #612]	; (8006564 <Batt_Protection_when_chargedischarge+0x434>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f7fa f8fc 	bl	8000500 <__aeabi_f2d>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4620      	mov	r0, r4
 800630e:	4629      	mov	r1, r5
 8006310:	f7f9 ff96 	bl	8000240 <__aeabi_dsub>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4610      	mov	r0, r2
 800631a:	4619      	mov	r1, r3
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	f7fa fbd4 	bl	8000ad0 <__aeabi_dcmpgt>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 8138 	beq.w	80065a0 <Batt_Protection_when_chargedischarge+0x470>
 8006330:	4b8d      	ldr	r3, [pc, #564]	; (8006568 <Batt_Protection_when_chargedischarge+0x438>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	f040 8133 	bne.w	80065a0 <Batt_Protection_when_chargedischarge+0x470>
			fault_code=10;
 800633a:	4b8c      	ldr	r3, [pc, #560]	; (800656c <Batt_Protection_when_chargedischarge+0x43c>)
 800633c:	220a      	movs	r2, #10
 800633e:	701a      	strb	r2, [r3, #0]
			T_I_Over_trip=8/(((IBATT/6.9)*(IBATT/6.9))-1);
 8006340:	4b87      	ldr	r3, [pc, #540]	; (8006560 <Batt_Protection_when_chargedischarge+0x430>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f7fa f8db 	bl	8000500 <__aeabi_f2d>
 800634a:	a381      	add	r3, pc, #516	; (adr r3, 8006550 <Batt_Protection_when_chargedischarge+0x420>)
 800634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006350:	f7fa fa58 	bl	8000804 <__aeabi_ddiv>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4614      	mov	r4, r2
 800635a:	461d      	mov	r5, r3
 800635c:	4b80      	ldr	r3, [pc, #512]	; (8006560 <Batt_Protection_when_chargedischarge+0x430>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4618      	mov	r0, r3
 8006362:	f7fa f8cd 	bl	8000500 <__aeabi_f2d>
 8006366:	a37a      	add	r3, pc, #488	; (adr r3, 8006550 <Batt_Protection_when_chargedischarge+0x420>)
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	f7fa fa4a 	bl	8000804 <__aeabi_ddiv>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	4620      	mov	r0, r4
 8006376:	4629      	mov	r1, r5
 8006378:	f7fa f91a 	bl	80005b0 <__aeabi_dmul>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4610      	mov	r0, r2
 8006382:	4619      	mov	r1, r3
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	4b79      	ldr	r3, [pc, #484]	; (8006570 <Batt_Protection_when_chargedischarge+0x440>)
 800638a:	f7f9 ff59 	bl	8000240 <__aeabi_dsub>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	f04f 0000 	mov.w	r0, #0
 8006396:	4977      	ldr	r1, [pc, #476]	; (8006574 <Batt_Protection_when_chargedischarge+0x444>)
 8006398:	f7fa fa34 	bl	8000804 <__aeabi_ddiv>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4610      	mov	r0, r2
 80063a2:	4619      	mov	r1, r3
 80063a4:	f7fa fbfc 	bl	8000ba0 <__aeabi_d2f>
 80063a8:	4603      	mov	r3, r0
 80063aa:	4a73      	ldr	r2, [pc, #460]	; (8006578 <Batt_Protection_when_chargedischarge+0x448>)
 80063ac:	6013      	str	r3, [r2, #0]
			T_I_Over_trip_cycle+=0.01;
 80063ae:	4b73      	ldr	r3, [pc, #460]	; (800657c <Batt_Protection_when_chargedischarge+0x44c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fa f8a4 	bl	8000500 <__aeabi_f2d>
 80063b8:	a367      	add	r3, pc, #412	; (adr r3, 8006558 <Batt_Protection_when_chargedischarge+0x428>)
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f7f9 ff41 	bl	8000244 <__adddf3>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4610      	mov	r0, r2
 80063c8:	4619      	mov	r1, r3
 80063ca:	f7fa fbe9 	bl	8000ba0 <__aeabi_d2f>
 80063ce:	4603      	mov	r3, r0
 80063d0:	4a6a      	ldr	r2, [pc, #424]	; (800657c <Batt_Protection_when_chargedischarge+0x44c>)
 80063d2:	6013      	str	r3, [r2, #0]
			if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentcharge==OFF) {
 80063d4:	4b69      	ldr	r3, [pc, #420]	; (800657c <Batt_Protection_when_chargedischarge+0x44c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a67      	ldr	r2, [pc, #412]	; (8006578 <Batt_Protection_when_chargedischarge+0x448>)
 80063da:	6812      	ldr	r2, [r2, #0]
 80063dc:	4611      	mov	r1, r2
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fa fef8 	bl	80011d4 <__aeabi_fcmpgt>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d012      	beq.n	8006410 <Batt_Protection_when_chargedischarge+0x2e0>
 80063ea:	4b5f      	ldr	r3, [pc, #380]	; (8006568 <Batt_Protection_when_chargedischarge+0x438>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10e      	bne.n	8006410 <Batt_Protection_when_chargedischarge+0x2e0>
				Batt_Open_Mode();
 80063f2:	f7fb f8a3 	bl	800153c <Batt_Open_Mode>
				T_I_Over_trip_cycle=T_I_Over_trip;
 80063f6:	4b60      	ldr	r3, [pc, #384]	; (8006578 <Batt_Protection_when_chargedischarge+0x448>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a60      	ldr	r2, [pc, #384]	; (800657c <Batt_Protection_when_chargedischarge+0x44c>)
 80063fc:	6013      	str	r3, [r2, #0]
				flag_trip_overcurrentcharge=ON;
 80063fe:	4b5a      	ldr	r3, [pc, #360]	; (8006568 <Batt_Protection_when_chargedischarge+0x438>)
 8006400:	2201      	movs	r2, #1
 8006402:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006404:	2200      	movs	r2, #0
 8006406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800640a:	485d      	ldr	r0, [pc, #372]	; (8006580 <Batt_Protection_when_chargedischarge+0x450>)
 800640c:	f002 ffc3 	bl	8009396 <HAL_GPIO_WritePin>
			if(flag_trip_overcurrentcharge==OFF) {
 8006410:	4b55      	ldr	r3, [pc, #340]	; (8006568 <Batt_Protection_when_chargedischarge+0x438>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f040 84d4 	bne.w	8006dc2 <Batt_Protection_when_chargedischarge+0xc92>
				if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 800641a:	4b57      	ldr	r3, [pc, #348]	; (8006578 <Batt_Protection_when_chargedischarge+0x448>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a57      	ldr	r2, [pc, #348]	; (800657c <Batt_Protection_when_chargedischarge+0x44c>)
 8006420:	6812      	ldr	r2, [r2, #0]
 8006422:	4611      	mov	r1, r2
 8006424:	4618      	mov	r0, r3
 8006426:	f7fa fc0f 	bl	8000c48 <__aeabi_fsub>
 800642a:	4603      	mov	r3, r0
 800642c:	4955      	ldr	r1, [pc, #340]	; (8006584 <Batt_Protection_when_chargedischarge+0x454>)
 800642e:	4618      	mov	r0, r3
 8006430:	f7fa fed0 	bl	80011d4 <__aeabi_fcmpgt>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d019      	beq.n	800646e <Batt_Protection_when_chargedischarge+0x33e>
					if((test_tim2%1000)==0) {
 800643a:	4b53      	ldr	r3, [pc, #332]	; (8006588 <Batt_Protection_when_chargedischarge+0x458>)
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	4b53      	ldr	r3, [pc, #332]	; (800658c <Batt_Protection_when_chargedischarge+0x45c>)
 8006440:	fb83 1302 	smull	r1, r3, r3, r2
 8006444:	1199      	asrs	r1, r3, #6
 8006446:	17d3      	asrs	r3, r2, #31
 8006448:	1acb      	subs	r3, r1, r3
 800644a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800644e:	fb01 f303 	mul.w	r3, r1, r3
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	f040 84b4 	bne.w	8006dc2 <Batt_Protection_when_chargedischarge+0xc92>
						BUZZ_Toggle;
 800645a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800645e:	4848      	ldr	r0, [pc, #288]	; (8006580 <Batt_Protection_when_chargedischarge+0x450>)
 8006460:	f002 ffb1 	bl	80093c6 <HAL_GPIO_TogglePin>
						test_tim2=0;
 8006464:	4b48      	ldr	r3, [pc, #288]	; (8006588 <Batt_Protection_when_chargedischarge+0x458>)
 8006466:	2200      	movs	r2, #0
 8006468:	601a      	str	r2, [r3, #0]
			if(flag_trip_overcurrentcharge==OFF) {
 800646a:	f000 bcaa 	b.w	8006dc2 <Batt_Protection_when_chargedischarge+0xc92>
				else if(T_I_Over_trip-T_I_Over_trip_cycle>10) {
 800646e:	4b42      	ldr	r3, [pc, #264]	; (8006578 <Batt_Protection_when_chargedischarge+0x448>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a42      	ldr	r2, [pc, #264]	; (800657c <Batt_Protection_when_chargedischarge+0x44c>)
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	4611      	mov	r1, r2
 8006478:	4618      	mov	r0, r3
 800647a:	f7fa fbe5 	bl	8000c48 <__aeabi_fsub>
 800647e:	4603      	mov	r3, r0
 8006480:	4943      	ldr	r1, [pc, #268]	; (8006590 <Batt_Protection_when_chargedischarge+0x460>)
 8006482:	4618      	mov	r0, r3
 8006484:	f7fa fea6 	bl	80011d4 <__aeabi_fcmpgt>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d018      	beq.n	80064c0 <Batt_Protection_when_chargedischarge+0x390>
					if((test_tim2%100)==0) {
 800648e:	4b3e      	ldr	r3, [pc, #248]	; (8006588 <Batt_Protection_when_chargedischarge+0x458>)
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4b40      	ldr	r3, [pc, #256]	; (8006594 <Batt_Protection_when_chargedischarge+0x464>)
 8006494:	fb83 1302 	smull	r1, r3, r3, r2
 8006498:	1159      	asrs	r1, r3, #5
 800649a:	17d3      	asrs	r3, r2, #31
 800649c:	1acb      	subs	r3, r1, r3
 800649e:	2164      	movs	r1, #100	; 0x64
 80064a0:	fb01 f303 	mul.w	r3, r1, r3
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f040 848b 	bne.w	8006dc2 <Batt_Protection_when_chargedischarge+0xc92>
						BUZZ_Toggle;
 80064ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064b0:	4833      	ldr	r0, [pc, #204]	; (8006580 <Batt_Protection_when_chargedischarge+0x450>)
 80064b2:	f002 ff88 	bl	80093c6 <HAL_GPIO_TogglePin>
						test_tim2=0;
 80064b6:	4b34      	ldr	r3, [pc, #208]	; (8006588 <Batt_Protection_when_chargedischarge+0x458>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]
			if(flag_trip_overcurrentcharge==OFF) {
 80064bc:	f000 bc81 	b.w	8006dc2 <Batt_Protection_when_chargedischarge+0xc92>
				else if(T_I_Over_trip-T_I_Over_trip_cycle>3) {
 80064c0:	4b2d      	ldr	r3, [pc, #180]	; (8006578 <Batt_Protection_when_chargedischarge+0x448>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a2d      	ldr	r2, [pc, #180]	; (800657c <Batt_Protection_when_chargedischarge+0x44c>)
 80064c6:	6812      	ldr	r2, [r2, #0]
 80064c8:	4611      	mov	r1, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fa fbbc 	bl	8000c48 <__aeabi_fsub>
 80064d0:	4603      	mov	r3, r0
 80064d2:	4931      	ldr	r1, [pc, #196]	; (8006598 <Batt_Protection_when_chargedischarge+0x468>)
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fa fe7d 	bl	80011d4 <__aeabi_fcmpgt>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d019      	beq.n	8006514 <Batt_Protection_when_chargedischarge+0x3e4>
					if((test_tim2%10)==0) {
 80064e0:	4b29      	ldr	r3, [pc, #164]	; (8006588 <Batt_Protection_when_chargedischarge+0x458>)
 80064e2:	6819      	ldr	r1, [r3, #0]
 80064e4:	4b2d      	ldr	r3, [pc, #180]	; (800659c <Batt_Protection_when_chargedischarge+0x46c>)
 80064e6:	fb83 2301 	smull	r2, r3, r3, r1
 80064ea:	109a      	asrs	r2, r3, #2
 80064ec:	17cb      	asrs	r3, r1, #31
 80064ee:	1ad2      	subs	r2, r2, r3
 80064f0:	4613      	mov	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	1aca      	subs	r2, r1, r3
 80064fa:	2a00      	cmp	r2, #0
 80064fc:	f040 8461 	bne.w	8006dc2 <Batt_Protection_when_chargedischarge+0xc92>
						BUZZ_Toggle;
 8006500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006504:	481e      	ldr	r0, [pc, #120]	; (8006580 <Batt_Protection_when_chargedischarge+0x450>)
 8006506:	f002 ff5e 	bl	80093c6 <HAL_GPIO_TogglePin>
						test_tim2=0;
 800650a:	4b1f      	ldr	r3, [pc, #124]	; (8006588 <Batt_Protection_when_chargedischarge+0x458>)
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
			if(flag_trip_overcurrentcharge==OFF) {
 8006510:	f000 bc57 	b.w	8006dc2 <Batt_Protection_when_chargedischarge+0xc92>
				else if(T_I_Over_trip-T_I_Over_trip_cycle>1) {
 8006514:	4b18      	ldr	r3, [pc, #96]	; (8006578 <Batt_Protection_when_chargedischarge+0x448>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a18      	ldr	r2, [pc, #96]	; (800657c <Batt_Protection_when_chargedischarge+0x44c>)
 800651a:	6812      	ldr	r2, [r2, #0]
 800651c:	4611      	mov	r1, r2
 800651e:	4618      	mov	r0, r3
 8006520:	f7fa fb92 	bl	8000c48 <__aeabi_fsub>
 8006524:	4603      	mov	r3, r0
 8006526:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800652a:	4618      	mov	r0, r3
 800652c:	f7fa fe52 	bl	80011d4 <__aeabi_fcmpgt>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <Batt_Protection_when_chargedischarge+0x40a>
			if(flag_trip_overcurrentcharge==OFF) {
 8006536:	f000 bc44 	b.w	8006dc2 <Batt_Protection_when_chargedischarge+0xc92>
					HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800653a:	2201      	movs	r2, #1
 800653c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006540:	480f      	ldr	r0, [pc, #60]	; (8006580 <Batt_Protection_when_chargedischarge+0x450>)
 8006542:	f002 ff28 	bl	8009396 <HAL_GPIO_WritePin>
			if(flag_trip_overcurrentcharge==OFF) {
 8006546:	f000 bc3c 	b.w	8006dc2 <Batt_Protection_when_chargedischarge+0xc92>
 800654a:	bf00      	nop
 800654c:	f3af 8000 	nop.w
 8006550:	9999999a 	.word	0x9999999a
 8006554:	401b9999 	.word	0x401b9999
 8006558:	47ae147b 	.word	0x47ae147b
 800655c:	3f847ae1 	.word	0x3f847ae1
 8006560:	200002f8 	.word	0x200002f8
 8006564:	20000010 	.word	0x20000010
 8006568:	20000332 	.word	0x20000332
 800656c:	2000030a 	.word	0x2000030a
 8006570:	3ff00000 	.word	0x3ff00000
 8006574:	40200000 	.word	0x40200000
 8006578:	20000268 	.word	0x20000268
 800657c:	2000034c 	.word	0x2000034c
 8006580:	40011000 	.word	0x40011000
 8006584:	41700000 	.word	0x41700000
 8006588:	20000378 	.word	0x20000378
 800658c:	10624dd3 	.word	0x10624dd3
 8006590:	41200000 	.word	0x41200000
 8006594:	51eb851f 	.word	0x51eb851f
 8006598:	40400000 	.word	0x40400000
 800659c:	66666667 	.word	0x66666667
	else if(((Suhu_T1>Chg_OverTemp)||(Suhu_T2>Chg_OverTemp)||(Suhu_T3>Chg_OverTemp)||(Suhu_T4>Chg_OverTemp)) && flag_trip_overtemperature==OFF) {
 80065a0:	4b9a      	ldr	r3, [pc, #616]	; (800680c <Batt_Protection_when_chargedischarge+0x6dc>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a9a      	ldr	r2, [pc, #616]	; (8006810 <Batt_Protection_when_chargedischarge+0x6e0>)
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	4611      	mov	r1, r2
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fa fe12 	bl	80011d4 <__aeabi_fcmpgt>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d121      	bne.n	80065fa <Batt_Protection_when_chargedischarge+0x4ca>
 80065b6:	4b97      	ldr	r3, [pc, #604]	; (8006814 <Batt_Protection_when_chargedischarge+0x6e4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a95      	ldr	r2, [pc, #596]	; (8006810 <Batt_Protection_when_chargedischarge+0x6e0>)
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	4611      	mov	r1, r2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fa fe07 	bl	80011d4 <__aeabi_fcmpgt>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d116      	bne.n	80065fa <Batt_Protection_when_chargedischarge+0x4ca>
 80065cc:	4b92      	ldr	r3, [pc, #584]	; (8006818 <Batt_Protection_when_chargedischarge+0x6e8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a8f      	ldr	r2, [pc, #572]	; (8006810 <Batt_Protection_when_chargedischarge+0x6e0>)
 80065d2:	6812      	ldr	r2, [r2, #0]
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fa fdfc 	bl	80011d4 <__aeabi_fcmpgt>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10b      	bne.n	80065fa <Batt_Protection_when_chargedischarge+0x4ca>
 80065e2:	4b8e      	ldr	r3, [pc, #568]	; (800681c <Batt_Protection_when_chargedischarge+0x6ec>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a8a      	ldr	r2, [pc, #552]	; (8006810 <Batt_Protection_when_chargedischarge+0x6e0>)
 80065e8:	6812      	ldr	r2, [r2, #0]
 80065ea:	4611      	mov	r1, r2
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fa fdf1 	bl	80011d4 <__aeabi_fcmpgt>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 811f 	beq.w	8006838 <Batt_Protection_when_chargedischarge+0x708>
 80065fa:	4b89      	ldr	r3, [pc, #548]	; (8006820 <Batt_Protection_when_chargedischarge+0x6f0>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f040 811a 	bne.w	8006838 <Batt_Protection_when_chargedischarge+0x708>
		fault_code=3;
 8006604:	4b87      	ldr	r3, [pc, #540]	; (8006824 <Batt_Protection_when_chargedischarge+0x6f4>)
 8006606:	2203      	movs	r2, #3
 8006608:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Chg_OverTemp && Suhu_T1<=Chg_OverTemp+1) {
 800660a:	4b80      	ldr	r3, [pc, #512]	; (800680c <Batt_Protection_when_chargedischarge+0x6dc>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a80      	ldr	r2, [pc, #512]	; (8006810 <Batt_Protection_when_chargedischarge+0x6e0>)
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	4611      	mov	r1, r2
 8006614:	4618      	mov	r0, r3
 8006616:	f7fa fddd 	bl	80011d4 <__aeabi_fcmpgt>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d02a      	beq.n	8006676 <Batt_Protection_when_chargedischarge+0x546>
 8006620:	4b7b      	ldr	r3, [pc, #492]	; (8006810 <Batt_Protection_when_chargedischarge+0x6e0>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006628:	4618      	mov	r0, r3
 800662a:	f7fa fb0f 	bl	8000c4c <__addsf3>
 800662e:	4603      	mov	r3, r0
 8006630:	461a      	mov	r2, r3
 8006632:	4b76      	ldr	r3, [pc, #472]	; (800680c <Batt_Protection_when_chargedischarge+0x6dc>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f7fa fdc1 	bl	80011c0 <__aeabi_fcmpge>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d018      	beq.n	8006676 <Batt_Protection_when_chargedischarge+0x546>
			if((test_tim2%1000)==0) {
 8006644:	4b78      	ldr	r3, [pc, #480]	; (8006828 <Batt_Protection_when_chargedischarge+0x6f8>)
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	4b78      	ldr	r3, [pc, #480]	; (800682c <Batt_Protection_when_chargedischarge+0x6fc>)
 800664a:	fb83 1302 	smull	r1, r3, r3, r2
 800664e:	1199      	asrs	r1, r3, #6
 8006650:	17d3      	asrs	r3, r2, #31
 8006652:	1acb      	subs	r3, r1, r3
 8006654:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006658:	fb01 f303 	mul.w	r3, r1, r3
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	f040 80d2 	bne.w	8006808 <Batt_Protection_when_chargedischarge+0x6d8>
				BUZZ_Toggle;
 8006664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006668:	4871      	ldr	r0, [pc, #452]	; (8006830 <Batt_Protection_when_chargedischarge+0x700>)
 800666a:	f002 feac 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800666e:	4b6e      	ldr	r3, [pc, #440]	; (8006828 <Batt_Protection_when_chargedischarge+0x6f8>)
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 8006674:	e0c8      	b.n	8006808 <Batt_Protection_when_chargedischarge+0x6d8>
		else if(Suhu_T1>Chg_OverTemp+1 && Suhu_T1<=Chg_OverTemp+2){
 8006676:	4b66      	ldr	r3, [pc, #408]	; (8006810 <Batt_Protection_when_chargedischarge+0x6e0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800667e:	4618      	mov	r0, r3
 8006680:	f7fa fae4 	bl	8000c4c <__addsf3>
 8006684:	4603      	mov	r3, r0
 8006686:	461a      	mov	r2, r3
 8006688:	4b60      	ldr	r3, [pc, #384]	; (800680c <Batt_Protection_when_chargedischarge+0x6dc>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4619      	mov	r1, r3
 800668e:	4610      	mov	r0, r2
 8006690:	f7fa fd82 	bl	8001198 <__aeabi_fcmplt>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d02a      	beq.n	80066f0 <Batt_Protection_when_chargedischarge+0x5c0>
 800669a:	4b5d      	ldr	r3, [pc, #372]	; (8006810 <Batt_Protection_when_chargedischarge+0x6e0>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fa fad2 	bl	8000c4c <__addsf3>
 80066a8:	4603      	mov	r3, r0
 80066aa:	461a      	mov	r2, r3
 80066ac:	4b57      	ldr	r3, [pc, #348]	; (800680c <Batt_Protection_when_chargedischarge+0x6dc>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4619      	mov	r1, r3
 80066b2:	4610      	mov	r0, r2
 80066b4:	f7fa fd84 	bl	80011c0 <__aeabi_fcmpge>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d018      	beq.n	80066f0 <Batt_Protection_when_chargedischarge+0x5c0>
			if((test_tim2%500)==0){
 80066be:	4b5a      	ldr	r3, [pc, #360]	; (8006828 <Batt_Protection_when_chargedischarge+0x6f8>)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4b5a      	ldr	r3, [pc, #360]	; (800682c <Batt_Protection_when_chargedischarge+0x6fc>)
 80066c4:	fb83 1302 	smull	r1, r3, r3, r2
 80066c8:	1159      	asrs	r1, r3, #5
 80066ca:	17d3      	asrs	r3, r2, #31
 80066cc:	1acb      	subs	r3, r1, r3
 80066ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80066d2:	fb01 f303 	mul.w	r3, r1, r3
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f040 8095 	bne.w	8006808 <Batt_Protection_when_chargedischarge+0x6d8>
				BUZZ_Toggle;
 80066de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066e2:	4853      	ldr	r0, [pc, #332]	; (8006830 <Batt_Protection_when_chargedischarge+0x700>)
 80066e4:	f002 fe6f 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80066e8:	4b4f      	ldr	r3, [pc, #316]	; (8006828 <Batt_Protection_when_chargedischarge+0x6f8>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80066ee:	e08b      	b.n	8006808 <Batt_Protection_when_chargedischarge+0x6d8>
		else if(Suhu_T1>Chg_OverTemp+2 && Suhu_T1<=Chg_OverTemp+3){
 80066f0:	4b47      	ldr	r3, [pc, #284]	; (8006810 <Batt_Protection_when_chargedischarge+0x6e0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fa faa7 	bl	8000c4c <__addsf3>
 80066fe:	4603      	mov	r3, r0
 8006700:	461a      	mov	r2, r3
 8006702:	4b42      	ldr	r3, [pc, #264]	; (800680c <Batt_Protection_when_chargedischarge+0x6dc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7fa fd45 	bl	8001198 <__aeabi_fcmplt>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d028      	beq.n	8006766 <Batt_Protection_when_chargedischarge+0x636>
 8006714:	4b3e      	ldr	r3, [pc, #248]	; (8006810 <Batt_Protection_when_chargedischarge+0x6e0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4946      	ldr	r1, [pc, #280]	; (8006834 <Batt_Protection_when_chargedischarge+0x704>)
 800671a:	4618      	mov	r0, r3
 800671c:	f7fa fa96 	bl	8000c4c <__addsf3>
 8006720:	4603      	mov	r3, r0
 8006722:	461a      	mov	r2, r3
 8006724:	4b39      	ldr	r3, [pc, #228]	; (800680c <Batt_Protection_when_chargedischarge+0x6dc>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4619      	mov	r1, r3
 800672a:	4610      	mov	r0, r2
 800672c:	f7fa fd48 	bl	80011c0 <__aeabi_fcmpge>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d017      	beq.n	8006766 <Batt_Protection_when_chargedischarge+0x636>
			if((test_tim2%500)==0){
 8006736:	4b3c      	ldr	r3, [pc, #240]	; (8006828 <Batt_Protection_when_chargedischarge+0x6f8>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4b3c      	ldr	r3, [pc, #240]	; (800682c <Batt_Protection_when_chargedischarge+0x6fc>)
 800673c:	fb83 1302 	smull	r1, r3, r3, r2
 8006740:	1159      	asrs	r1, r3, #5
 8006742:	17d3      	asrs	r3, r2, #31
 8006744:	1acb      	subs	r3, r1, r3
 8006746:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800674a:	fb01 f303 	mul.w	r3, r1, r3
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d159      	bne.n	8006808 <Batt_Protection_when_chargedischarge+0x6d8>
				BUZZ_Toggle;
 8006754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006758:	4835      	ldr	r0, [pc, #212]	; (8006830 <Batt_Protection_when_chargedischarge+0x700>)
 800675a:	f002 fe34 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800675e:	4b32      	ldr	r3, [pc, #200]	; (8006828 <Batt_Protection_when_chargedischarge+0x6f8>)
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8006764:	e050      	b.n	8006808 <Batt_Protection_when_chargedischarge+0x6d8>
		else if(Suhu_T1>Chg_OverTemp+3||Suhu_T2>Chg_OverTemp+3||Suhu_T3>Chg_OverTemp+3||Suhu_T4>Chg_OverTemp+3){
 8006766:	4b2a      	ldr	r3, [pc, #168]	; (8006810 <Batt_Protection_when_chargedischarge+0x6e0>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4932      	ldr	r1, [pc, #200]	; (8006834 <Batt_Protection_when_chargedischarge+0x704>)
 800676c:	4618      	mov	r0, r3
 800676e:	f7fa fa6d 	bl	8000c4c <__addsf3>
 8006772:	4603      	mov	r3, r0
 8006774:	461a      	mov	r2, r3
 8006776:	4b25      	ldr	r3, [pc, #148]	; (800680c <Batt_Protection_when_chargedischarge+0x6dc>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4619      	mov	r1, r3
 800677c:	4610      	mov	r0, r2
 800677e:	f7fa fd0b 	bl	8001198 <__aeabi_fcmplt>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d133      	bne.n	80067f0 <Batt_Protection_when_chargedischarge+0x6c0>
 8006788:	4b21      	ldr	r3, [pc, #132]	; (8006810 <Batt_Protection_when_chargedischarge+0x6e0>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4929      	ldr	r1, [pc, #164]	; (8006834 <Batt_Protection_when_chargedischarge+0x704>)
 800678e:	4618      	mov	r0, r3
 8006790:	f7fa fa5c 	bl	8000c4c <__addsf3>
 8006794:	4603      	mov	r3, r0
 8006796:	461a      	mov	r2, r3
 8006798:	4b1e      	ldr	r3, [pc, #120]	; (8006814 <Batt_Protection_when_chargedischarge+0x6e4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4619      	mov	r1, r3
 800679e:	4610      	mov	r0, r2
 80067a0:	f7fa fcfa 	bl	8001198 <__aeabi_fcmplt>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d122      	bne.n	80067f0 <Batt_Protection_when_chargedischarge+0x6c0>
 80067aa:	4b19      	ldr	r3, [pc, #100]	; (8006810 <Batt_Protection_when_chargedischarge+0x6e0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4921      	ldr	r1, [pc, #132]	; (8006834 <Batt_Protection_when_chargedischarge+0x704>)
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fa fa4b 	bl	8000c4c <__addsf3>
 80067b6:	4603      	mov	r3, r0
 80067b8:	461a      	mov	r2, r3
 80067ba:	4b17      	ldr	r3, [pc, #92]	; (8006818 <Batt_Protection_when_chargedischarge+0x6e8>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f7fa fce9 	bl	8001198 <__aeabi_fcmplt>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d111      	bne.n	80067f0 <Batt_Protection_when_chargedischarge+0x6c0>
 80067cc:	4b10      	ldr	r3, [pc, #64]	; (8006810 <Batt_Protection_when_chargedischarge+0x6e0>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4918      	ldr	r1, [pc, #96]	; (8006834 <Batt_Protection_when_chargedischarge+0x704>)
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fa fa3a 	bl	8000c4c <__addsf3>
 80067d8:	4603      	mov	r3, r0
 80067da:	461a      	mov	r2, r3
 80067dc:	4b0f      	ldr	r3, [pc, #60]	; (800681c <Batt_Protection_when_chargedischarge+0x6ec>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4619      	mov	r1, r3
 80067e2:	4610      	mov	r0, r2
 80067e4:	f7fa fcd8 	bl	8001198 <__aeabi_fcmplt>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d100      	bne.n	80067f0 <Batt_Protection_when_chargedischarge+0x6c0>
		if(Suhu_T1>Chg_OverTemp && Suhu_T1<=Chg_OverTemp+1) {
 80067ee:	e2e9      	b.n	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
			Batt_Open_Mode();
 80067f0:	f7fa fea4 	bl	800153c <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 80067f4:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <Batt_Protection_when_chargedischarge+0x6f0>)
 80067f6:	2201      	movs	r2, #1
 80067f8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80067fa:	2200      	movs	r2, #0
 80067fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006800:	480b      	ldr	r0, [pc, #44]	; (8006830 <Batt_Protection_when_chargedischarge+0x700>)
 8006802:	f002 fdc8 	bl	8009396 <HAL_GPIO_WritePin>
		if(Suhu_T1>Chg_OverTemp && Suhu_T1<=Chg_OverTemp+1) {
 8006806:	e2dd      	b.n	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
 8006808:	e2dc      	b.n	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
 800680a:	bf00      	nop
 800680c:	2000030c 	.word	0x2000030c
 8006810:	20000018 	.word	0x20000018
 8006814:	20000390 	.word	0x20000390
 8006818:	20000280 	.word	0x20000280
 800681c:	20000344 	.word	0x20000344
 8006820:	20000278 	.word	0x20000278
 8006824:	2000030a 	.word	0x2000030a
 8006828:	20000378 	.word	0x20000378
 800682c:	10624dd3 	.word	0x10624dd3
 8006830:	40011000 	.word	0x40011000
 8006834:	40400000 	.word	0x40400000
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 8006838:	4b96      	ldr	r3, [pc, #600]	; (8006a94 <Batt_Protection_when_chargedischarge+0x964>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a96      	ldr	r2, [pc, #600]	; (8006a98 <Batt_Protection_when_chargedischarge+0x968>)
 800683e:	6812      	ldr	r2, [r2, #0]
 8006840:	4611      	mov	r1, r2
 8006842:	4618      	mov	r0, r3
 8006844:	f7fa fa00 	bl	8000c48 <__aeabi_fsub>
 8006848:	4603      	mov	r3, r0
 800684a:	4994      	ldr	r1, [pc, #592]	; (8006a9c <Batt_Protection_when_chargedischarge+0x96c>)
 800684c:	4618      	mov	r0, r3
 800684e:	f7fa fcad 	bl	80011ac <__aeabi_fcmple>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d130      	bne.n	80068ba <Batt_Protection_when_chargedischarge+0x78a>
 8006858:	4b91      	ldr	r3, [pc, #580]	; (8006aa0 <Batt_Protection_when_chargedischarge+0x970>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a8e      	ldr	r2, [pc, #568]	; (8006a98 <Batt_Protection_when_chargedischarge+0x968>)
 800685e:	6812      	ldr	r2, [r2, #0]
 8006860:	4611      	mov	r1, r2
 8006862:	4618      	mov	r0, r3
 8006864:	f7fa f9f0 	bl	8000c48 <__aeabi_fsub>
 8006868:	4603      	mov	r3, r0
 800686a:	498c      	ldr	r1, [pc, #560]	; (8006a9c <Batt_Protection_when_chargedischarge+0x96c>)
 800686c:	4618      	mov	r0, r3
 800686e:	f7fa fc9d 	bl	80011ac <__aeabi_fcmple>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d120      	bne.n	80068ba <Batt_Protection_when_chargedischarge+0x78a>
 8006878:	4b8a      	ldr	r3, [pc, #552]	; (8006aa4 <Batt_Protection_when_chargedischarge+0x974>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a86      	ldr	r2, [pc, #536]	; (8006a98 <Batt_Protection_when_chargedischarge+0x968>)
 800687e:	6812      	ldr	r2, [r2, #0]
 8006880:	4611      	mov	r1, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f7fa f9e0 	bl	8000c48 <__aeabi_fsub>
 8006888:	4603      	mov	r3, r0
 800688a:	4984      	ldr	r1, [pc, #528]	; (8006a9c <Batt_Protection_when_chargedischarge+0x96c>)
 800688c:	4618      	mov	r0, r3
 800688e:	f7fa fc8d 	bl	80011ac <__aeabi_fcmple>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d110      	bne.n	80068ba <Batt_Protection_when_chargedischarge+0x78a>
 8006898:	4b83      	ldr	r3, [pc, #524]	; (8006aa8 <Batt_Protection_when_chargedischarge+0x978>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a7e      	ldr	r2, [pc, #504]	; (8006a98 <Batt_Protection_when_chargedischarge+0x968>)
 800689e:	6812      	ldr	r2, [r2, #0]
 80068a0:	4611      	mov	r1, r2
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fa f9d0 	bl	8000c48 <__aeabi_fsub>
 80068a8:	4603      	mov	r3, r0
 80068aa:	497c      	ldr	r1, [pc, #496]	; (8006a9c <Batt_Protection_when_chargedischarge+0x96c>)
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fa fc7d 	bl	80011ac <__aeabi_fcmple>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 8105 	beq.w	8006ac4 <Batt_Protection_when_chargedischarge+0x994>
 80068ba:	4b7c      	ldr	r3, [pc, #496]	; (8006aac <Batt_Protection_when_chargedischarge+0x97c>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f040 8100 	bne.w	8006ac4 <Batt_Protection_when_chargedischarge+0x994>
		fault_code=4;
 80068c4:	4b7a      	ldr	r3, [pc, #488]	; (8006ab0 <Batt_Protection_when_chargedischarge+0x980>)
 80068c6:	2204      	movs	r2, #4
 80068c8:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 80068ca:	4b73      	ldr	r3, [pc, #460]	; (8006a98 <Batt_Protection_when_chargedischarge+0x968>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4973      	ldr	r1, [pc, #460]	; (8006a9c <Batt_Protection_when_chargedischarge+0x96c>)
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fa f9bb 	bl	8000c4c <__addsf3>
 80068d6:	4603      	mov	r3, r0
 80068d8:	461a      	mov	r2, r3
 80068da:	4b6e      	ldr	r3, [pc, #440]	; (8006a94 <Batt_Protection_when_chargedischarge+0x964>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4619      	mov	r1, r3
 80068e0:	4610      	mov	r0, r2
 80068e2:	f7fa fc6d 	bl	80011c0 <__aeabi_fcmpge>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d029      	beq.n	8006940 <Batt_Protection_when_chargedischarge+0x810>
 80068ec:	4b6a      	ldr	r3, [pc, #424]	; (8006a98 <Batt_Protection_when_chargedischarge+0x968>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4970      	ldr	r1, [pc, #448]	; (8006ab4 <Batt_Protection_when_chargedischarge+0x984>)
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fa f9aa 	bl	8000c4c <__addsf3>
 80068f8:	4603      	mov	r3, r0
 80068fa:	461a      	mov	r2, r3
 80068fc:	4b65      	ldr	r3, [pc, #404]	; (8006a94 <Batt_Protection_when_chargedischarge+0x964>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4619      	mov	r1, r3
 8006902:	4610      	mov	r0, r2
 8006904:	f7fa fc48 	bl	8001198 <__aeabi_fcmplt>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d018      	beq.n	8006940 <Batt_Protection_when_chargedischarge+0x810>
			if((test_tim2%1000)==0) {
 800690e:	4b6a      	ldr	r3, [pc, #424]	; (8006ab8 <Batt_Protection_when_chargedischarge+0x988>)
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	4b6a      	ldr	r3, [pc, #424]	; (8006abc <Batt_Protection_when_chargedischarge+0x98c>)
 8006914:	fb83 1302 	smull	r1, r3, r3, r2
 8006918:	1199      	asrs	r1, r3, #6
 800691a:	17d3      	asrs	r3, r2, #31
 800691c:	1acb      	subs	r3, r1, r3
 800691e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006922:	fb01 f303 	mul.w	r3, r1, r3
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	f040 80b2 	bne.w	8006a92 <Batt_Protection_when_chargedischarge+0x962>
				BUZZ_Toggle;
 800692e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006932:	4863      	ldr	r0, [pc, #396]	; (8006ac0 <Batt_Protection_when_chargedischarge+0x990>)
 8006934:	f002 fd47 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006938:	4b5f      	ldr	r3, [pc, #380]	; (8006ab8 <Batt_Protection_when_chargedischarge+0x988>)
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 800693e:	e0a8      	b.n	8006a92 <Batt_Protection_when_chargedischarge+0x962>
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2) {
 8006940:	4b55      	ldr	r3, [pc, #340]	; (8006a98 <Batt_Protection_when_chargedischarge+0x968>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	495b      	ldr	r1, [pc, #364]	; (8006ab4 <Batt_Protection_when_chargedischarge+0x984>)
 8006946:	4618      	mov	r0, r3
 8006948:	f7fa f980 	bl	8000c4c <__addsf3>
 800694c:	4603      	mov	r3, r0
 800694e:	461a      	mov	r2, r3
 8006950:	4b50      	ldr	r3, [pc, #320]	; (8006a94 <Batt_Protection_when_chargedischarge+0x964>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4619      	mov	r1, r3
 8006956:	4610      	mov	r0, r2
 8006958:	f7fa fc32 	bl	80011c0 <__aeabi_fcmpge>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d029      	beq.n	80069b6 <Batt_Protection_when_chargedischarge+0x886>
 8006962:	4b4d      	ldr	r3, [pc, #308]	; (8006a98 <Batt_Protection_when_chargedischarge+0x968>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800696a:	4618      	mov	r0, r3
 800696c:	f7fa f96e 	bl	8000c4c <__addsf3>
 8006970:	4603      	mov	r3, r0
 8006972:	461a      	mov	r2, r3
 8006974:	4b47      	ldr	r3, [pc, #284]	; (8006a94 <Batt_Protection_when_chargedischarge+0x964>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4619      	mov	r1, r3
 800697a:	4610      	mov	r0, r2
 800697c:	f7fa fc0c 	bl	8001198 <__aeabi_fcmplt>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d017      	beq.n	80069b6 <Batt_Protection_when_chargedischarge+0x886>
			if((test_tim2%500)==0) {
 8006986:	4b4c      	ldr	r3, [pc, #304]	; (8006ab8 <Batt_Protection_when_chargedischarge+0x988>)
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	4b4c      	ldr	r3, [pc, #304]	; (8006abc <Batt_Protection_when_chargedischarge+0x98c>)
 800698c:	fb83 1302 	smull	r1, r3, r3, r2
 8006990:	1159      	asrs	r1, r3, #5
 8006992:	17d3      	asrs	r3, r2, #31
 8006994:	1acb      	subs	r3, r1, r3
 8006996:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800699a:	fb01 f303 	mul.w	r3, r1, r3
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d176      	bne.n	8006a92 <Batt_Protection_when_chargedischarge+0x962>
				BUZZ_Toggle;
 80069a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069a8:	4845      	ldr	r0, [pc, #276]	; (8006ac0 <Batt_Protection_when_chargedischarge+0x990>)
 80069aa:	f002 fd0c 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80069ae:	4b42      	ldr	r3, [pc, #264]	; (8006ab8 <Batt_Protection_when_chargedischarge+0x988>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 80069b4:	e06d      	b.n	8006a92 <Batt_Protection_when_chargedischarge+0x962>
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set) {
 80069b6:	4b38      	ldr	r3, [pc, #224]	; (8006a98 <Batt_Protection_when_chargedischarge+0x968>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fa f944 	bl	8000c4c <__addsf3>
 80069c4:	4603      	mov	r3, r0
 80069c6:	461a      	mov	r2, r3
 80069c8:	4b32      	ldr	r3, [pc, #200]	; (8006a94 <Batt_Protection_when_chargedischarge+0x964>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f7fa fc00 	bl	80011d4 <__aeabi_fcmpgt>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d022      	beq.n	8006a20 <Batt_Protection_when_chargedischarge+0x8f0>
 80069da:	4b2e      	ldr	r3, [pc, #184]	; (8006a94 <Batt_Protection_when_chargedischarge+0x964>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a2e      	ldr	r2, [pc, #184]	; (8006a98 <Batt_Protection_when_chargedischarge+0x968>)
 80069e0:	6812      	ldr	r2, [r2, #0]
 80069e2:	4611      	mov	r1, r2
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fa fbeb 	bl	80011c0 <__aeabi_fcmpge>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d017      	beq.n	8006a20 <Batt_Protection_when_chargedischarge+0x8f0>
			if((test_tim2%500)==0) {
 80069f0:	4b31      	ldr	r3, [pc, #196]	; (8006ab8 <Batt_Protection_when_chargedischarge+0x988>)
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	4b31      	ldr	r3, [pc, #196]	; (8006abc <Batt_Protection_when_chargedischarge+0x98c>)
 80069f6:	fb83 1302 	smull	r1, r3, r3, r2
 80069fa:	1159      	asrs	r1, r3, #5
 80069fc:	17d3      	asrs	r3, r2, #31
 80069fe:	1acb      	subs	r3, r1, r3
 8006a00:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006a04:	fb01 f303 	mul.w	r3, r1, r3
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d141      	bne.n	8006a92 <Batt_Protection_when_chargedischarge+0x962>
				BUZZ_Toggle;
 8006a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a12:	482b      	ldr	r0, [pc, #172]	; (8006ac0 <Batt_Protection_when_chargedischarge+0x990>)
 8006a14:	f002 fcd7 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006a18:	4b27      	ldr	r3, [pc, #156]	; (8006ab8 <Batt_Protection_when_chargedischarge+0x988>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 8006a1e:	e038      	b.n	8006a92 <Batt_Protection_when_chargedischarge+0x962>
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set) {
 8006a20:	4b1c      	ldr	r3, [pc, #112]	; (8006a94 <Batt_Protection_when_chargedischarge+0x964>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a1c      	ldr	r2, [pc, #112]	; (8006a98 <Batt_Protection_when_chargedischarge+0x968>)
 8006a26:	6812      	ldr	r2, [r2, #0]
 8006a28:	4611      	mov	r1, r2
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fa fbb4 	bl	8001198 <__aeabi_fcmplt>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d121      	bne.n	8006a7a <Batt_Protection_when_chargedischarge+0x94a>
 8006a36:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <Batt_Protection_when_chargedischarge+0x970>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a17      	ldr	r2, [pc, #92]	; (8006a98 <Batt_Protection_when_chargedischarge+0x968>)
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	4611      	mov	r1, r2
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fa fba9 	bl	8001198 <__aeabi_fcmplt>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d116      	bne.n	8006a7a <Batt_Protection_when_chargedischarge+0x94a>
 8006a4c:	4b15      	ldr	r3, [pc, #84]	; (8006aa4 <Batt_Protection_when_chargedischarge+0x974>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a11      	ldr	r2, [pc, #68]	; (8006a98 <Batt_Protection_when_chargedischarge+0x968>)
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fa fb9e 	bl	8001198 <__aeabi_fcmplt>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10b      	bne.n	8006a7a <Batt_Protection_when_chargedischarge+0x94a>
 8006a62:	4b11      	ldr	r3, [pc, #68]	; (8006aa8 <Batt_Protection_when_chargedischarge+0x978>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a0c      	ldr	r2, [pc, #48]	; (8006a98 <Batt_Protection_when_chargedischarge+0x968>)
 8006a68:	6812      	ldr	r2, [r2, #0]
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fa fb93 	bl	8001198 <__aeabi_fcmplt>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d100      	bne.n	8006a7a <Batt_Protection_when_chargedischarge+0x94a>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 8006a78:	e1a4      	b.n	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
			Batt_Open_Mode();
 8006a7a:	f7fa fd5f 	bl	800153c <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 8006a7e:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <Batt_Protection_when_chargedischarge+0x97c>)
 8006a80:	2201      	movs	r2, #1
 8006a82:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006a84:	2200      	movs	r2, #0
 8006a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a8a:	480d      	ldr	r0, [pc, #52]	; (8006ac0 <Batt_Protection_when_chargedischarge+0x990>)
 8006a8c:	f002 fc83 	bl	8009396 <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 8006a90:	e198      	b.n	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
 8006a92:	e197      	b.n	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
 8006a94:	2000030c 	.word	0x2000030c
 8006a98:	2000001c 	.word	0x2000001c
 8006a9c:	41200000 	.word	0x41200000
 8006aa0:	20000390 	.word	0x20000390
 8006aa4:	20000280 	.word	0x20000280
 8006aa8:	20000344 	.word	0x20000344
 8006aac:	20000300 	.word	0x20000300
 8006ab0:	2000030a 	.word	0x2000030a
 8006ab4:	40a00000 	.word	0x40a00000
 8006ab8:	20000378 	.word	0x20000378
 8006abc:	10624dd3 	.word	0x10624dd3
 8006ac0:	40011000 	.word	0x40011000
	else if(Pack_SOC <= SOC_Under_Set+5 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE) {
 8006ac4:	4b84      	ldr	r3, [pc, #528]	; (8006cd8 <Batt_Protection_when_chargedischarge+0xba8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4984      	ldr	r1, [pc, #528]	; (8006cdc <Batt_Protection_when_chargedischarge+0xbac>)
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fa f8be 	bl	8000c4c <__addsf3>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	4b82      	ldr	r3, [pc, #520]	; (8006ce0 <Batt_Protection_when_chargedischarge+0xbb0>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4610      	mov	r0, r2
 8006adc:	f7fa fb70 	bl	80011c0 <__aeabi_fcmpge>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 80d1 	beq.w	8006c8a <Batt_Protection_when_chargedischarge+0xb5a>
 8006ae8:	4b7e      	ldr	r3, [pc, #504]	; (8006ce4 <Batt_Protection_when_chargedischarge+0xbb4>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f040 80cc 	bne.w	8006c8a <Batt_Protection_when_chargedischarge+0xb5a>
 8006af2:	4b7d      	ldr	r3, [pc, #500]	; (8006ce8 <Batt_Protection_when_chargedischarge+0xbb8>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	f040 80c7 	bne.w	8006c8a <Batt_Protection_when_chargedischarge+0xb5a>
		fault_code=5;
 8006afc:	4b7b      	ldr	r3, [pc, #492]	; (8006cec <Batt_Protection_when_chargedischarge+0xbbc>)
 8006afe:	2205      	movs	r2, #5
 8006b00:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC <= SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 8006b02:	4b75      	ldr	r3, [pc, #468]	; (8006cd8 <Batt_Protection_when_chargedischarge+0xba8>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4975      	ldr	r1, [pc, #468]	; (8006cdc <Batt_Protection_when_chargedischarge+0xbac>)
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fa f89f 	bl	8000c4c <__addsf3>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	461a      	mov	r2, r3
 8006b12:	4b73      	ldr	r3, [pc, #460]	; (8006ce0 <Batt_Protection_when_chargedischarge+0xbb0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f7fa fb51 	bl	80011c0 <__aeabi_fcmpge>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d029      	beq.n	8006b78 <Batt_Protection_when_chargedischarge+0xa48>
 8006b24:	4b6c      	ldr	r3, [pc, #432]	; (8006cd8 <Batt_Protection_when_chargedischarge+0xba8>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4971      	ldr	r1, [pc, #452]	; (8006cf0 <Batt_Protection_when_chargedischarge+0xbc0>)
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fa f88e 	bl	8000c4c <__addsf3>
 8006b30:	4603      	mov	r3, r0
 8006b32:	461a      	mov	r2, r3
 8006b34:	4b6a      	ldr	r3, [pc, #424]	; (8006ce0 <Batt_Protection_when_chargedischarge+0xbb0>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	f7fa fb2c 	bl	8001198 <__aeabi_fcmplt>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d018      	beq.n	8006b78 <Batt_Protection_when_chargedischarge+0xa48>
			if((test_tim2%1000)==0){
 8006b46:	4b6b      	ldr	r3, [pc, #428]	; (8006cf4 <Batt_Protection_when_chargedischarge+0xbc4>)
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4b6b      	ldr	r3, [pc, #428]	; (8006cf8 <Batt_Protection_when_chargedischarge+0xbc8>)
 8006b4c:	fb83 1302 	smull	r1, r3, r3, r2
 8006b50:	1199      	asrs	r1, r3, #6
 8006b52:	17d3      	asrs	r3, r2, #31
 8006b54:	1acb      	subs	r3, r1, r3
 8006b56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b5a:	fb01 f303 	mul.w	r3, r1, r3
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f040 8091 	bne.w	8006c88 <Batt_Protection_when_chargedischarge+0xb58>
				BUZZ_Toggle;
 8006b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b6a:	4864      	ldr	r0, [pc, #400]	; (8006cfc <Batt_Protection_when_chargedischarge+0xbcc>)
 8006b6c:	f002 fc2b 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006b70:	4b60      	ldr	r3, [pc, #384]	; (8006cf4 <Batt_Protection_when_chargedischarge+0xbc4>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 8006b76:	e087      	b.n	8006c88 <Batt_Protection_when_chargedischarge+0xb58>
		else if(Pack_SOC <= SOC_Under_Set+3 && Pack_SOC>SOC_Under_Set+2){
 8006b78:	4b57      	ldr	r3, [pc, #348]	; (8006cd8 <Batt_Protection_when_chargedischarge+0xba8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	495c      	ldr	r1, [pc, #368]	; (8006cf0 <Batt_Protection_when_chargedischarge+0xbc0>)
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fa f864 	bl	8000c4c <__addsf3>
 8006b84:	4603      	mov	r3, r0
 8006b86:	461a      	mov	r2, r3
 8006b88:	4b55      	ldr	r3, [pc, #340]	; (8006ce0 <Batt_Protection_when_chargedischarge+0xbb0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4610      	mov	r0, r2
 8006b90:	f7fa fb16 	bl	80011c0 <__aeabi_fcmpge>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d029      	beq.n	8006bee <Batt_Protection_when_chargedischarge+0xabe>
 8006b9a:	4b4f      	ldr	r3, [pc, #316]	; (8006cd8 <Batt_Protection_when_chargedischarge+0xba8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fa f852 	bl	8000c4c <__addsf3>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	461a      	mov	r2, r3
 8006bac:	4b4c      	ldr	r3, [pc, #304]	; (8006ce0 <Batt_Protection_when_chargedischarge+0xbb0>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	f7fa faf0 	bl	8001198 <__aeabi_fcmplt>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d017      	beq.n	8006bee <Batt_Protection_when_chargedischarge+0xabe>
			if((test_tim2%500)==0){
 8006bbe:	4b4d      	ldr	r3, [pc, #308]	; (8006cf4 <Batt_Protection_when_chargedischarge+0xbc4>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	4b4d      	ldr	r3, [pc, #308]	; (8006cf8 <Batt_Protection_when_chargedischarge+0xbc8>)
 8006bc4:	fb83 1302 	smull	r1, r3, r3, r2
 8006bc8:	1159      	asrs	r1, r3, #5
 8006bca:	17d3      	asrs	r3, r2, #31
 8006bcc:	1acb      	subs	r3, r1, r3
 8006bce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006bd2:	fb01 f303 	mul.w	r3, r1, r3
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d155      	bne.n	8006c88 <Batt_Protection_when_chargedischarge+0xb58>
				BUZZ_Toggle;
 8006bdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006be0:	4846      	ldr	r0, [pc, #280]	; (8006cfc <Batt_Protection_when_chargedischarge+0xbcc>)
 8006be2:	f002 fbf0 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006be6:	4b43      	ldr	r3, [pc, #268]	; (8006cf4 <Batt_Protection_when_chargedischarge+0xbc4>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8006bec:	e04c      	b.n	8006c88 <Batt_Protection_when_chargedischarge+0xb58>
		else if(Pack_SOC <= SOC_Under_Set+2 && Pack_SOC>SOC_Under_Set){
 8006bee:	4b3a      	ldr	r3, [pc, #232]	; (8006cd8 <Batt_Protection_when_chargedischarge+0xba8>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fa f828 	bl	8000c4c <__addsf3>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	461a      	mov	r2, r3
 8006c00:	4b37      	ldr	r3, [pc, #220]	; (8006ce0 <Batt_Protection_when_chargedischarge+0xbb0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4619      	mov	r1, r3
 8006c06:	4610      	mov	r0, r2
 8006c08:	f7fa fada 	bl	80011c0 <__aeabi_fcmpge>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d022      	beq.n	8006c58 <Batt_Protection_when_chargedischarge+0xb28>
 8006c12:	4b33      	ldr	r3, [pc, #204]	; (8006ce0 <Batt_Protection_when_chargedischarge+0xbb0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a30      	ldr	r2, [pc, #192]	; (8006cd8 <Batt_Protection_when_chargedischarge+0xba8>)
 8006c18:	6812      	ldr	r2, [r2, #0]
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7fa fad9 	bl	80011d4 <__aeabi_fcmpgt>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d017      	beq.n	8006c58 <Batt_Protection_when_chargedischarge+0xb28>
			if((test_tim2%500)==0){
 8006c28:	4b32      	ldr	r3, [pc, #200]	; (8006cf4 <Batt_Protection_when_chargedischarge+0xbc4>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	4b32      	ldr	r3, [pc, #200]	; (8006cf8 <Batt_Protection_when_chargedischarge+0xbc8>)
 8006c2e:	fb83 1302 	smull	r1, r3, r3, r2
 8006c32:	1159      	asrs	r1, r3, #5
 8006c34:	17d3      	asrs	r3, r2, #31
 8006c36:	1acb      	subs	r3, r1, r3
 8006c38:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006c3c:	fb01 f303 	mul.w	r3, r1, r3
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d120      	bne.n	8006c88 <Batt_Protection_when_chargedischarge+0xb58>
				BUZZ_Toggle;
 8006c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c4a:	482c      	ldr	r0, [pc, #176]	; (8006cfc <Batt_Protection_when_chargedischarge+0xbcc>)
 8006c4c:	f002 fbbb 	bl	80093c6 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006c50:	4b28      	ldr	r3, [pc, #160]	; (8006cf4 <Batt_Protection_when_chargedischarge+0xbc4>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8006c56:	e017      	b.n	8006c88 <Batt_Protection_when_chargedischarge+0xb58>
		else if(Pack_SOC <= SOC_Under_Set){
 8006c58:	4b21      	ldr	r3, [pc, #132]	; (8006ce0 <Batt_Protection_when_chargedischarge+0xbb0>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a1e      	ldr	r2, [pc, #120]	; (8006cd8 <Batt_Protection_when_chargedischarge+0xba8>)
 8006c5e:	6812      	ldr	r2, [r2, #0]
 8006c60:	4611      	mov	r1, r2
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fa faa2 	bl	80011ac <__aeabi_fcmple>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d100      	bne.n	8006c70 <Batt_Protection_when_chargedischarge+0xb40>
		if(Pack_SOC <= SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 8006c6e:	e0a9      	b.n	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
			Batt_Open_Mode();
 8006c70:	f7fa fc64 	bl	800153c <Batt_Open_Mode>
			flag_trip_SOCOverDischarge=ON;
 8006c74:	4b1b      	ldr	r3, [pc, #108]	; (8006ce4 <Batt_Protection_when_chargedischarge+0xbb4>)
 8006c76:	2201      	movs	r2, #1
 8006c78:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c80:	481e      	ldr	r0, [pc, #120]	; (8006cfc <Batt_Protection_when_chargedischarge+0xbcc>)
 8006c82:	f002 fb88 	bl	8009396 <HAL_GPIO_WritePin>
		if(Pack_SOC <= SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 8006c86:	e09d      	b.n	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
 8006c88:	e09c      	b.n	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
	else if(persen_imbalance >= Persen_Imbalance_Set + 5)
 8006c8a:	4b1d      	ldr	r3, [pc, #116]	; (8006d00 <Batt_Protection_when_chargedischarge+0xbd0>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4913      	ldr	r1, [pc, #76]	; (8006cdc <Batt_Protection_when_chargedischarge+0xbac>)
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7f9 ffdb 	bl	8000c4c <__addsf3>
 8006c96:	4603      	mov	r3, r0
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <Batt_Protection_when_chargedischarge+0xbd4>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	f7fa fa83 	bl	80011ac <__aeabi_fcmple>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d02f      	beq.n	8006d0c <Batt_Protection_when_chargedischarge+0xbdc>
		fault_code=6;
 8006cac:	4b0f      	ldr	r3, [pc, #60]	; (8006cec <Batt_Protection_when_chargedischarge+0xbbc>)
 8006cae:	2206      	movs	r2, #6
 8006cb0:	701a      	strb	r2, [r3, #0]
		if(persen_imbalance >= Persen_Imbalance_Set)
 8006cb2:	4b14      	ldr	r3, [pc, #80]	; (8006d04 <Batt_Protection_when_chargedischarge+0xbd4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a12      	ldr	r2, [pc, #72]	; (8006d00 <Batt_Protection_when_chargedischarge+0xbd0>)
 8006cb8:	6812      	ldr	r2, [r2, #0]
 8006cba:	4611      	mov	r1, r2
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fa fa7f 	bl	80011c0 <__aeabi_fcmpge>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d100      	bne.n	8006cca <Batt_Protection_when_chargedischarge+0xb9a>
}
 8006cc8:	e07c      	b.n	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
			flag_trip_unbalance=ON;
 8006cca:	4b0f      	ldr	r3, [pc, #60]	; (8006d08 <Batt_Protection_when_chargedischarge+0xbd8>)
 8006ccc:	2201      	movs	r2, #1
 8006cce:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 8006cd0:	f7fa fc34 	bl	800153c <Batt_Open_Mode>
}
 8006cd4:	e076      	b.n	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
 8006cd6:	bf00      	nop
 8006cd8:	20000238 	.word	0x20000238
 8006cdc:	40a00000 	.word	0x40a00000
 8006ce0:	20000388 	.word	0x20000388
 8006ce4:	20000338 	.word	0x20000338
 8006ce8:	20000699 	.word	0x20000699
 8006cec:	2000030a 	.word	0x2000030a
 8006cf0:	40400000 	.word	0x40400000
 8006cf4:	20000378 	.word	0x20000378
 8006cf8:	10624dd3 	.word	0x10624dd3
 8006cfc:	40011000 	.word	0x40011000
 8006d00:	2000002c 	.word	0x2000002c
 8006d04:	20000340 	.word	0x20000340
 8006d08:	20000259 	.word	0x20000259
		if(fault_code!=0){
 8006d0c:	4b30      	ldr	r3, [pc, #192]	; (8006dd0 <Batt_Protection_when_chargedischarge+0xca0>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <Batt_Protection_when_chargedischarge+0xbec>
			last_fault_code=fault_code;
 8006d14:	4b2e      	ldr	r3, [pc, #184]	; (8006dd0 <Batt_Protection_when_chargedischarge+0xca0>)
 8006d16:	781a      	ldrb	r2, [r3, #0]
 8006d18:	4b2e      	ldr	r3, [pc, #184]	; (8006dd4 <Batt_Protection_when_chargedischarge+0xca4>)
 8006d1a:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 8006d1c:	4b2c      	ldr	r3, [pc, #176]	; (8006dd0 <Batt_Protection_when_chargedischarge+0xca0>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	701a      	strb	r2, [r3, #0]
		T_Under_trip=0;
 8006d22:	4b2d      	ldr	r3, [pc, #180]	; (8006dd8 <Batt_Protection_when_chargedischarge+0xca8>)
 8006d24:	f04f 0200 	mov.w	r2, #0
 8006d28:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 8006d2a:	4b2c      	ldr	r3, [pc, #176]	; (8006ddc <Batt_Protection_when_chargedischarge+0xcac>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7f9 fbe6 	bl	8000500 <__aeabi_f2d>
 8006d34:	a324      	add	r3, pc, #144	; (adr r3, 8006dc8 <Batt_Protection_when_chargedischarge+0xc98>)
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	f7f9 fa81 	bl	8000240 <__aeabi_dsub>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	4610      	mov	r0, r2
 8006d44:	4619      	mov	r1, r3
 8006d46:	f7f9 ff2b 	bl	8000ba0 <__aeabi_d2f>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	4a23      	ldr	r2, [pc, #140]	; (8006ddc <Batt_Protection_when_chargedischarge+0xcac>)
 8006d4e:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 8006d50:	4b23      	ldr	r3, [pc, #140]	; (8006de0 <Batt_Protection_when_chargedischarge+0xcb0>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7f9 fbd3 	bl	8000500 <__aeabi_f2d>
 8006d5a:	a31b      	add	r3, pc, #108	; (adr r3, 8006dc8 <Batt_Protection_when_chargedischarge+0xc98>)
 8006d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d60:	f7f9 fa6e 	bl	8000240 <__aeabi_dsub>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	f7f9 ff18 	bl	8000ba0 <__aeabi_d2f>
 8006d70:	4603      	mov	r3, r0
 8006d72:	4a1b      	ldr	r2, [pc, #108]	; (8006de0 <Batt_Protection_when_chargedischarge+0xcb0>)
 8006d74:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006d76:	2200      	movs	r2, #0
 8006d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d7c:	4819      	ldr	r0, [pc, #100]	; (8006de4 <Batt_Protection_when_chargedischarge+0xcb4>)
 8006d7e:	f002 fb0a 	bl	8009396 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
 8006d82:	4b16      	ldr	r3, [pc, #88]	; (8006ddc <Batt_Protection_when_chargedischarge+0xcac>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f04f 0100 	mov.w	r1, #0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fa fa04 	bl	8001198 <__aeabi_fcmplt>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <Batt_Protection_when_chargedischarge+0xc6e>
			T_trip_cycle=0;
 8006d96:	4b11      	ldr	r3, [pc, #68]	; (8006ddc <Batt_Protection_when_chargedischarge+0xcac>)
 8006d98:	f04f 0200 	mov.w	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle<0)
 8006d9e:	4b10      	ldr	r3, [pc, #64]	; (8006de0 <Batt_Protection_when_chargedischarge+0xcb0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f04f 0100 	mov.w	r1, #0
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fa f9f6 	bl	8001198 <__aeabi_fcmplt>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d100      	bne.n	8006db4 <Batt_Protection_when_chargedischarge+0xc84>
}
 8006db2:	e007      	b.n	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
			T_I_Over_trip_cycle=0;
 8006db4:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <Batt_Protection_when_chargedischarge+0xcb0>)
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]
}
 8006dbc:	e002      	b.n	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
			if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8006dbe:	bf00      	nop
 8006dc0:	e000      	b.n	8006dc4 <Batt_Protection_when_chargedischarge+0xc94>
			if(flag_trip_overcurrentcharge==OFF) {
 8006dc2:	bf00      	nop
}
 8006dc4:	bf00      	nop
 8006dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8006dc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8006dcc:	3f50624d 	.word	0x3f50624d
 8006dd0:	2000030a 	.word	0x2000030a
 8006dd4:	20000385 	.word	0x20000385
 8006dd8:	20000870 	.word	0x20000870
 8006ddc:	2000087c 	.word	0x2000087c
 8006de0:	2000034c 	.word	0x2000034c
 8006de4:	40011000 	.word	0x40011000

08006de8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
	return 1;
 8006dec:	2301      	movs	r3, #1
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bc80      	pop	{r7}
 8006df4:	4770      	bx	lr

08006df6 <_kill>:

int _kill(int pid, int sig)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b082      	sub	sp, #8
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006e00:	f004 fdae 	bl	800b960 <__errno>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2216      	movs	r2, #22
 8006e08:	601a      	str	r2, [r3, #0]
	return -1;
 8006e0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <_exit>:

void _exit (int status)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006e1e:	f04f 31ff 	mov.w	r1, #4294967295
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7ff ffe7 	bl	8006df6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006e28:	e7fe      	b.n	8006e28 <_exit+0x12>

08006e2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b086      	sub	sp, #24
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e36:	2300      	movs	r3, #0
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	e00a      	b.n	8006e52 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006e3c:	f3af 8000 	nop.w
 8006e40:	4601      	mov	r1, r0
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	60ba      	str	r2, [r7, #8]
 8006e48:	b2ca      	uxtb	r2, r1
 8006e4a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	dbf0      	blt.n	8006e3c <_read+0x12>
	}

return len;
 8006e5a:	687b      	ldr	r3, [r7, #4]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e70:	2300      	movs	r3, #0
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	e009      	b.n	8006e8a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	60ba      	str	r2, [r7, #8]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	3301      	adds	r3, #1
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	dbf1      	blt.n	8006e76 <_write+0x12>
	}
	return len;
 8006e92:	687b      	ldr	r3, [r7, #4]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <_close>:

int _close(int file)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
	return -1;
 8006ea4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bc80      	pop	{r7}
 8006eb0:	4770      	bx	lr

08006eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ec2:	605a      	str	r2, [r3, #4]
	return 0;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bc80      	pop	{r7}
 8006ece:	4770      	bx	lr

08006ed0 <_isatty>:

int _isatty(int file)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
	return 1;
 8006ed8:	2301      	movs	r3, #1
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bc80      	pop	{r7}
 8006ee2:	4770      	bx	lr

08006ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
	return 0;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bc80      	pop	{r7}
 8006efa:	4770      	bx	lr

08006efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f04:	4a14      	ldr	r2, [pc, #80]	; (8006f58 <_sbrk+0x5c>)
 8006f06:	4b15      	ldr	r3, [pc, #84]	; (8006f5c <_sbrk+0x60>)
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f10:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <_sbrk+0x64>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d102      	bne.n	8006f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f18:	4b11      	ldr	r3, [pc, #68]	; (8006f60 <_sbrk+0x64>)
 8006f1a:	4a12      	ldr	r2, [pc, #72]	; (8006f64 <_sbrk+0x68>)
 8006f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f1e:	4b10      	ldr	r3, [pc, #64]	; (8006f60 <_sbrk+0x64>)
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4413      	add	r3, r2
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d207      	bcs.n	8006f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f2c:	f004 fd18 	bl	800b960 <__errno>
 8006f30:	4603      	mov	r3, r0
 8006f32:	220c      	movs	r2, #12
 8006f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3a:	e009      	b.n	8006f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006f3c:	4b08      	ldr	r3, [pc, #32]	; (8006f60 <_sbrk+0x64>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f42:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <_sbrk+0x64>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4413      	add	r3, r2
 8006f4a:	4a05      	ldr	r2, [pc, #20]	; (8006f60 <_sbrk+0x64>)
 8006f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	20018000 	.word	0x20018000
 8006f5c:	00000400 	.word	0x00000400
 8006f60:	2000023c 	.word	0x2000023c
 8006f64:	20000938 	.word	0x20000938

08006f68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006f6c:	bf00      	nop
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bc80      	pop	{r7}
 8006f72:	4770      	bx	lr

08006f74 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006f7a:	f107 0308 	add.w	r3, r7, #8
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	605a      	str	r2, [r3, #4]
 8006f84:	609a      	str	r2, [r3, #8]
 8006f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f88:	463b      	mov	r3, r7
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006f90:	4b1e      	ldr	r3, [pc, #120]	; (800700c <MX_TIM2_Init+0x98>)
 8006f92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006f96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8006f98:	4b1c      	ldr	r3, [pc, #112]	; (800700c <MX_TIM2_Init+0x98>)
 8006f9a:	f240 227f 	movw	r2, #639	; 0x27f
 8006f9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fa0:	4b1a      	ldr	r3, [pc, #104]	; (800700c <MX_TIM2_Init+0x98>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8006fa6:	4b19      	ldr	r3, [pc, #100]	; (800700c <MX_TIM2_Init+0x98>)
 8006fa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006fac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006fae:	4b17      	ldr	r3, [pc, #92]	; (800700c <MX_TIM2_Init+0x98>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006fb4:	4b15      	ldr	r3, [pc, #84]	; (800700c <MX_TIM2_Init+0x98>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006fba:	4814      	ldr	r0, [pc, #80]	; (800700c <MX_TIM2_Init+0x98>)
 8006fbc:	f004 f858 	bl	800b070 <HAL_TIM_Base_Init>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006fc6:	f7fd f8c5 	bl	8004154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006fd0:	f107 0308 	add.w	r3, r7, #8
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	480d      	ldr	r0, [pc, #52]	; (800700c <MX_TIM2_Init+0x98>)
 8006fd8:	f004 fa10 	bl	800b3fc <HAL_TIM_ConfigClockSource>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006fe2:	f7fd f8b7 	bl	8004154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006fea:	2300      	movs	r3, #0
 8006fec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006fee:	463b      	mov	r3, r7
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4806      	ldr	r0, [pc, #24]	; (800700c <MX_TIM2_Init+0x98>)
 8006ff4:	f004 fc28 	bl	800b848 <HAL_TIMEx_MasterConfigSynchronization>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006ffe:	f7fd f8a9 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007002:	bf00      	nop
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	200008dc 	.word	0x200008dc

08007010 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007016:	f107 0308 	add.w	r3, r7, #8
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	605a      	str	r2, [r3, #4]
 8007020:	609a      	str	r2, [r3, #8]
 8007022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007024:	463b      	mov	r3, r7
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800702c:	4b1d      	ldr	r3, [pc, #116]	; (80070a4 <MX_TIM3_Init+0x94>)
 800702e:	4a1e      	ldr	r2, [pc, #120]	; (80070a8 <MX_TIM3_Init+0x98>)
 8007030:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8007032:	4b1c      	ldr	r3, [pc, #112]	; (80070a4 <MX_TIM3_Init+0x94>)
 8007034:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8007038:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800703a:	4b1a      	ldr	r3, [pc, #104]	; (80070a4 <MX_TIM3_Init+0x94>)
 800703c:	2200      	movs	r2, #0
 800703e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 333;
 8007040:	4b18      	ldr	r3, [pc, #96]	; (80070a4 <MX_TIM3_Init+0x94>)
 8007042:	f240 124d 	movw	r2, #333	; 0x14d
 8007046:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007048:	4b16      	ldr	r3, [pc, #88]	; (80070a4 <MX_TIM3_Init+0x94>)
 800704a:	2200      	movs	r2, #0
 800704c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800704e:	4b15      	ldr	r3, [pc, #84]	; (80070a4 <MX_TIM3_Init+0x94>)
 8007050:	2200      	movs	r2, #0
 8007052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007054:	4813      	ldr	r0, [pc, #76]	; (80070a4 <MX_TIM3_Init+0x94>)
 8007056:	f004 f80b 	bl	800b070 <HAL_TIM_Base_Init>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007060:	f7fd f878 	bl	8004154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007068:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800706a:	f107 0308 	add.w	r3, r7, #8
 800706e:	4619      	mov	r1, r3
 8007070:	480c      	ldr	r0, [pc, #48]	; (80070a4 <MX_TIM3_Init+0x94>)
 8007072:	f004 f9c3 	bl	800b3fc <HAL_TIM_ConfigClockSource>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800707c:	f7fd f86a 	bl	8004154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007080:	2300      	movs	r3, #0
 8007082:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007084:	2300      	movs	r3, #0
 8007086:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007088:	463b      	mov	r3, r7
 800708a:	4619      	mov	r1, r3
 800708c:	4805      	ldr	r0, [pc, #20]	; (80070a4 <MX_TIM3_Init+0x94>)
 800708e:	f004 fbdb 	bl	800b848 <HAL_TIMEx_MasterConfigSynchronization>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007098:	f7fd f85c 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800709c:	bf00      	nop
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	20000894 	.word	0x20000894
 80070a8:	40000400 	.word	0x40000400

080070ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070bc:	d114      	bne.n	80070e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80070be:	4b19      	ldr	r3, [pc, #100]	; (8007124 <HAL_TIM_Base_MspInit+0x78>)
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	4a18      	ldr	r2, [pc, #96]	; (8007124 <HAL_TIM_Base_MspInit+0x78>)
 80070c4:	f043 0301 	orr.w	r3, r3, #1
 80070c8:	61d3      	str	r3, [r2, #28]
 80070ca:	4b16      	ldr	r3, [pc, #88]	; (8007124 <HAL_TIM_Base_MspInit+0x78>)
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80070d6:	2200      	movs	r2, #0
 80070d8:	2100      	movs	r1, #0
 80070da:	201c      	movs	r0, #28
 80070dc:	f001 fc39 	bl	8008952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80070e0:	201c      	movs	r0, #28
 80070e2:	f001 fc52 	bl	800898a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80070e6:	e018      	b.n	800711a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a0e      	ldr	r2, [pc, #56]	; (8007128 <HAL_TIM_Base_MspInit+0x7c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d113      	bne.n	800711a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80070f2:	4b0c      	ldr	r3, [pc, #48]	; (8007124 <HAL_TIM_Base_MspInit+0x78>)
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	4a0b      	ldr	r2, [pc, #44]	; (8007124 <HAL_TIM_Base_MspInit+0x78>)
 80070f8:	f043 0302 	orr.w	r3, r3, #2
 80070fc:	61d3      	str	r3, [r2, #28]
 80070fe:	4b09      	ldr	r3, [pc, #36]	; (8007124 <HAL_TIM_Base_MspInit+0x78>)
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	60bb      	str	r3, [r7, #8]
 8007108:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800710a:	2200      	movs	r2, #0
 800710c:	2100      	movs	r1, #0
 800710e:	201d      	movs	r0, #29
 8007110:	f001 fc1f 	bl	8008952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007114:	201d      	movs	r0, #29
 8007116:	f001 fc38 	bl	800898a <HAL_NVIC_EnableIRQ>
}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	40021000 	.word	0x40021000
 8007128:	40000400 	.word	0x40000400

0800712c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800712c:	480c      	ldr	r0, [pc, #48]	; (8007160 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800712e:	490d      	ldr	r1, [pc, #52]	; (8007164 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007130:	4a0d      	ldr	r2, [pc, #52]	; (8007168 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007134:	e002      	b.n	800713c <LoopCopyDataInit>

08007136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800713a:	3304      	adds	r3, #4

0800713c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800713c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800713e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007140:	d3f9      	bcc.n	8007136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007142:	4a0a      	ldr	r2, [pc, #40]	; (800716c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007144:	4c0a      	ldr	r4, [pc, #40]	; (8007170 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007148:	e001      	b.n	800714e <LoopFillZerobss>

0800714a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800714a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800714c:	3204      	adds	r2, #4

0800714e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800714e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007150:	d3fb      	bcc.n	800714a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007152:	f7ff ff09 	bl	8006f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007156:	f004 fc09 	bl	800b96c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800715a:	f7fc fcf5 	bl	8003b48 <main>
  bx lr
 800715e:	4770      	bx	lr
  ldr r0, =_sdata
 8007160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007164:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8007168:	08010fa4 	.word	0x08010fa4
  ldr r2, =_sbss
 800716c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8007170:	20000938 	.word	0x20000938

08007174 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007174:	e7fe      	b.n	8007174 <ADC1_2_IRQHandler>
	...

08007178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800717c:	4b08      	ldr	r3, [pc, #32]	; (80071a0 <HAL_Init+0x28>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a07      	ldr	r2, [pc, #28]	; (80071a0 <HAL_Init+0x28>)
 8007182:	f043 0310 	orr.w	r3, r3, #16
 8007186:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007188:	2003      	movs	r0, #3
 800718a:	f001 fbd7 	bl	800893c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800718e:	200f      	movs	r0, #15
 8007190:	f000 f808 	bl	80071a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007194:	f7fc ffe4 	bl	8004160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	40022000 	.word	0x40022000

080071a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80071ac:	4b12      	ldr	r3, [pc, #72]	; (80071f8 <HAL_InitTick+0x54>)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	4b12      	ldr	r3, [pc, #72]	; (80071fc <HAL_InitTick+0x58>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	4619      	mov	r1, r3
 80071b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80071be:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c2:	4618      	mov	r0, r3
 80071c4:	f001 fbef 	bl	80089a6 <HAL_SYSTICK_Config>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e00e      	b.n	80071f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b0f      	cmp	r3, #15
 80071d6:	d80a      	bhi.n	80071ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80071d8:	2200      	movs	r2, #0
 80071da:	6879      	ldr	r1, [r7, #4]
 80071dc:	f04f 30ff 	mov.w	r0, #4294967295
 80071e0:	f001 fbb7 	bl	8008952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80071e4:	4a06      	ldr	r2, [pc, #24]	; (8007200 <HAL_InitTick+0x5c>)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	e000      	b.n	80071f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20000034 	.word	0x20000034
 80071fc:	2000003c 	.word	0x2000003c
 8007200:	20000038 	.word	0x20000038

08007204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007208:	4b05      	ldr	r3, [pc, #20]	; (8007220 <HAL_IncTick+0x1c>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	461a      	mov	r2, r3
 800720e:	4b05      	ldr	r3, [pc, #20]	; (8007224 <HAL_IncTick+0x20>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4413      	add	r3, r2
 8007214:	4a03      	ldr	r2, [pc, #12]	; (8007224 <HAL_IncTick+0x20>)
 8007216:	6013      	str	r3, [r2, #0]
}
 8007218:	bf00      	nop
 800721a:	46bd      	mov	sp, r7
 800721c:	bc80      	pop	{r7}
 800721e:	4770      	bx	lr
 8007220:	2000003c 	.word	0x2000003c
 8007224:	20000924 	.word	0x20000924

08007228 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  return uwTick;
 800722c:	4b02      	ldr	r3, [pc, #8]	; (8007238 <HAL_GetTick+0x10>)
 800722e:	681b      	ldr	r3, [r3, #0]
}
 8007230:	4618      	mov	r0, r3
 8007232:	46bd      	mov	sp, r7
 8007234:	bc80      	pop	{r7}
 8007236:	4770      	bx	lr
 8007238:	20000924 	.word	0x20000924

0800723c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007244:	f7ff fff0 	bl	8007228 <HAL_GetTick>
 8007248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007254:	d005      	beq.n	8007262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007256:	4b0a      	ldr	r3, [pc, #40]	; (8007280 <HAL_Delay+0x44>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007262:	bf00      	nop
 8007264:	f7ff ffe0 	bl	8007228 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	429a      	cmp	r2, r3
 8007272:	d8f7      	bhi.n	8007264 <HAL_Delay+0x28>
  {
  }
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	2000003c 	.word	0x2000003c

08007284 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e0ce      	b.n	8007444 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d109      	bne.n	80072c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7fb fd12 	bl	8002cec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fb11 	bl	80078f0 <ADC_ConversionStop_Disable>
 80072ce:	4603      	mov	r3, r0
 80072d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d6:	f003 0310 	and.w	r3, r3, #16
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f040 80a9 	bne.w	8007432 <HAL_ADC_Init+0x1ae>
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f040 80a5 	bne.w	8007432 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80072f0:	f023 0302 	bic.w	r3, r3, #2
 80072f4:	f043 0202 	orr.w	r2, r3, #2
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4951      	ldr	r1, [pc, #324]	; (800744c <HAL_ADC_Init+0x1c8>)
 8007306:	428b      	cmp	r3, r1
 8007308:	d10a      	bne.n	8007320 <HAL_ADC_Init+0x9c>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007312:	d002      	beq.n	800731a <HAL_ADC_Init+0x96>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	e004      	b.n	8007324 <HAL_ADC_Init+0xa0>
 800731a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800731e:	e001      	b.n	8007324 <HAL_ADC_Init+0xa0>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007324:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	7b1b      	ldrb	r3, [r3, #12]
 800732a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800732c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	4313      	orrs	r3, r2
 8007332:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800733c:	d003      	beq.n	8007346 <HAL_ADC_Init+0xc2>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d102      	bne.n	800734c <HAL_ADC_Init+0xc8>
 8007346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800734a:	e000      	b.n	800734e <HAL_ADC_Init+0xca>
 800734c:	2300      	movs	r3, #0
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	7d1b      	ldrb	r3, [r3, #20]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d119      	bne.n	8007390 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	7b1b      	ldrb	r3, [r3, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d109      	bne.n	8007378 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	3b01      	subs	r3, #1
 800736a:	035a      	lsls	r2, r3, #13
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	4313      	orrs	r3, r2
 8007370:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007374:	613b      	str	r3, [r7, #16]
 8007376:	e00b      	b.n	8007390 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737c:	f043 0220 	orr.w	r2, r3, #32
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	f043 0201 	orr.w	r2, r3, #1
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	430a      	orrs	r2, r1
 80073a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	4b29      	ldr	r3, [pc, #164]	; (8007450 <HAL_ADC_Init+0x1cc>)
 80073ac:	4013      	ands	r3, r2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6812      	ldr	r2, [r2, #0]
 80073b2:	68b9      	ldr	r1, [r7, #8]
 80073b4:	430b      	orrs	r3, r1
 80073b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c0:	d003      	beq.n	80073ca <HAL_ADC_Init+0x146>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d104      	bne.n	80073d4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	051b      	lsls	r3, r3, #20
 80073d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073da:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689a      	ldr	r2, [r3, #8]
 80073ee:	4b19      	ldr	r3, [pc, #100]	; (8007454 <HAL_ADC_Init+0x1d0>)
 80073f0:	4013      	ands	r3, r2
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d10b      	bne.n	8007410 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007402:	f023 0303 	bic.w	r3, r3, #3
 8007406:	f043 0201 	orr.w	r2, r3, #1
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800740e:	e018      	b.n	8007442 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007414:	f023 0312 	bic.w	r3, r3, #18
 8007418:	f043 0210 	orr.w	r2, r3, #16
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007424:	f043 0201 	orr.w	r2, r3, #1
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007430:	e007      	b.n	8007442 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007436:	f043 0210 	orr.w	r2, r3, #16
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007442:	7dfb      	ldrb	r3, [r7, #23]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	40013c00 	.word	0x40013c00
 8007450:	ffe1f7fd 	.word	0xffe1f7fd
 8007454:	ff1f0efe 	.word	0xff1f0efe

08007458 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a64      	ldr	r2, [pc, #400]	; (8007600 <HAL_ADC_Start_DMA+0x1a8>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d004      	beq.n	800747c <HAL_ADC_Start_DMA+0x24>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a63      	ldr	r2, [pc, #396]	; (8007604 <HAL_ADC_Start_DMA+0x1ac>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d106      	bne.n	800748a <HAL_ADC_Start_DMA+0x32>
 800747c:	4b60      	ldr	r3, [pc, #384]	; (8007600 <HAL_ADC_Start_DMA+0x1a8>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007484:	2b00      	cmp	r3, #0
 8007486:	f040 80b3 	bne.w	80075f0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007490:	2b01      	cmp	r3, #1
 8007492:	d101      	bne.n	8007498 <HAL_ADC_Start_DMA+0x40>
 8007494:	2302      	movs	r3, #2
 8007496:	e0ae      	b.n	80075f6 <HAL_ADC_Start_DMA+0x19e>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 f9cb 	bl	800783c <ADC_Enable>
 80074a6:	4603      	mov	r3, r0
 80074a8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f040 809a 	bne.w	80075e6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80074ba:	f023 0301 	bic.w	r3, r3, #1
 80074be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a4e      	ldr	r2, [pc, #312]	; (8007604 <HAL_ADC_Start_DMA+0x1ac>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d105      	bne.n	80074dc <HAL_ADC_Start_DMA+0x84>
 80074d0:	4b4b      	ldr	r3, [pc, #300]	; (8007600 <HAL_ADC_Start_DMA+0x1a8>)
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d115      	bne.n	8007508 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d026      	beq.n	8007544 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80074fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007506:	e01d      	b.n	8007544 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a39      	ldr	r2, [pc, #228]	; (8007600 <HAL_ADC_Start_DMA+0x1a8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d004      	beq.n	8007528 <HAL_ADC_Start_DMA+0xd0>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a38      	ldr	r2, [pc, #224]	; (8007604 <HAL_ADC_Start_DMA+0x1ac>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d10d      	bne.n	8007544 <HAL_ADC_Start_DMA+0xec>
 8007528:	4b35      	ldr	r3, [pc, #212]	; (8007600 <HAL_ADC_Start_DMA+0x1a8>)
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007538:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800753c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d006      	beq.n	800755e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	f023 0206 	bic.w	r2, r3, #6
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	62da      	str	r2, [r3, #44]	; 0x2c
 800755c:	e002      	b.n	8007564 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	4a25      	ldr	r2, [pc, #148]	; (8007608 <HAL_ADC_Start_DMA+0x1b0>)
 8007572:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	4a24      	ldr	r2, [pc, #144]	; (800760c <HAL_ADC_Start_DMA+0x1b4>)
 800757a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	4a23      	ldr	r2, [pc, #140]	; (8007610 <HAL_ADC_Start_DMA+0x1b8>)
 8007582:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f06f 0202 	mvn.w	r2, #2
 800758c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800759c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a18      	ldr	r0, [r3, #32]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	334c      	adds	r3, #76	; 0x4c
 80075a8:	4619      	mov	r1, r3
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f001 fa7d 	bl	8008aac <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80075bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80075c0:	d108      	bne.n	80075d4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80075d0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80075d2:	e00f      	b.n	80075f4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689a      	ldr	r2, [r3, #8]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80075e2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80075e4:	e006      	b.n	80075f4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80075ee:	e001      	b.n	80075f4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40012400 	.word	0x40012400
 8007604:	40012800 	.word	0x40012800
 8007608:	08007973 	.word	0x08007973
 800760c:	080079ef 	.word	0x080079ef
 8007610:	08007a0b 	.word	0x08007a0b

08007614 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	bc80      	pop	{r7}
 8007624:	4770      	bx	lr

08007626 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	bc80      	pop	{r7}
 8007636:	4770      	bx	lr

08007638 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	bc80      	pop	{r7}
 8007648:	4770      	bx	lr
	...

0800764c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007664:	2b01      	cmp	r3, #1
 8007666:	d101      	bne.n	800766c <HAL_ADC_ConfigChannel+0x20>
 8007668:	2302      	movs	r3, #2
 800766a:	e0dc      	b.n	8007826 <HAL_ADC_ConfigChannel+0x1da>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	2b06      	cmp	r3, #6
 800767a:	d81c      	bhi.n	80076b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	4613      	mov	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	3b05      	subs	r3, #5
 800768e:	221f      	movs	r2, #31
 8007690:	fa02 f303 	lsl.w	r3, r2, r3
 8007694:	43db      	mvns	r3, r3
 8007696:	4019      	ands	r1, r3
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	6818      	ldr	r0, [r3, #0]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	4613      	mov	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	3b05      	subs	r3, #5
 80076a8:	fa00 f203 	lsl.w	r2, r0, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	635a      	str	r2, [r3, #52]	; 0x34
 80076b4:	e03c      	b.n	8007730 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2b0c      	cmp	r3, #12
 80076bc:	d81c      	bhi.n	80076f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	3b23      	subs	r3, #35	; 0x23
 80076d0:	221f      	movs	r2, #31
 80076d2:	fa02 f303 	lsl.w	r3, r2, r3
 80076d6:	43db      	mvns	r3, r3
 80076d8:	4019      	ands	r1, r3
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	6818      	ldr	r0, [r3, #0]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	3b23      	subs	r3, #35	; 0x23
 80076ea:	fa00 f203 	lsl.w	r2, r0, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	631a      	str	r2, [r3, #48]	; 0x30
 80076f6:	e01b      	b.n	8007730 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	3b41      	subs	r3, #65	; 0x41
 800770a:	221f      	movs	r2, #31
 800770c:	fa02 f303 	lsl.w	r3, r2, r3
 8007710:	43db      	mvns	r3, r3
 8007712:	4019      	ands	r1, r3
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	6818      	ldr	r0, [r3, #0]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	4613      	mov	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	3b41      	subs	r3, #65	; 0x41
 8007724:	fa00 f203 	lsl.w	r2, r0, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b09      	cmp	r3, #9
 8007736:	d91c      	bls.n	8007772 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68d9      	ldr	r1, [r3, #12]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	4613      	mov	r3, r2
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	4413      	add	r3, r2
 8007748:	3b1e      	subs	r3, #30
 800774a:	2207      	movs	r2, #7
 800774c:	fa02 f303 	lsl.w	r3, r2, r3
 8007750:	43db      	mvns	r3, r3
 8007752:	4019      	ands	r1, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	6898      	ldr	r0, [r3, #8]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	4613      	mov	r3, r2
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	4413      	add	r3, r2
 8007762:	3b1e      	subs	r3, #30
 8007764:	fa00 f203 	lsl.w	r2, r0, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	60da      	str	r2, [r3, #12]
 8007770:	e019      	b.n	80077a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6919      	ldr	r1, [r3, #16]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	4613      	mov	r3, r2
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	4413      	add	r3, r2
 8007782:	2207      	movs	r2, #7
 8007784:	fa02 f303 	lsl.w	r3, r2, r3
 8007788:	43db      	mvns	r3, r3
 800778a:	4019      	ands	r1, r3
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	6898      	ldr	r0, [r3, #8]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	4613      	mov	r3, r2
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	4413      	add	r3, r2
 800779a:	fa00 f203 	lsl.w	r2, r0, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b10      	cmp	r3, #16
 80077ac:	d003      	beq.n	80077b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80077b2:	2b11      	cmp	r3, #17
 80077b4:	d132      	bne.n	800781c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a1d      	ldr	r2, [pc, #116]	; (8007830 <HAL_ADC_ConfigChannel+0x1e4>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d125      	bne.n	800780c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d126      	bne.n	800781c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80077dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d11a      	bne.n	800781c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80077e6:	4b13      	ldr	r3, [pc, #76]	; (8007834 <HAL_ADC_ConfigChannel+0x1e8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a13      	ldr	r2, [pc, #76]	; (8007838 <HAL_ADC_ConfigChannel+0x1ec>)
 80077ec:	fba2 2303 	umull	r2, r3, r2, r3
 80077f0:	0c9a      	lsrs	r2, r3, #18
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80077fc:	e002      	b.n	8007804 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	3b01      	subs	r3, #1
 8007802:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1f9      	bne.n	80077fe <HAL_ADC_ConfigChannel+0x1b2>
 800780a:	e007      	b.n	800781c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007810:	f043 0220 	orr.w	r2, r3, #32
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	bc80      	pop	{r7}
 800782e:	4770      	bx	lr
 8007830:	40012400 	.word	0x40012400
 8007834:	20000034 	.word	0x20000034
 8007838:	431bde83 	.word	0x431bde83

0800783c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b01      	cmp	r3, #1
 8007858:	d040      	beq.n	80078dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f042 0201 	orr.w	r2, r2, #1
 8007868:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800786a:	4b1f      	ldr	r3, [pc, #124]	; (80078e8 <ADC_Enable+0xac>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1f      	ldr	r2, [pc, #124]	; (80078ec <ADC_Enable+0xb0>)
 8007870:	fba2 2303 	umull	r2, r3, r2, r3
 8007874:	0c9b      	lsrs	r3, r3, #18
 8007876:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007878:	e002      	b.n	8007880 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	3b01      	subs	r3, #1
 800787e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f9      	bne.n	800787a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007886:	f7ff fccf 	bl	8007228 <HAL_GetTick>
 800788a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800788c:	e01f      	b.n	80078ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800788e:	f7ff fccb 	bl	8007228 <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	2b02      	cmp	r3, #2
 800789a:	d918      	bls.n	80078ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d011      	beq.n	80078ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ae:	f043 0210 	orr.w	r2, r3, #16
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	f043 0201 	orr.w	r2, r3, #1
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e007      	b.n	80078de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d1d8      	bne.n	800788e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20000034 	.word	0x20000034
 80078ec:	431bde83 	.word	0x431bde83

080078f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078f8:	2300      	movs	r3, #0
 80078fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b01      	cmp	r3, #1
 8007908:	d12e      	bne.n	8007968 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 0201 	bic.w	r2, r2, #1
 8007918:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800791a:	f7ff fc85 	bl	8007228 <HAL_GetTick>
 800791e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007920:	e01b      	b.n	800795a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007922:	f7ff fc81 	bl	8007228 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	2b02      	cmp	r3, #2
 800792e:	d914      	bls.n	800795a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b01      	cmp	r3, #1
 800793c:	d10d      	bne.n	800795a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	f043 0210 	orr.w	r2, r3, #16
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794e:	f043 0201 	orr.w	r2, r3, #1
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e007      	b.n	800796a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b01      	cmp	r3, #1
 8007966:	d0dc      	beq.n	8007922 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007988:	2b00      	cmp	r3, #0
 800798a:	d127      	bne.n	80079dc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007990:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80079a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80079a6:	d115      	bne.n	80079d4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d111      	bne.n	80079d4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079cc:	f043 0201 	orr.w	r2, r3, #1
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f7ff fe1d 	bl	8007614 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80079da:	e004      	b.n	80079e6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a1b      	ldr	r3, [r3, #32]
 80079e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	4798      	blx	r3
}
 80079e6:	bf00      	nop
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f7ff fe12 	bl	8007626 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007a02:	bf00      	nop
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a28:	f043 0204 	orr.w	r2, r3, #4
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f7ff fe01 	bl	8007638 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007a36:	bf00      	nop
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e0ed      	b.n	8007c2c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d102      	bne.n	8007a62 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f7fb f9fb 	bl	8002e58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f042 0201 	orr.w	r2, r2, #1
 8007a70:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a72:	f7ff fbd9 	bl	8007228 <HAL_GetTick>
 8007a76:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007a78:	e012      	b.n	8007aa0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007a7a:	f7ff fbd5 	bl	8007228 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	2b0a      	cmp	r3, #10
 8007a86:	d90b      	bls.n	8007aa0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2205      	movs	r2, #5
 8007a98:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e0c5      	b.n	8007c2c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d0e5      	beq.n	8007a7a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0202 	bic.w	r2, r2, #2
 8007abc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007abe:	f7ff fbb3 	bl	8007228 <HAL_GetTick>
 8007ac2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007ac4:	e012      	b.n	8007aec <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007ac6:	f7ff fbaf 	bl	8007228 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b0a      	cmp	r3, #10
 8007ad2:	d90b      	bls.n	8007aec <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2205      	movs	r2, #5
 8007ae4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e09f      	b.n	8007c2c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1e5      	bne.n	8007ac6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	7e1b      	ldrb	r3, [r3, #24]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d108      	bne.n	8007b14 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	e007      	b.n	8007b24 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	7e5b      	ldrb	r3, [r3, #25]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d108      	bne.n	8007b3e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	e007      	b.n	8007b4e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	7e9b      	ldrb	r3, [r3, #26]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d108      	bne.n	8007b68 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f042 0220 	orr.w	r2, r2, #32
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	e007      	b.n	8007b78 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 0220 	bic.w	r2, r2, #32
 8007b76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	7edb      	ldrb	r3, [r3, #27]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d108      	bne.n	8007b92 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0210 	bic.w	r2, r2, #16
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	e007      	b.n	8007ba2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f042 0210 	orr.w	r2, r2, #16
 8007ba0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	7f1b      	ldrb	r3, [r3, #28]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d108      	bne.n	8007bbc <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f042 0208 	orr.w	r2, r2, #8
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	e007      	b.n	8007bcc <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f022 0208 	bic.w	r2, r2, #8
 8007bca:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	7f5b      	ldrb	r3, [r3, #29]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d108      	bne.n	8007be6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f042 0204 	orr.w	r2, r2, #4
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	e007      	b.n	8007bf6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0204 	bic.w	r2, r2, #4
 8007bf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	431a      	orrs	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	ea42 0103 	orr.w	r1, r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	1e5a      	subs	r2, r3, #1
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c4a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007c4c:	7cfb      	ldrb	r3, [r7, #19]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d003      	beq.n	8007c5a <HAL_CAN_ConfigFilter+0x26>
 8007c52:	7cfb      	ldrb	r3, [r7, #19]
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	f040 80aa 	bne.w	8007dae <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c60:	f043 0201 	orr.w	r2, r3, #1
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	f003 031f 	and.w	r3, r3, #31
 8007c72:	2201      	movs	r2, #1
 8007c74:	fa02 f303 	lsl.w	r3, r2, r3
 8007c78:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	43db      	mvns	r3, r3
 8007c84:	401a      	ands	r2, r3
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d123      	bne.n	8007cdc <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	43db      	mvns	r3, r3
 8007c9e:	401a      	ands	r2, r3
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007cb6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	3248      	adds	r2, #72	; 0x48
 8007cbc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007cd0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007cd2:	6979      	ldr	r1, [r7, #20]
 8007cd4:	3348      	adds	r3, #72	; 0x48
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	440b      	add	r3, r1
 8007cda:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d122      	bne.n	8007d2a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	431a      	orrs	r2, r3
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007d04:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	3248      	adds	r2, #72	; 0x48
 8007d0a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007d1e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007d20:	6979      	ldr	r1, [r7, #20]
 8007d22:	3348      	adds	r3, #72	; 0x48
 8007d24:	00db      	lsls	r3, r3, #3
 8007d26:	440b      	add	r3, r1
 8007d28:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d109      	bne.n	8007d46 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	43db      	mvns	r3, r3
 8007d3c:	401a      	ands	r2, r3
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007d44:	e007      	b.n	8007d56 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d109      	bne.n	8007d72 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	43db      	mvns	r3, r3
 8007d68:	401a      	ands	r2, r3
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007d70:	e007      	b.n	8007d82 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d107      	bne.n	8007d9a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	431a      	orrs	r2, r3
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007da0:	f023 0201 	bic.w	r2, r3, #1
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	e006      	b.n	8007dbc <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
  }
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bc80      	pop	{r7}
 8007dc4:	4770      	bx	lr

08007dc6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d12e      	bne.n	8007e38 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2202      	movs	r2, #2
 8007dde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0201 	bic.w	r2, r2, #1
 8007df0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007df2:	f7ff fa19 	bl	8007228 <HAL_GetTick>
 8007df6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007df8:	e012      	b.n	8007e20 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007dfa:	f7ff fa15 	bl	8007228 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b0a      	cmp	r3, #10
 8007e06:	d90b      	bls.n	8007e20 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2205      	movs	r2, #5
 8007e18:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e012      	b.n	8007e46 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1e5      	bne.n	8007dfa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e006      	b.n	8007e46 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
  }
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b089      	sub	sp, #36	; 0x24
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	607a      	str	r2, [r7, #4]
 8007e5a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e62:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007e6c:	7ffb      	ldrb	r3, [r7, #31]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d003      	beq.n	8007e7a <HAL_CAN_AddTxMessage+0x2c>
 8007e72:	7ffb      	ldrb	r3, [r7, #31]
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	f040 80b8 	bne.w	8007fea <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10a      	bne.n	8007e9a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d105      	bne.n	8007e9a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 80a0 	beq.w	8007fda <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	0e1b      	lsrs	r3, r3, #24
 8007e9e:	f003 0303 	and.w	r3, r3, #3
 8007ea2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d907      	bls.n	8007eba <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e09e      	b.n	8007ff8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007eba:	2201      	movs	r2, #1
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	409a      	lsls	r2, r3
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10d      	bne.n	8007ee8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007ed6:	68f9      	ldr	r1, [r7, #12]
 8007ed8:	6809      	ldr	r1, [r1, #0]
 8007eda:	431a      	orrs	r2, r3
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	3318      	adds	r3, #24
 8007ee0:	011b      	lsls	r3, r3, #4
 8007ee2:	440b      	add	r3, r1
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	e00f      	b.n	8007f08 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007ef2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007ef8:	68f9      	ldr	r1, [r7, #12]
 8007efa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007efc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	3318      	adds	r3, #24
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	440b      	add	r3, r1
 8007f06:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6819      	ldr	r1, [r3, #0]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	691a      	ldr	r2, [r3, #16]
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	3318      	adds	r3, #24
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	440b      	add	r3, r1
 8007f18:	3304      	adds	r3, #4
 8007f1a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	7d1b      	ldrb	r3, [r3, #20]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d111      	bne.n	8007f48 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	3318      	adds	r3, #24
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	4413      	add	r3, r2
 8007f30:	3304      	adds	r3, #4
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	6811      	ldr	r1, [r2, #0]
 8007f38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	3318      	adds	r3, #24
 8007f40:	011b      	lsls	r3, r3, #4
 8007f42:	440b      	add	r3, r1
 8007f44:	3304      	adds	r3, #4
 8007f46:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	3307      	adds	r3, #7
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	061a      	lsls	r2, r3, #24
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	3306      	adds	r3, #6
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	041b      	lsls	r3, r3, #16
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	3305      	adds	r3, #5
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	021b      	lsls	r3, r3, #8
 8007f62:	4313      	orrs	r3, r2
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	3204      	adds	r2, #4
 8007f68:	7812      	ldrb	r2, [r2, #0]
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	6811      	ldr	r1, [r2, #0]
 8007f70:	ea43 0200 	orr.w	r2, r3, r0
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	011b      	lsls	r3, r3, #4
 8007f78:	440b      	add	r3, r1
 8007f7a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007f7e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3303      	adds	r3, #3
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	061a      	lsls	r2, r3, #24
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3302      	adds	r3, #2
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	041b      	lsls	r3, r3, #16
 8007f90:	431a      	orrs	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3301      	adds	r3, #1
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	021b      	lsls	r3, r3, #8
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	7812      	ldrb	r2, [r2, #0]
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	6811      	ldr	r1, [r2, #0]
 8007fa6:	ea43 0200 	orr.w	r2, r3, r0
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	011b      	lsls	r3, r3, #4
 8007fae:	440b      	add	r3, r1
 8007fb0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007fb4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	3318      	adds	r3, #24
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	4413      	add	r3, r2
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	6811      	ldr	r1, [r2, #0]
 8007fc8:	f043 0201 	orr.w	r2, r3, #1
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	3318      	adds	r3, #24
 8007fd0:	011b      	lsls	r3, r3, #4
 8007fd2:	440b      	add	r3, r1
 8007fd4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e00e      	b.n	8007ff8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e006      	b.n	8007ff8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
  }
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3724      	adds	r7, #36	; 0x24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bc80      	pop	{r7}
 8008000:	4770      	bx	lr

08008002 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8008002:	b480      	push	{r7}
 8008004:	b085      	sub	sp, #20
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008012:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d002      	beq.n	8008020 <HAL_CAN_AbortTxRequest+0x1e>
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d128      	bne.n	8008072 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d007      	beq.n	800803a <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689a      	ldr	r2, [r3, #8]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008038:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b00      	cmp	r3, #0
 8008042:	d007      	beq.n	8008054 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008052:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	f003 0304 	and.w	r3, r3, #4
 800805a:	2b00      	cmp	r3, #0
 800805c:	d007      	beq.n	800806e <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800806c:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	e006      	b.n	8008080 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
  }
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	bc80      	pop	{r7}
 8008088:	4770      	bx	lr

0800808a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800808a:	b480      	push	{r7}
 800808c:	b085      	sub	sp, #20
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8008092:	2300      	movs	r3, #0
 8008094:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800809c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800809e:	7afb      	ldrb	r3, [r7, #11]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d002      	beq.n	80080aa <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80080a4:	7afb      	ldrb	r3, [r7, #11]
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d11d      	bne.n	80080e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3301      	adds	r3, #1
 80080bc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	3301      	adds	r3, #1
 80080d0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3301      	adds	r3, #1
 80080e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80080e6:	68fb      	ldr	r3, [r7, #12]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bc80      	pop	{r7}
 80080f0:	4770      	bx	lr

080080f2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80080f2:	b480      	push	{r7}
 80080f4:	b087      	sub	sp, #28
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	607a      	str	r2, [r7, #4]
 80080fe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008106:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d003      	beq.n	8008116 <HAL_CAN_GetRxMessage+0x24>
 800810e:	7dfb      	ldrb	r3, [r7, #23]
 8008110:	2b02      	cmp	r3, #2
 8008112:	f040 80f3 	bne.w	80082fc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10e      	bne.n	800813a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f003 0303 	and.w	r3, r3, #3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d116      	bne.n	8008158 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e0e7      	b.n	800830a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	f003 0303 	and.w	r3, r3, #3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d107      	bne.n	8008158 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e0d8      	b.n	800830a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	331b      	adds	r3, #27
 8008160:	011b      	lsls	r3, r3, #4
 8008162:	4413      	add	r3, r2
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0204 	and.w	r2, r3, #4
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10c      	bne.n	8008190 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	331b      	adds	r3, #27
 800817e:	011b      	lsls	r3, r3, #4
 8008180:	4413      	add	r3, r2
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	0d5b      	lsrs	r3, r3, #21
 8008186:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	e00b      	b.n	80081a8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	331b      	adds	r3, #27
 8008198:	011b      	lsls	r3, r3, #4
 800819a:	4413      	add	r3, r2
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	08db      	lsrs	r3, r3, #3
 80081a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	331b      	adds	r3, #27
 80081b0:	011b      	lsls	r3, r3, #4
 80081b2:	4413      	add	r3, r2
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0202 	and.w	r2, r3, #2
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	331b      	adds	r3, #27
 80081c6:	011b      	lsls	r3, r3, #4
 80081c8:	4413      	add	r3, r2
 80081ca:	3304      	adds	r3, #4
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 020f 	and.w	r2, r3, #15
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	331b      	adds	r3, #27
 80081de:	011b      	lsls	r3, r3, #4
 80081e0:	4413      	add	r3, r2
 80081e2:	3304      	adds	r3, #4
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	0a1b      	lsrs	r3, r3, #8
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	331b      	adds	r3, #27
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	4413      	add	r3, r2
 80081fa:	3304      	adds	r3, #4
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	0c1b      	lsrs	r3, r3, #16
 8008200:	b29a      	uxth	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	011b      	lsls	r3, r3, #4
 800820e:	4413      	add	r3, r2
 8008210:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	b2da      	uxtb	r2, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	4413      	add	r3, r2
 8008226:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	0a1a      	lsrs	r2, r3, #8
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	3301      	adds	r3, #1
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	4413      	add	r3, r2
 8008240:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	0c1a      	lsrs	r2, r3, #16
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	3302      	adds	r3, #2
 800824c:	b2d2      	uxtb	r2, r2
 800824e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	4413      	add	r3, r2
 800825a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	0e1a      	lsrs	r2, r3, #24
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	3303      	adds	r3, #3
 8008266:	b2d2      	uxtb	r2, r2
 8008268:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	011b      	lsls	r3, r3, #4
 8008272:	4413      	add	r3, r2
 8008274:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	3304      	adds	r3, #4
 800827e:	b2d2      	uxtb	r2, r2
 8008280:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	011b      	lsls	r3, r3, #4
 800828a:	4413      	add	r3, r2
 800828c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	0a1a      	lsrs	r2, r3, #8
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	3305      	adds	r3, #5
 8008298:	b2d2      	uxtb	r2, r2
 800829a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	0c1a      	lsrs	r2, r3, #16
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	3306      	adds	r3, #6
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	011b      	lsls	r3, r3, #4
 80082be:	4413      	add	r3, r2
 80082c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	0e1a      	lsrs	r2, r3, #24
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	3307      	adds	r3, #7
 80082cc:	b2d2      	uxtb	r2, r2
 80082ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d108      	bne.n	80082e8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68da      	ldr	r2, [r3, #12]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f042 0220 	orr.w	r2, r2, #32
 80082e4:	60da      	str	r2, [r3, #12]
 80082e6:	e007      	b.n	80082f8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	691a      	ldr	r2, [r3, #16]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 0220 	orr.w	r2, r2, #32
 80082f6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	e006      	b.n	800830a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
  }
}
 800830a:	4618      	mov	r0, r3
 800830c:	371c      	adds	r7, #28
 800830e:	46bd      	mov	sp, r7
 8008310:	bc80      	pop	{r7}
 8008312:	4770      	bx	lr

08008314 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008324:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d002      	beq.n	8008332 <HAL_CAN_ActivateNotification+0x1e>
 800832c:	7bfb      	ldrb	r3, [r7, #15]
 800832e:	2b02      	cmp	r3, #2
 8008330:	d109      	bne.n	8008346 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6959      	ldr	r1, [r3, #20]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	e006      	b.n	8008354 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
  }
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	bc80      	pop	{r7}
 800835c:	4770      	bx	lr

0800835e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b08a      	sub	sp, #40	; 0x28
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8008366:	2300      	movs	r3, #0
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d07c      	beq.n	800849e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d023      	beq.n	80083f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2201      	movs	r2, #1
 80083b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f983 	bl	80086cc <HAL_CAN_TxMailbox0CompleteCallback>
 80083c6:	e016      	b.n	80083f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	f003 0304 	and.w	r3, r3, #4
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d004      	beq.n	80083dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24
 80083da:	e00c      	b.n	80083f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d004      	beq.n	80083f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80083ec:	627b      	str	r3, [r7, #36]	; 0x24
 80083ee:	e002      	b.n	80083f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f986 	bl	8008702 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d024      	beq.n	800844a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008408:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f962 	bl	80086de <HAL_CAN_TxMailbox1CompleteCallback>
 800841a:	e016      	b.n	800844a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008422:	2b00      	cmp	r3, #0
 8008424:	d004      	beq.n	8008430 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800842c:	627b      	str	r3, [r7, #36]	; 0x24
 800842e:	e00c      	b.n	800844a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008436:	2b00      	cmp	r3, #0
 8008438:	d004      	beq.n	8008444 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008440:	627b      	str	r3, [r7, #36]	; 0x24
 8008442:	e002      	b.n	800844a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f965 	bl	8008714 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d024      	beq.n	800849e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800845c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f941 	bl	80086f0 <HAL_CAN_TxMailbox2CompleteCallback>
 800846e:	e016      	b.n	800849e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d004      	beq.n	8008484 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
 8008482:	e00c      	b.n	800849e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d004      	beq.n	8008498 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
 8008496:	e002      	b.n	800849e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f944 	bl	8008726 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	f003 0308 	and.w	r3, r3, #8
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00c      	beq.n	80084c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f003 0310 	and.w	r3, r3, #16
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d007      	beq.n	80084c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2210      	movs	r2, #16
 80084c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	f003 0304 	and.w	r3, r3, #4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00b      	beq.n	80084e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f003 0308 	and.w	r3, r3, #8
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d006      	beq.n	80084e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2208      	movs	r2, #8
 80084dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f92a 	bl	8008738 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d009      	beq.n	8008502 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f003 0303 	and.w	r3, r3, #3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d002      	beq.n	8008502 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7fb f873 	bl	80035e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00c      	beq.n	8008526 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f003 0310 	and.w	r3, r3, #16
 8008512:	2b00      	cmp	r3, #0
 8008514:	d007      	beq.n	8008526 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800851c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2210      	movs	r2, #16
 8008524:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	f003 0320 	and.w	r3, r3, #32
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	f003 0308 	and.w	r3, r3, #8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d006      	beq.n	8008548 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2208      	movs	r2, #8
 8008540:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f90a 	bl	800875c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	f003 0310 	and.w	r3, r3, #16
 800854e:	2b00      	cmp	r3, #0
 8008550:	d009      	beq.n	8008566 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	f003 0303 	and.w	r3, r3, #3
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f8f2 	bl	800874a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00b      	beq.n	8008588 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	f003 0310 	and.w	r3, r3, #16
 8008576:	2b00      	cmp	r3, #0
 8008578:	d006      	beq.n	8008588 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2210      	movs	r2, #16
 8008580:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f8f3 	bl	800876e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00b      	beq.n	80085aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	f003 0308 	and.w	r3, r3, #8
 8008598:	2b00      	cmp	r3, #0
 800859a:	d006      	beq.n	80085aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2208      	movs	r2, #8
 80085a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f8eb 	bl	8008780 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d07b      	beq.n	80086ac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d072      	beq.n	80086a4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d008      	beq.n	80085da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	f043 0301 	orr.w	r3, r3, #1
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d008      	beq.n	80085f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	f043 0302 	orr.w	r3, r3, #2
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d008      	beq.n	8008612 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	f043 0304 	orr.w	r3, r3, #4
 8008610:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008618:	2b00      	cmp	r3, #0
 800861a:	d043      	beq.n	80086a4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008622:	2b00      	cmp	r3, #0
 8008624:	d03e      	beq.n	80086a4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800862c:	2b60      	cmp	r3, #96	; 0x60
 800862e:	d02b      	beq.n	8008688 <HAL_CAN_IRQHandler+0x32a>
 8008630:	2b60      	cmp	r3, #96	; 0x60
 8008632:	d82e      	bhi.n	8008692 <HAL_CAN_IRQHandler+0x334>
 8008634:	2b50      	cmp	r3, #80	; 0x50
 8008636:	d022      	beq.n	800867e <HAL_CAN_IRQHandler+0x320>
 8008638:	2b50      	cmp	r3, #80	; 0x50
 800863a:	d82a      	bhi.n	8008692 <HAL_CAN_IRQHandler+0x334>
 800863c:	2b40      	cmp	r3, #64	; 0x40
 800863e:	d019      	beq.n	8008674 <HAL_CAN_IRQHandler+0x316>
 8008640:	2b40      	cmp	r3, #64	; 0x40
 8008642:	d826      	bhi.n	8008692 <HAL_CAN_IRQHandler+0x334>
 8008644:	2b30      	cmp	r3, #48	; 0x30
 8008646:	d010      	beq.n	800866a <HAL_CAN_IRQHandler+0x30c>
 8008648:	2b30      	cmp	r3, #48	; 0x30
 800864a:	d822      	bhi.n	8008692 <HAL_CAN_IRQHandler+0x334>
 800864c:	2b10      	cmp	r3, #16
 800864e:	d002      	beq.n	8008656 <HAL_CAN_IRQHandler+0x2f8>
 8008650:	2b20      	cmp	r3, #32
 8008652:	d005      	beq.n	8008660 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8008654:	e01d      	b.n	8008692 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	f043 0308 	orr.w	r3, r3, #8
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800865e:	e019      	b.n	8008694 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	f043 0310 	orr.w	r3, r3, #16
 8008666:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008668:	e014      	b.n	8008694 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	f043 0320 	orr.w	r3, r3, #32
 8008670:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008672:	e00f      	b.n	8008694 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800867a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800867c:	e00a      	b.n	8008694 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008684:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008686:	e005      	b.n	8008694 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008690:	e000      	b.n	8008694 <HAL_CAN_IRQHandler+0x336>
            break;
 8008692:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	699a      	ldr	r2, [r3, #24]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80086a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2204      	movs	r2, #4
 80086aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d008      	beq.n	80086c4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	431a      	orrs	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f867 	bl	8008792 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80086c4:	bf00      	nop
 80086c6:	3728      	adds	r7, #40	; 0x28
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	bc80      	pop	{r7}
 80086dc:	4770      	bx	lr

080086de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80086de:	b480      	push	{r7}
 80086e0:	b083      	sub	sp, #12
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc80      	pop	{r7}
 80086ee:	4770      	bx	lr

080086f0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bc80      	pop	{r7}
 8008700:	4770      	bx	lr

08008702 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	bc80      	pop	{r7}
 8008712:	4770      	bx	lr

08008714 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	bc80      	pop	{r7}
 8008724:	4770      	bx	lr

08008726 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008726:	b480      	push	{r7}
 8008728:	b083      	sub	sp, #12
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800872e:	bf00      	nop
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr

08008738 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	bc80      	pop	{r7}
 8008748:	4770      	bx	lr

0800874a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8008752:	bf00      	nop
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	bc80      	pop	{r7}
 800875a:	4770      	bx	lr

0800875c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	bc80      	pop	{r7}
 800876c:	4770      	bx	lr

0800876e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	bc80      	pop	{r7}
 800877e:	4770      	bx	lr

08008780 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	bc80      	pop	{r7}
 8008790:	4770      	bx	lr

08008792 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008792:	b480      	push	{r7}
 8008794:	b083      	sub	sp, #12
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800879a:	bf00      	nop
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	bc80      	pop	{r7}
 80087a2:	4770      	bx	lr

080087a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f003 0307 	and.w	r3, r3, #7
 80087b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80087b4:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <__NVIC_SetPriorityGrouping+0x44>)
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80087c0:	4013      	ands	r3, r2
 80087c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80087cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80087d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80087d6:	4a04      	ldr	r2, [pc, #16]	; (80087e8 <__NVIC_SetPriorityGrouping+0x44>)
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	60d3      	str	r3, [r2, #12]
}
 80087dc:	bf00      	nop
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bc80      	pop	{r7}
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	e000ed00 	.word	0xe000ed00

080087ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087f0:	4b04      	ldr	r3, [pc, #16]	; (8008804 <__NVIC_GetPriorityGrouping+0x18>)
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	0a1b      	lsrs	r3, r3, #8
 80087f6:	f003 0307 	and.w	r3, r3, #7
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bc80      	pop	{r7}
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	e000ed00 	.word	0xe000ed00

08008808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	4603      	mov	r3, r0
 8008810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008816:	2b00      	cmp	r3, #0
 8008818:	db0b      	blt.n	8008832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800881a:	79fb      	ldrb	r3, [r7, #7]
 800881c:	f003 021f 	and.w	r2, r3, #31
 8008820:	4906      	ldr	r1, [pc, #24]	; (800883c <__NVIC_EnableIRQ+0x34>)
 8008822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008826:	095b      	lsrs	r3, r3, #5
 8008828:	2001      	movs	r0, #1
 800882a:	fa00 f202 	lsl.w	r2, r0, r2
 800882e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008832:	bf00      	nop
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	bc80      	pop	{r7}
 800883a:	4770      	bx	lr
 800883c:	e000e100 	.word	0xe000e100

08008840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	6039      	str	r1, [r7, #0]
 800884a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800884c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008850:	2b00      	cmp	r3, #0
 8008852:	db0a      	blt.n	800886a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	b2da      	uxtb	r2, r3
 8008858:	490c      	ldr	r1, [pc, #48]	; (800888c <__NVIC_SetPriority+0x4c>)
 800885a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800885e:	0112      	lsls	r2, r2, #4
 8008860:	b2d2      	uxtb	r2, r2
 8008862:	440b      	add	r3, r1
 8008864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008868:	e00a      	b.n	8008880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	b2da      	uxtb	r2, r3
 800886e:	4908      	ldr	r1, [pc, #32]	; (8008890 <__NVIC_SetPriority+0x50>)
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	f003 030f 	and.w	r3, r3, #15
 8008876:	3b04      	subs	r3, #4
 8008878:	0112      	lsls	r2, r2, #4
 800887a:	b2d2      	uxtb	r2, r2
 800887c:	440b      	add	r3, r1
 800887e:	761a      	strb	r2, [r3, #24]
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	bc80      	pop	{r7}
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	e000e100 	.word	0xe000e100
 8008890:	e000ed00 	.word	0xe000ed00

08008894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008894:	b480      	push	{r7}
 8008896:	b089      	sub	sp, #36	; 0x24
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f003 0307 	and.w	r3, r3, #7
 80088a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	f1c3 0307 	rsb	r3, r3, #7
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	bf28      	it	cs
 80088b2:	2304      	movcs	r3, #4
 80088b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	3304      	adds	r3, #4
 80088ba:	2b06      	cmp	r3, #6
 80088bc:	d902      	bls.n	80088c4 <NVIC_EncodePriority+0x30>
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	3b03      	subs	r3, #3
 80088c2:	e000      	b.n	80088c6 <NVIC_EncodePriority+0x32>
 80088c4:	2300      	movs	r3, #0
 80088c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088c8:	f04f 32ff 	mov.w	r2, #4294967295
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	fa02 f303 	lsl.w	r3, r2, r3
 80088d2:	43da      	mvns	r2, r3
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	401a      	ands	r2, r3
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80088dc:	f04f 31ff 	mov.w	r1, #4294967295
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	fa01 f303 	lsl.w	r3, r1, r3
 80088e6:	43d9      	mvns	r1, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088ec:	4313      	orrs	r3, r2
         );
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3724      	adds	r7, #36	; 0x24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bc80      	pop	{r7}
 80088f6:	4770      	bx	lr

080088f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3b01      	subs	r3, #1
 8008904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008908:	d301      	bcc.n	800890e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800890a:	2301      	movs	r3, #1
 800890c:	e00f      	b.n	800892e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800890e:	4a0a      	ldr	r2, [pc, #40]	; (8008938 <SysTick_Config+0x40>)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3b01      	subs	r3, #1
 8008914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008916:	210f      	movs	r1, #15
 8008918:	f04f 30ff 	mov.w	r0, #4294967295
 800891c:	f7ff ff90 	bl	8008840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008920:	4b05      	ldr	r3, [pc, #20]	; (8008938 <SysTick_Config+0x40>)
 8008922:	2200      	movs	r2, #0
 8008924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008926:	4b04      	ldr	r3, [pc, #16]	; (8008938 <SysTick_Config+0x40>)
 8008928:	2207      	movs	r2, #7
 800892a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	e000e010 	.word	0xe000e010

0800893c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff ff2d 	bl	80087a4 <__NVIC_SetPriorityGrouping>
}
 800894a:	bf00      	nop
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008952:	b580      	push	{r7, lr}
 8008954:	b086      	sub	sp, #24
 8008956:	af00      	add	r7, sp, #0
 8008958:	4603      	mov	r3, r0
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	607a      	str	r2, [r7, #4]
 800895e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008960:	2300      	movs	r3, #0
 8008962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008964:	f7ff ff42 	bl	80087ec <__NVIC_GetPriorityGrouping>
 8008968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	68b9      	ldr	r1, [r7, #8]
 800896e:	6978      	ldr	r0, [r7, #20]
 8008970:	f7ff ff90 	bl	8008894 <NVIC_EncodePriority>
 8008974:	4602      	mov	r2, r0
 8008976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800897a:	4611      	mov	r1, r2
 800897c:	4618      	mov	r0, r3
 800897e:	f7ff ff5f 	bl	8008840 <__NVIC_SetPriority>
}
 8008982:	bf00      	nop
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	4603      	mov	r3, r0
 8008992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008998:	4618      	mov	r0, r3
 800899a:	f7ff ff35 	bl	8008808 <__NVIC_EnableIRQ>
}
 800899e:	bf00      	nop
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7ff ffa2 	bl	80088f8 <SysTick_Config>
 80089b4:	4603      	mov	r3, r0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
	...

080089c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80089c8:	2300      	movs	r3, #0
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d101      	bne.n	80089d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e059      	b.n	8008a8a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	4b2d      	ldr	r3, [pc, #180]	; (8008a94 <HAL_DMA_Init+0xd4>)
 80089de:	429a      	cmp	r2, r3
 80089e0:	d80f      	bhi.n	8008a02 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	4b2b      	ldr	r3, [pc, #172]	; (8008a98 <HAL_DMA_Init+0xd8>)
 80089ea:	4413      	add	r3, r2
 80089ec:	4a2b      	ldr	r2, [pc, #172]	; (8008a9c <HAL_DMA_Init+0xdc>)
 80089ee:	fba2 2303 	umull	r2, r3, r2, r3
 80089f2:	091b      	lsrs	r3, r3, #4
 80089f4:	009a      	lsls	r2, r3, #2
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a28      	ldr	r2, [pc, #160]	; (8008aa0 <HAL_DMA_Init+0xe0>)
 80089fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8008a00:	e00e      	b.n	8008a20 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	461a      	mov	r2, r3
 8008a08:	4b26      	ldr	r3, [pc, #152]	; (8008aa4 <HAL_DMA_Init+0xe4>)
 8008a0a:	4413      	add	r3, r2
 8008a0c:	4a23      	ldr	r2, [pc, #140]	; (8008a9c <HAL_DMA_Init+0xdc>)
 8008a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a12:	091b      	lsrs	r3, r3, #4
 8008a14:	009a      	lsls	r2, r3, #2
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a22      	ldr	r2, [pc, #136]	; (8008aa8 <HAL_DMA_Init+0xe8>)
 8008a1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008a36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008a3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bc80      	pop	{r7}
 8008a92:	4770      	bx	lr
 8008a94:	40020407 	.word	0x40020407
 8008a98:	bffdfff8 	.word	0xbffdfff8
 8008a9c:	cccccccd 	.word	0xcccccccd
 8008aa0:	40020000 	.word	0x40020000
 8008aa4:	bffdfbf8 	.word	0xbffdfbf8
 8008aa8:	40020400 	.word	0x40020400

08008aac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d101      	bne.n	8008acc <HAL_DMA_Start_IT+0x20>
 8008ac8:	2302      	movs	r3, #2
 8008aca:	e04a      	b.n	8008b62 <HAL_DMA_Start_IT+0xb6>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d13a      	bne.n	8008b54 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2202      	movs	r2, #2
 8008ae2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f022 0201 	bic.w	r2, r2, #1
 8008afa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	68b9      	ldr	r1, [r7, #8]
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 fa6e 	bl	8008fe4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d008      	beq.n	8008b22 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f042 020e 	orr.w	r2, r2, #14
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	e00f      	b.n	8008b42 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f022 0204 	bic.w	r2, r2, #4
 8008b30:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f042 020a 	orr.w	r2, r2, #10
 8008b40:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f042 0201 	orr.w	r2, r2, #1
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	e005      	b.n	8008b60 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8008b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3718      	adds	r7, #24
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
	...

08008b6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b88:	2204      	movs	r2, #4
 8008b8a:	409a      	lsls	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4013      	ands	r3, r2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 80d6 	beq.w	8008d42 <HAL_DMA_IRQHandler+0x1d6>
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 80d0 	beq.w	8008d42 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0320 	and.w	r3, r3, #32
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d107      	bne.n	8008bc0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f022 0204 	bic.w	r2, r2, #4
 8008bbe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	4b9b      	ldr	r3, [pc, #620]	; (8008e34 <HAL_DMA_IRQHandler+0x2c8>)
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d958      	bls.n	8008c7e <HAL_DMA_IRQHandler+0x112>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a99      	ldr	r2, [pc, #612]	; (8008e38 <HAL_DMA_IRQHandler+0x2cc>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d04f      	beq.n	8008c76 <HAL_DMA_IRQHandler+0x10a>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a98      	ldr	r2, [pc, #608]	; (8008e3c <HAL_DMA_IRQHandler+0x2d0>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d048      	beq.n	8008c72 <HAL_DMA_IRQHandler+0x106>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a96      	ldr	r2, [pc, #600]	; (8008e40 <HAL_DMA_IRQHandler+0x2d4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d040      	beq.n	8008c6c <HAL_DMA_IRQHandler+0x100>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a95      	ldr	r2, [pc, #596]	; (8008e44 <HAL_DMA_IRQHandler+0x2d8>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d038      	beq.n	8008c66 <HAL_DMA_IRQHandler+0xfa>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a93      	ldr	r2, [pc, #588]	; (8008e48 <HAL_DMA_IRQHandler+0x2dc>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d030      	beq.n	8008c60 <HAL_DMA_IRQHandler+0xf4>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a92      	ldr	r2, [pc, #584]	; (8008e4c <HAL_DMA_IRQHandler+0x2e0>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d028      	beq.n	8008c5a <HAL_DMA_IRQHandler+0xee>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a89      	ldr	r2, [pc, #548]	; (8008e34 <HAL_DMA_IRQHandler+0x2c8>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d020      	beq.n	8008c54 <HAL_DMA_IRQHandler+0xe8>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a8e      	ldr	r2, [pc, #568]	; (8008e50 <HAL_DMA_IRQHandler+0x2e4>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d019      	beq.n	8008c50 <HAL_DMA_IRQHandler+0xe4>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a8c      	ldr	r2, [pc, #560]	; (8008e54 <HAL_DMA_IRQHandler+0x2e8>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d012      	beq.n	8008c4c <HAL_DMA_IRQHandler+0xe0>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a8b      	ldr	r2, [pc, #556]	; (8008e58 <HAL_DMA_IRQHandler+0x2ec>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d00a      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xda>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a89      	ldr	r2, [pc, #548]	; (8008e5c <HAL_DMA_IRQHandler+0x2f0>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d102      	bne.n	8008c40 <HAL_DMA_IRQHandler+0xd4>
 8008c3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c3e:	e01b      	b.n	8008c78 <HAL_DMA_IRQHandler+0x10c>
 8008c40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c44:	e018      	b.n	8008c78 <HAL_DMA_IRQHandler+0x10c>
 8008c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c4a:	e015      	b.n	8008c78 <HAL_DMA_IRQHandler+0x10c>
 8008c4c:	2340      	movs	r3, #64	; 0x40
 8008c4e:	e013      	b.n	8008c78 <HAL_DMA_IRQHandler+0x10c>
 8008c50:	2304      	movs	r3, #4
 8008c52:	e011      	b.n	8008c78 <HAL_DMA_IRQHandler+0x10c>
 8008c54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c58:	e00e      	b.n	8008c78 <HAL_DMA_IRQHandler+0x10c>
 8008c5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008c5e:	e00b      	b.n	8008c78 <HAL_DMA_IRQHandler+0x10c>
 8008c60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c64:	e008      	b.n	8008c78 <HAL_DMA_IRQHandler+0x10c>
 8008c66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c6a:	e005      	b.n	8008c78 <HAL_DMA_IRQHandler+0x10c>
 8008c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c70:	e002      	b.n	8008c78 <HAL_DMA_IRQHandler+0x10c>
 8008c72:	2340      	movs	r3, #64	; 0x40
 8008c74:	e000      	b.n	8008c78 <HAL_DMA_IRQHandler+0x10c>
 8008c76:	2304      	movs	r3, #4
 8008c78:	4a79      	ldr	r2, [pc, #484]	; (8008e60 <HAL_DMA_IRQHandler+0x2f4>)
 8008c7a:	6053      	str	r3, [r2, #4]
 8008c7c:	e057      	b.n	8008d2e <HAL_DMA_IRQHandler+0x1c2>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a6d      	ldr	r2, [pc, #436]	; (8008e38 <HAL_DMA_IRQHandler+0x2cc>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d04f      	beq.n	8008d28 <HAL_DMA_IRQHandler+0x1bc>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a6b      	ldr	r2, [pc, #428]	; (8008e3c <HAL_DMA_IRQHandler+0x2d0>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d048      	beq.n	8008d24 <HAL_DMA_IRQHandler+0x1b8>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a6a      	ldr	r2, [pc, #424]	; (8008e40 <HAL_DMA_IRQHandler+0x2d4>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d040      	beq.n	8008d1e <HAL_DMA_IRQHandler+0x1b2>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a68      	ldr	r2, [pc, #416]	; (8008e44 <HAL_DMA_IRQHandler+0x2d8>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d038      	beq.n	8008d18 <HAL_DMA_IRQHandler+0x1ac>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a67      	ldr	r2, [pc, #412]	; (8008e48 <HAL_DMA_IRQHandler+0x2dc>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d030      	beq.n	8008d12 <HAL_DMA_IRQHandler+0x1a6>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a65      	ldr	r2, [pc, #404]	; (8008e4c <HAL_DMA_IRQHandler+0x2e0>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d028      	beq.n	8008d0c <HAL_DMA_IRQHandler+0x1a0>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a5d      	ldr	r2, [pc, #372]	; (8008e34 <HAL_DMA_IRQHandler+0x2c8>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d020      	beq.n	8008d06 <HAL_DMA_IRQHandler+0x19a>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a61      	ldr	r2, [pc, #388]	; (8008e50 <HAL_DMA_IRQHandler+0x2e4>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d019      	beq.n	8008d02 <HAL_DMA_IRQHandler+0x196>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a60      	ldr	r2, [pc, #384]	; (8008e54 <HAL_DMA_IRQHandler+0x2e8>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d012      	beq.n	8008cfe <HAL_DMA_IRQHandler+0x192>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a5e      	ldr	r2, [pc, #376]	; (8008e58 <HAL_DMA_IRQHandler+0x2ec>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d00a      	beq.n	8008cf8 <HAL_DMA_IRQHandler+0x18c>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a5d      	ldr	r2, [pc, #372]	; (8008e5c <HAL_DMA_IRQHandler+0x2f0>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d102      	bne.n	8008cf2 <HAL_DMA_IRQHandler+0x186>
 8008cec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008cf0:	e01b      	b.n	8008d2a <HAL_DMA_IRQHandler+0x1be>
 8008cf2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008cf6:	e018      	b.n	8008d2a <HAL_DMA_IRQHandler+0x1be>
 8008cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cfc:	e015      	b.n	8008d2a <HAL_DMA_IRQHandler+0x1be>
 8008cfe:	2340      	movs	r3, #64	; 0x40
 8008d00:	e013      	b.n	8008d2a <HAL_DMA_IRQHandler+0x1be>
 8008d02:	2304      	movs	r3, #4
 8008d04:	e011      	b.n	8008d2a <HAL_DMA_IRQHandler+0x1be>
 8008d06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d0a:	e00e      	b.n	8008d2a <HAL_DMA_IRQHandler+0x1be>
 8008d0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008d10:	e00b      	b.n	8008d2a <HAL_DMA_IRQHandler+0x1be>
 8008d12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d16:	e008      	b.n	8008d2a <HAL_DMA_IRQHandler+0x1be>
 8008d18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d1c:	e005      	b.n	8008d2a <HAL_DMA_IRQHandler+0x1be>
 8008d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d22:	e002      	b.n	8008d2a <HAL_DMA_IRQHandler+0x1be>
 8008d24:	2340      	movs	r3, #64	; 0x40
 8008d26:	e000      	b.n	8008d2a <HAL_DMA_IRQHandler+0x1be>
 8008d28:	2304      	movs	r3, #4
 8008d2a:	4a4e      	ldr	r2, [pc, #312]	; (8008e64 <HAL_DMA_IRQHandler+0x2f8>)
 8008d2c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 8136 	beq.w	8008fa4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008d40:	e130      	b.n	8008fa4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d46:	2202      	movs	r2, #2
 8008d48:	409a      	lsls	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 80f8 	beq.w	8008f44 <HAL_DMA_IRQHandler+0x3d8>
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f003 0302 	and.w	r3, r3, #2
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f000 80f2 	beq.w	8008f44 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0320 	and.w	r3, r3, #32
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10b      	bne.n	8008d86 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 020a 	bic.w	r2, r2, #10
 8008d7c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	4b29      	ldr	r3, [pc, #164]	; (8008e34 <HAL_DMA_IRQHandler+0x2c8>)
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d973      	bls.n	8008e7a <HAL_DMA_IRQHandler+0x30e>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a28      	ldr	r2, [pc, #160]	; (8008e38 <HAL_DMA_IRQHandler+0x2cc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d06a      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x306>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a26      	ldr	r2, [pc, #152]	; (8008e3c <HAL_DMA_IRQHandler+0x2d0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d063      	beq.n	8008e6e <HAL_DMA_IRQHandler+0x302>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a25      	ldr	r2, [pc, #148]	; (8008e40 <HAL_DMA_IRQHandler+0x2d4>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d05b      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x2fc>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a23      	ldr	r2, [pc, #140]	; (8008e44 <HAL_DMA_IRQHandler+0x2d8>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d038      	beq.n	8008e2c <HAL_DMA_IRQHandler+0x2c0>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a22      	ldr	r2, [pc, #136]	; (8008e48 <HAL_DMA_IRQHandler+0x2dc>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d030      	beq.n	8008e26 <HAL_DMA_IRQHandler+0x2ba>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a20      	ldr	r2, [pc, #128]	; (8008e4c <HAL_DMA_IRQHandler+0x2e0>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d028      	beq.n	8008e20 <HAL_DMA_IRQHandler+0x2b4>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a18      	ldr	r2, [pc, #96]	; (8008e34 <HAL_DMA_IRQHandler+0x2c8>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d020      	beq.n	8008e1a <HAL_DMA_IRQHandler+0x2ae>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a1c      	ldr	r2, [pc, #112]	; (8008e50 <HAL_DMA_IRQHandler+0x2e4>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d019      	beq.n	8008e16 <HAL_DMA_IRQHandler+0x2aa>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a1b      	ldr	r2, [pc, #108]	; (8008e54 <HAL_DMA_IRQHandler+0x2e8>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d012      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x2a6>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a19      	ldr	r2, [pc, #100]	; (8008e58 <HAL_DMA_IRQHandler+0x2ec>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d00a      	beq.n	8008e0c <HAL_DMA_IRQHandler+0x2a0>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a18      	ldr	r2, [pc, #96]	; (8008e5c <HAL_DMA_IRQHandler+0x2f0>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d102      	bne.n	8008e06 <HAL_DMA_IRQHandler+0x29a>
 8008e00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e04:	e036      	b.n	8008e74 <HAL_DMA_IRQHandler+0x308>
 8008e06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e0a:	e033      	b.n	8008e74 <HAL_DMA_IRQHandler+0x308>
 8008e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e10:	e030      	b.n	8008e74 <HAL_DMA_IRQHandler+0x308>
 8008e12:	2320      	movs	r3, #32
 8008e14:	e02e      	b.n	8008e74 <HAL_DMA_IRQHandler+0x308>
 8008e16:	2302      	movs	r3, #2
 8008e18:	e02c      	b.n	8008e74 <HAL_DMA_IRQHandler+0x308>
 8008e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e1e:	e029      	b.n	8008e74 <HAL_DMA_IRQHandler+0x308>
 8008e20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e24:	e026      	b.n	8008e74 <HAL_DMA_IRQHandler+0x308>
 8008e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e2a:	e023      	b.n	8008e74 <HAL_DMA_IRQHandler+0x308>
 8008e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e30:	e020      	b.n	8008e74 <HAL_DMA_IRQHandler+0x308>
 8008e32:	bf00      	nop
 8008e34:	40020080 	.word	0x40020080
 8008e38:	40020008 	.word	0x40020008
 8008e3c:	4002001c 	.word	0x4002001c
 8008e40:	40020030 	.word	0x40020030
 8008e44:	40020044 	.word	0x40020044
 8008e48:	40020058 	.word	0x40020058
 8008e4c:	4002006c 	.word	0x4002006c
 8008e50:	40020408 	.word	0x40020408
 8008e54:	4002041c 	.word	0x4002041c
 8008e58:	40020430 	.word	0x40020430
 8008e5c:	40020444 	.word	0x40020444
 8008e60:	40020400 	.word	0x40020400
 8008e64:	40020000 	.word	0x40020000
 8008e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e6c:	e002      	b.n	8008e74 <HAL_DMA_IRQHandler+0x308>
 8008e6e:	2320      	movs	r3, #32
 8008e70:	e000      	b.n	8008e74 <HAL_DMA_IRQHandler+0x308>
 8008e72:	2302      	movs	r3, #2
 8008e74:	4a4e      	ldr	r2, [pc, #312]	; (8008fb0 <HAL_DMA_IRQHandler+0x444>)
 8008e76:	6053      	str	r3, [r2, #4]
 8008e78:	e057      	b.n	8008f2a <HAL_DMA_IRQHandler+0x3be>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a4d      	ldr	r2, [pc, #308]	; (8008fb4 <HAL_DMA_IRQHandler+0x448>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d04f      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x3b8>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a4b      	ldr	r2, [pc, #300]	; (8008fb8 <HAL_DMA_IRQHandler+0x44c>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d048      	beq.n	8008f20 <HAL_DMA_IRQHandler+0x3b4>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a4a      	ldr	r2, [pc, #296]	; (8008fbc <HAL_DMA_IRQHandler+0x450>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d040      	beq.n	8008f1a <HAL_DMA_IRQHandler+0x3ae>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a48      	ldr	r2, [pc, #288]	; (8008fc0 <HAL_DMA_IRQHandler+0x454>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d038      	beq.n	8008f14 <HAL_DMA_IRQHandler+0x3a8>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a47      	ldr	r2, [pc, #284]	; (8008fc4 <HAL_DMA_IRQHandler+0x458>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d030      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x3a2>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a45      	ldr	r2, [pc, #276]	; (8008fc8 <HAL_DMA_IRQHandler+0x45c>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d028      	beq.n	8008f08 <HAL_DMA_IRQHandler+0x39c>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a44      	ldr	r2, [pc, #272]	; (8008fcc <HAL_DMA_IRQHandler+0x460>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d020      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x396>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a42      	ldr	r2, [pc, #264]	; (8008fd0 <HAL_DMA_IRQHandler+0x464>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d019      	beq.n	8008efe <HAL_DMA_IRQHandler+0x392>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a41      	ldr	r2, [pc, #260]	; (8008fd4 <HAL_DMA_IRQHandler+0x468>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d012      	beq.n	8008efa <HAL_DMA_IRQHandler+0x38e>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a3f      	ldr	r2, [pc, #252]	; (8008fd8 <HAL_DMA_IRQHandler+0x46c>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d00a      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x388>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a3e      	ldr	r2, [pc, #248]	; (8008fdc <HAL_DMA_IRQHandler+0x470>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d102      	bne.n	8008eee <HAL_DMA_IRQHandler+0x382>
 8008ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008eec:	e01b      	b.n	8008f26 <HAL_DMA_IRQHandler+0x3ba>
 8008eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ef2:	e018      	b.n	8008f26 <HAL_DMA_IRQHandler+0x3ba>
 8008ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ef8:	e015      	b.n	8008f26 <HAL_DMA_IRQHandler+0x3ba>
 8008efa:	2320      	movs	r3, #32
 8008efc:	e013      	b.n	8008f26 <HAL_DMA_IRQHandler+0x3ba>
 8008efe:	2302      	movs	r3, #2
 8008f00:	e011      	b.n	8008f26 <HAL_DMA_IRQHandler+0x3ba>
 8008f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f06:	e00e      	b.n	8008f26 <HAL_DMA_IRQHandler+0x3ba>
 8008f08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008f0c:	e00b      	b.n	8008f26 <HAL_DMA_IRQHandler+0x3ba>
 8008f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f12:	e008      	b.n	8008f26 <HAL_DMA_IRQHandler+0x3ba>
 8008f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f18:	e005      	b.n	8008f26 <HAL_DMA_IRQHandler+0x3ba>
 8008f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f1e:	e002      	b.n	8008f26 <HAL_DMA_IRQHandler+0x3ba>
 8008f20:	2320      	movs	r3, #32
 8008f22:	e000      	b.n	8008f26 <HAL_DMA_IRQHandler+0x3ba>
 8008f24:	2302      	movs	r3, #2
 8008f26:	4a2e      	ldr	r2, [pc, #184]	; (8008fe0 <HAL_DMA_IRQHandler+0x474>)
 8008f28:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d034      	beq.n	8008fa4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008f42:	e02f      	b.n	8008fa4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f48:	2208      	movs	r2, #8
 8008f4a:	409a      	lsls	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4013      	ands	r3, r2
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d028      	beq.n	8008fa6 <HAL_DMA_IRQHandler+0x43a>
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	f003 0308 	and.w	r3, r3, #8
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d023      	beq.n	8008fa6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 020e 	bic.w	r2, r2, #14
 8008f6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f76:	2101      	movs	r1, #1
 8008f78:	fa01 f202 	lsl.w	r2, r1, r2
 8008f7c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d004      	beq.n	8008fa6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	4798      	blx	r3
    }
  }
  return;
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop
}
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	40020400 	.word	0x40020400
 8008fb4:	40020008 	.word	0x40020008
 8008fb8:	4002001c 	.word	0x4002001c
 8008fbc:	40020030 	.word	0x40020030
 8008fc0:	40020044 	.word	0x40020044
 8008fc4:	40020058 	.word	0x40020058
 8008fc8:	4002006c 	.word	0x4002006c
 8008fcc:	40020080 	.word	0x40020080
 8008fd0:	40020408 	.word	0x40020408
 8008fd4:	4002041c 	.word	0x4002041c
 8008fd8:	40020430 	.word	0x40020430
 8008fdc:	40020444 	.word	0x40020444
 8008fe0:	40020000 	.word	0x40020000

08008fe4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffa:	2101      	movs	r1, #1
 8008ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8009000:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	2b10      	cmp	r3, #16
 8009010:	d108      	bne.n	8009024 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009022:	e007      	b.n	8009034 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	60da      	str	r2, [r3, #12]
}
 8009034:	bf00      	nop
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	bc80      	pop	{r7}
 800903c:	4770      	bx	lr
	...

08009040 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009040:	b480      	push	{r7}
 8009042:	b08b      	sub	sp, #44	; 0x2c
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800904a:	2300      	movs	r3, #0
 800904c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800904e:	2300      	movs	r3, #0
 8009050:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009052:	e179      	b.n	8009348 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009054:	2201      	movs	r2, #1
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	fa02 f303 	lsl.w	r3, r2, r3
 800905c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	69fa      	ldr	r2, [r7, #28]
 8009064:	4013      	ands	r3, r2
 8009066:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	429a      	cmp	r2, r3
 800906e:	f040 8168 	bne.w	8009342 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	4aa0      	ldr	r2, [pc, #640]	; (80092f8 <HAL_GPIO_Init+0x2b8>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d05e      	beq.n	800913a <HAL_GPIO_Init+0xfa>
 800907c:	4a9e      	ldr	r2, [pc, #632]	; (80092f8 <HAL_GPIO_Init+0x2b8>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d875      	bhi.n	800916e <HAL_GPIO_Init+0x12e>
 8009082:	4a9e      	ldr	r2, [pc, #632]	; (80092fc <HAL_GPIO_Init+0x2bc>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d058      	beq.n	800913a <HAL_GPIO_Init+0xfa>
 8009088:	4a9c      	ldr	r2, [pc, #624]	; (80092fc <HAL_GPIO_Init+0x2bc>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d86f      	bhi.n	800916e <HAL_GPIO_Init+0x12e>
 800908e:	4a9c      	ldr	r2, [pc, #624]	; (8009300 <HAL_GPIO_Init+0x2c0>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d052      	beq.n	800913a <HAL_GPIO_Init+0xfa>
 8009094:	4a9a      	ldr	r2, [pc, #616]	; (8009300 <HAL_GPIO_Init+0x2c0>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d869      	bhi.n	800916e <HAL_GPIO_Init+0x12e>
 800909a:	4a9a      	ldr	r2, [pc, #616]	; (8009304 <HAL_GPIO_Init+0x2c4>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d04c      	beq.n	800913a <HAL_GPIO_Init+0xfa>
 80090a0:	4a98      	ldr	r2, [pc, #608]	; (8009304 <HAL_GPIO_Init+0x2c4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d863      	bhi.n	800916e <HAL_GPIO_Init+0x12e>
 80090a6:	4a98      	ldr	r2, [pc, #608]	; (8009308 <HAL_GPIO_Init+0x2c8>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d046      	beq.n	800913a <HAL_GPIO_Init+0xfa>
 80090ac:	4a96      	ldr	r2, [pc, #600]	; (8009308 <HAL_GPIO_Init+0x2c8>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d85d      	bhi.n	800916e <HAL_GPIO_Init+0x12e>
 80090b2:	2b12      	cmp	r3, #18
 80090b4:	d82a      	bhi.n	800910c <HAL_GPIO_Init+0xcc>
 80090b6:	2b12      	cmp	r3, #18
 80090b8:	d859      	bhi.n	800916e <HAL_GPIO_Init+0x12e>
 80090ba:	a201      	add	r2, pc, #4	; (adr r2, 80090c0 <HAL_GPIO_Init+0x80>)
 80090bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c0:	0800913b 	.word	0x0800913b
 80090c4:	08009115 	.word	0x08009115
 80090c8:	08009127 	.word	0x08009127
 80090cc:	08009169 	.word	0x08009169
 80090d0:	0800916f 	.word	0x0800916f
 80090d4:	0800916f 	.word	0x0800916f
 80090d8:	0800916f 	.word	0x0800916f
 80090dc:	0800916f 	.word	0x0800916f
 80090e0:	0800916f 	.word	0x0800916f
 80090e4:	0800916f 	.word	0x0800916f
 80090e8:	0800916f 	.word	0x0800916f
 80090ec:	0800916f 	.word	0x0800916f
 80090f0:	0800916f 	.word	0x0800916f
 80090f4:	0800916f 	.word	0x0800916f
 80090f8:	0800916f 	.word	0x0800916f
 80090fc:	0800916f 	.word	0x0800916f
 8009100:	0800916f 	.word	0x0800916f
 8009104:	0800911d 	.word	0x0800911d
 8009108:	08009131 	.word	0x08009131
 800910c:	4a7f      	ldr	r2, [pc, #508]	; (800930c <HAL_GPIO_Init+0x2cc>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d013      	beq.n	800913a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009112:	e02c      	b.n	800916e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	623b      	str	r3, [r7, #32]
          break;
 800911a:	e029      	b.n	8009170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	3304      	adds	r3, #4
 8009122:	623b      	str	r3, [r7, #32]
          break;
 8009124:	e024      	b.n	8009170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	3308      	adds	r3, #8
 800912c:	623b      	str	r3, [r7, #32]
          break;
 800912e:	e01f      	b.n	8009170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	330c      	adds	r3, #12
 8009136:	623b      	str	r3, [r7, #32]
          break;
 8009138:	e01a      	b.n	8009170 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d102      	bne.n	8009148 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009142:	2304      	movs	r3, #4
 8009144:	623b      	str	r3, [r7, #32]
          break;
 8009146:	e013      	b.n	8009170 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d105      	bne.n	800915c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009150:	2308      	movs	r3, #8
 8009152:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	69fa      	ldr	r2, [r7, #28]
 8009158:	611a      	str	r2, [r3, #16]
          break;
 800915a:	e009      	b.n	8009170 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800915c:	2308      	movs	r3, #8
 800915e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	69fa      	ldr	r2, [r7, #28]
 8009164:	615a      	str	r2, [r3, #20]
          break;
 8009166:	e003      	b.n	8009170 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009168:	2300      	movs	r3, #0
 800916a:	623b      	str	r3, [r7, #32]
          break;
 800916c:	e000      	b.n	8009170 <HAL_GPIO_Init+0x130>
          break;
 800916e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	2bff      	cmp	r3, #255	; 0xff
 8009174:	d801      	bhi.n	800917a <HAL_GPIO_Init+0x13a>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	e001      	b.n	800917e <HAL_GPIO_Init+0x13e>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3304      	adds	r3, #4
 800917e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	2bff      	cmp	r3, #255	; 0xff
 8009184:	d802      	bhi.n	800918c <HAL_GPIO_Init+0x14c>
 8009186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	e002      	b.n	8009192 <HAL_GPIO_Init+0x152>
 800918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918e:	3b08      	subs	r3, #8
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	210f      	movs	r1, #15
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	fa01 f303 	lsl.w	r3, r1, r3
 80091a0:	43db      	mvns	r3, r3
 80091a2:	401a      	ands	r2, r3
 80091a4:	6a39      	ldr	r1, [r7, #32]
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	fa01 f303 	lsl.w	r3, r1, r3
 80091ac:	431a      	orrs	r2, r3
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 80c1 	beq.w	8009342 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80091c0:	4b53      	ldr	r3, [pc, #332]	; (8009310 <HAL_GPIO_Init+0x2d0>)
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	4a52      	ldr	r2, [pc, #328]	; (8009310 <HAL_GPIO_Init+0x2d0>)
 80091c6:	f043 0301 	orr.w	r3, r3, #1
 80091ca:	6193      	str	r3, [r2, #24]
 80091cc:	4b50      	ldr	r3, [pc, #320]	; (8009310 <HAL_GPIO_Init+0x2d0>)
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	f003 0301 	and.w	r3, r3, #1
 80091d4:	60bb      	str	r3, [r7, #8]
 80091d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80091d8:	4a4e      	ldr	r2, [pc, #312]	; (8009314 <HAL_GPIO_Init+0x2d4>)
 80091da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091dc:	089b      	lsrs	r3, r3, #2
 80091de:	3302      	adds	r3, #2
 80091e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	f003 0303 	and.w	r3, r3, #3
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	220f      	movs	r2, #15
 80091f0:	fa02 f303 	lsl.w	r3, r2, r3
 80091f4:	43db      	mvns	r3, r3
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	4013      	ands	r3, r2
 80091fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a46      	ldr	r2, [pc, #280]	; (8009318 <HAL_GPIO_Init+0x2d8>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d01f      	beq.n	8009244 <HAL_GPIO_Init+0x204>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a45      	ldr	r2, [pc, #276]	; (800931c <HAL_GPIO_Init+0x2dc>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d019      	beq.n	8009240 <HAL_GPIO_Init+0x200>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a44      	ldr	r2, [pc, #272]	; (8009320 <HAL_GPIO_Init+0x2e0>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d013      	beq.n	800923c <HAL_GPIO_Init+0x1fc>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a43      	ldr	r2, [pc, #268]	; (8009324 <HAL_GPIO_Init+0x2e4>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d00d      	beq.n	8009238 <HAL_GPIO_Init+0x1f8>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a42      	ldr	r2, [pc, #264]	; (8009328 <HAL_GPIO_Init+0x2e8>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d007      	beq.n	8009234 <HAL_GPIO_Init+0x1f4>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a41      	ldr	r2, [pc, #260]	; (800932c <HAL_GPIO_Init+0x2ec>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d101      	bne.n	8009230 <HAL_GPIO_Init+0x1f0>
 800922c:	2305      	movs	r3, #5
 800922e:	e00a      	b.n	8009246 <HAL_GPIO_Init+0x206>
 8009230:	2306      	movs	r3, #6
 8009232:	e008      	b.n	8009246 <HAL_GPIO_Init+0x206>
 8009234:	2304      	movs	r3, #4
 8009236:	e006      	b.n	8009246 <HAL_GPIO_Init+0x206>
 8009238:	2303      	movs	r3, #3
 800923a:	e004      	b.n	8009246 <HAL_GPIO_Init+0x206>
 800923c:	2302      	movs	r3, #2
 800923e:	e002      	b.n	8009246 <HAL_GPIO_Init+0x206>
 8009240:	2301      	movs	r3, #1
 8009242:	e000      	b.n	8009246 <HAL_GPIO_Init+0x206>
 8009244:	2300      	movs	r3, #0
 8009246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009248:	f002 0203 	and.w	r2, r2, #3
 800924c:	0092      	lsls	r2, r2, #2
 800924e:	4093      	lsls	r3, r2
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	4313      	orrs	r3, r2
 8009254:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009256:	492f      	ldr	r1, [pc, #188]	; (8009314 <HAL_GPIO_Init+0x2d4>)
 8009258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925a:	089b      	lsrs	r3, r3, #2
 800925c:	3302      	adds	r3, #2
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d006      	beq.n	800927e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009270:	4b2f      	ldr	r3, [pc, #188]	; (8009330 <HAL_GPIO_Init+0x2f0>)
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	492e      	ldr	r1, [pc, #184]	; (8009330 <HAL_GPIO_Init+0x2f0>)
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	4313      	orrs	r3, r2
 800927a:	600b      	str	r3, [r1, #0]
 800927c:	e006      	b.n	800928c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800927e:	4b2c      	ldr	r3, [pc, #176]	; (8009330 <HAL_GPIO_Init+0x2f0>)
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	43db      	mvns	r3, r3
 8009286:	492a      	ldr	r1, [pc, #168]	; (8009330 <HAL_GPIO_Init+0x2f0>)
 8009288:	4013      	ands	r3, r2
 800928a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d006      	beq.n	80092a6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009298:	4b25      	ldr	r3, [pc, #148]	; (8009330 <HAL_GPIO_Init+0x2f0>)
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	4924      	ldr	r1, [pc, #144]	; (8009330 <HAL_GPIO_Init+0x2f0>)
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	604b      	str	r3, [r1, #4]
 80092a4:	e006      	b.n	80092b4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80092a6:	4b22      	ldr	r3, [pc, #136]	; (8009330 <HAL_GPIO_Init+0x2f0>)
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	43db      	mvns	r3, r3
 80092ae:	4920      	ldr	r1, [pc, #128]	; (8009330 <HAL_GPIO_Init+0x2f0>)
 80092b0:	4013      	ands	r3, r2
 80092b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d006      	beq.n	80092ce <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80092c0:	4b1b      	ldr	r3, [pc, #108]	; (8009330 <HAL_GPIO_Init+0x2f0>)
 80092c2:	689a      	ldr	r2, [r3, #8]
 80092c4:	491a      	ldr	r1, [pc, #104]	; (8009330 <HAL_GPIO_Init+0x2f0>)
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	608b      	str	r3, [r1, #8]
 80092cc:	e006      	b.n	80092dc <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80092ce:	4b18      	ldr	r3, [pc, #96]	; (8009330 <HAL_GPIO_Init+0x2f0>)
 80092d0:	689a      	ldr	r2, [r3, #8]
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	43db      	mvns	r3, r3
 80092d6:	4916      	ldr	r1, [pc, #88]	; (8009330 <HAL_GPIO_Init+0x2f0>)
 80092d8:	4013      	ands	r3, r2
 80092da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d025      	beq.n	8009334 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80092e8:	4b11      	ldr	r3, [pc, #68]	; (8009330 <HAL_GPIO_Init+0x2f0>)
 80092ea:	68da      	ldr	r2, [r3, #12]
 80092ec:	4910      	ldr	r1, [pc, #64]	; (8009330 <HAL_GPIO_Init+0x2f0>)
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	60cb      	str	r3, [r1, #12]
 80092f4:	e025      	b.n	8009342 <HAL_GPIO_Init+0x302>
 80092f6:	bf00      	nop
 80092f8:	10320000 	.word	0x10320000
 80092fc:	10310000 	.word	0x10310000
 8009300:	10220000 	.word	0x10220000
 8009304:	10210000 	.word	0x10210000
 8009308:	10120000 	.word	0x10120000
 800930c:	10110000 	.word	0x10110000
 8009310:	40021000 	.word	0x40021000
 8009314:	40010000 	.word	0x40010000
 8009318:	40010800 	.word	0x40010800
 800931c:	40010c00 	.word	0x40010c00
 8009320:	40011000 	.word	0x40011000
 8009324:	40011400 	.word	0x40011400
 8009328:	40011800 	.word	0x40011800
 800932c:	40011c00 	.word	0x40011c00
 8009330:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009334:	4b0b      	ldr	r3, [pc, #44]	; (8009364 <HAL_GPIO_Init+0x324>)
 8009336:	68da      	ldr	r2, [r3, #12]
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	43db      	mvns	r3, r3
 800933c:	4909      	ldr	r1, [pc, #36]	; (8009364 <HAL_GPIO_Init+0x324>)
 800933e:	4013      	ands	r3, r2
 8009340:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8009342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009344:	3301      	adds	r3, #1
 8009346:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	fa22 f303 	lsr.w	r3, r2, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	f47f ae7e 	bne.w	8009054 <HAL_GPIO_Init+0x14>
  }
}
 8009358:	bf00      	nop
 800935a:	bf00      	nop
 800935c:	372c      	adds	r7, #44	; 0x2c
 800935e:	46bd      	mov	sp, r7
 8009360:	bc80      	pop	{r7}
 8009362:	4770      	bx	lr
 8009364:	40010400 	.word	0x40010400

08009368 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	460b      	mov	r3, r1
 8009372:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	689a      	ldr	r2, [r3, #8]
 8009378:	887b      	ldrh	r3, [r7, #2]
 800937a:	4013      	ands	r3, r2
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009380:	2301      	movs	r3, #1
 8009382:	73fb      	strb	r3, [r7, #15]
 8009384:	e001      	b.n	800938a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009386:	2300      	movs	r3, #0
 8009388:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800938a:	7bfb      	ldrb	r3, [r7, #15]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	bc80      	pop	{r7}
 8009394:	4770      	bx	lr

08009396 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009396:	b480      	push	{r7}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	460b      	mov	r3, r1
 80093a0:	807b      	strh	r3, [r7, #2]
 80093a2:	4613      	mov	r3, r2
 80093a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80093a6:	787b      	ldrb	r3, [r7, #1]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d003      	beq.n	80093b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093ac:	887a      	ldrh	r2, [r7, #2]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80093b2:	e003      	b.n	80093bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80093b4:	887b      	ldrh	r3, [r7, #2]
 80093b6:	041a      	lsls	r2, r3, #16
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	611a      	str	r2, [r3, #16]
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bc80      	pop	{r7}
 80093c4:	4770      	bx	lr

080093c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b085      	sub	sp, #20
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	460b      	mov	r3, r1
 80093d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80093d8:	887a      	ldrh	r2, [r7, #2]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	4013      	ands	r3, r2
 80093de:	041a      	lsls	r2, r3, #16
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	43d9      	mvns	r1, r3
 80093e4:	887b      	ldrh	r3, [r7, #2]
 80093e6:	400b      	ands	r3, r1
 80093e8:	431a      	orrs	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	611a      	str	r2, [r3, #16]
}
 80093ee:	bf00      	nop
 80093f0:	3714      	adds	r7, #20
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bc80      	pop	{r7}
 80093f6:	4770      	bx	lr

080093f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d101      	bne.n	800940a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	e12b      	b.n	8009662 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009410:	b2db      	uxtb	r3, r3
 8009412:	2b00      	cmp	r3, #0
 8009414:	d106      	bne.n	8009424 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7fa fb0c 	bl	8003a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2224      	movs	r2, #36	; 0x24
 8009428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f022 0201 	bic.w	r2, r2, #1
 800943a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800944a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800945a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800945c:	f001 fd20 	bl	800aea0 <HAL_RCC_GetPCLK1Freq>
 8009460:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	4a81      	ldr	r2, [pc, #516]	; (800966c <HAL_I2C_Init+0x274>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d807      	bhi.n	800947c <HAL_I2C_Init+0x84>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4a80      	ldr	r2, [pc, #512]	; (8009670 <HAL_I2C_Init+0x278>)
 8009470:	4293      	cmp	r3, r2
 8009472:	bf94      	ite	ls
 8009474:	2301      	movls	r3, #1
 8009476:	2300      	movhi	r3, #0
 8009478:	b2db      	uxtb	r3, r3
 800947a:	e006      	b.n	800948a <HAL_I2C_Init+0x92>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4a7d      	ldr	r2, [pc, #500]	; (8009674 <HAL_I2C_Init+0x27c>)
 8009480:	4293      	cmp	r3, r2
 8009482:	bf94      	ite	ls
 8009484:	2301      	movls	r3, #1
 8009486:	2300      	movhi	r3, #0
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e0e7      	b.n	8009662 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	4a78      	ldr	r2, [pc, #480]	; (8009678 <HAL_I2C_Init+0x280>)
 8009496:	fba2 2303 	umull	r2, r3, r2, r3
 800949a:	0c9b      	lsrs	r3, r3, #18
 800949c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6a1b      	ldr	r3, [r3, #32]
 80094b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	4a6a      	ldr	r2, [pc, #424]	; (800966c <HAL_I2C_Init+0x274>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d802      	bhi.n	80094cc <HAL_I2C_Init+0xd4>
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	3301      	adds	r3, #1
 80094ca:	e009      	b.n	80094e0 <HAL_I2C_Init+0xe8>
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80094d2:	fb02 f303 	mul.w	r3, r2, r3
 80094d6:	4a69      	ldr	r2, [pc, #420]	; (800967c <HAL_I2C_Init+0x284>)
 80094d8:	fba2 2303 	umull	r2, r3, r2, r3
 80094dc:	099b      	lsrs	r3, r3, #6
 80094de:	3301      	adds	r3, #1
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	6812      	ldr	r2, [r2, #0]
 80094e4:	430b      	orrs	r3, r1
 80094e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80094f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	495c      	ldr	r1, [pc, #368]	; (800966c <HAL_I2C_Init+0x274>)
 80094fc:	428b      	cmp	r3, r1
 80094fe:	d819      	bhi.n	8009534 <HAL_I2C_Init+0x13c>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	1e59      	subs	r1, r3, #1
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	fbb1 f3f3 	udiv	r3, r1, r3
 800950e:	1c59      	adds	r1, r3, #1
 8009510:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009514:	400b      	ands	r3, r1
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <HAL_I2C_Init+0x138>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	1e59      	subs	r1, r3, #1
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	005b      	lsls	r3, r3, #1
 8009524:	fbb1 f3f3 	udiv	r3, r1, r3
 8009528:	3301      	adds	r3, #1
 800952a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800952e:	e051      	b.n	80095d4 <HAL_I2C_Init+0x1dc>
 8009530:	2304      	movs	r3, #4
 8009532:	e04f      	b.n	80095d4 <HAL_I2C_Init+0x1dc>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d111      	bne.n	8009560 <HAL_I2C_Init+0x168>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	1e58      	subs	r0, r3, #1
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6859      	ldr	r1, [r3, #4]
 8009544:	460b      	mov	r3, r1
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	440b      	add	r3, r1
 800954a:	fbb0 f3f3 	udiv	r3, r0, r3
 800954e:	3301      	adds	r3, #1
 8009550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009554:	2b00      	cmp	r3, #0
 8009556:	bf0c      	ite	eq
 8009558:	2301      	moveq	r3, #1
 800955a:	2300      	movne	r3, #0
 800955c:	b2db      	uxtb	r3, r3
 800955e:	e012      	b.n	8009586 <HAL_I2C_Init+0x18e>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	1e58      	subs	r0, r3, #1
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6859      	ldr	r1, [r3, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	440b      	add	r3, r1
 800956e:	0099      	lsls	r1, r3, #2
 8009570:	440b      	add	r3, r1
 8009572:	fbb0 f3f3 	udiv	r3, r0, r3
 8009576:	3301      	adds	r3, #1
 8009578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800957c:	2b00      	cmp	r3, #0
 800957e:	bf0c      	ite	eq
 8009580:	2301      	moveq	r3, #1
 8009582:	2300      	movne	r3, #0
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <HAL_I2C_Init+0x196>
 800958a:	2301      	movs	r3, #1
 800958c:	e022      	b.n	80095d4 <HAL_I2C_Init+0x1dc>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10e      	bne.n	80095b4 <HAL_I2C_Init+0x1bc>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	1e58      	subs	r0, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6859      	ldr	r1, [r3, #4]
 800959e:	460b      	mov	r3, r1
 80095a0:	005b      	lsls	r3, r3, #1
 80095a2:	440b      	add	r3, r1
 80095a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80095a8:	3301      	adds	r3, #1
 80095aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095b2:	e00f      	b.n	80095d4 <HAL_I2C_Init+0x1dc>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	1e58      	subs	r0, r3, #1
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6859      	ldr	r1, [r3, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	440b      	add	r3, r1
 80095c2:	0099      	lsls	r1, r3, #2
 80095c4:	440b      	add	r3, r1
 80095c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80095ca:	3301      	adds	r3, #1
 80095cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095d4:	6879      	ldr	r1, [r7, #4]
 80095d6:	6809      	ldr	r1, [r1, #0]
 80095d8:	4313      	orrs	r3, r2
 80095da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	69da      	ldr	r2, [r3, #28]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	431a      	orrs	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009602:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	6911      	ldr	r1, [r2, #16]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	68d2      	ldr	r2, [r2, #12]
 800960e:	4311      	orrs	r1, r2
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	6812      	ldr	r2, [r2, #0]
 8009614:	430b      	orrs	r3, r1
 8009616:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	695a      	ldr	r2, [r3, #20]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	431a      	orrs	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	430a      	orrs	r2, r1
 8009632:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f042 0201 	orr.w	r2, r2, #1
 8009642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2220      	movs	r2, #32
 800964e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	000186a0 	.word	0x000186a0
 8009670:	001e847f 	.word	0x001e847f
 8009674:	003d08ff 	.word	0x003d08ff
 8009678:	431bde83 	.word	0x431bde83
 800967c:	10624dd3 	.word	0x10624dd3

08009680 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b088      	sub	sp, #32
 8009684:	af02      	add	r7, sp, #8
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	4608      	mov	r0, r1
 800968a:	4611      	mov	r1, r2
 800968c:	461a      	mov	r2, r3
 800968e:	4603      	mov	r3, r0
 8009690:	817b      	strh	r3, [r7, #10]
 8009692:	460b      	mov	r3, r1
 8009694:	813b      	strh	r3, [r7, #8]
 8009696:	4613      	mov	r3, r2
 8009698:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800969a:	f7fd fdc5 	bl	8007228 <HAL_GetTick>
 800969e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b20      	cmp	r3, #32
 80096aa:	f040 80d9 	bne.w	8009860 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	2319      	movs	r3, #25
 80096b4:	2201      	movs	r2, #1
 80096b6:	496d      	ldr	r1, [pc, #436]	; (800986c <HAL_I2C_Mem_Write+0x1ec>)
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 fdef 	bl	800a29c <I2C_WaitOnFlagUntilTimeout>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d001      	beq.n	80096c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80096c4:	2302      	movs	r3, #2
 80096c6:	e0cc      	b.n	8009862 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d101      	bne.n	80096d6 <HAL_I2C_Mem_Write+0x56>
 80096d2:	2302      	movs	r3, #2
 80096d4:	e0c5      	b.n	8009862 <HAL_I2C_Mem_Write+0x1e2>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d007      	beq.n	80096fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f042 0201 	orr.w	r2, r2, #1
 80096fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800970a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2221      	movs	r2, #33	; 0x21
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2240      	movs	r2, #64	; 0x40
 8009718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6a3a      	ldr	r2, [r7, #32]
 8009726:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800972c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009732:	b29a      	uxth	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	4a4d      	ldr	r2, [pc, #308]	; (8009870 <HAL_I2C_Mem_Write+0x1f0>)
 800973c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800973e:	88f8      	ldrh	r0, [r7, #6]
 8009740:	893a      	ldrh	r2, [r7, #8]
 8009742:	8979      	ldrh	r1, [r7, #10]
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	9301      	str	r3, [sp, #4]
 8009748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	4603      	mov	r3, r0
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 fc26 	bl	8009fa0 <I2C_RequestMemoryWrite>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d052      	beq.n	8009800 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e081      	b.n	8009862 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 fe70 	bl	800a448 <I2C_WaitOnTXEFlagUntilTimeout>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00d      	beq.n	800978a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009772:	2b04      	cmp	r3, #4
 8009774:	d107      	bne.n	8009786 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009784:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	e06b      	b.n	8009862 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	781a      	ldrb	r2, [r3, #0]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	1c5a      	adds	r2, r3, #1
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a4:	3b01      	subs	r3, #1
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	3b01      	subs	r3, #1
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	f003 0304 	and.w	r3, r3, #4
 80097c4:	2b04      	cmp	r3, #4
 80097c6:	d11b      	bne.n	8009800 <HAL_I2C_Mem_Write+0x180>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d017      	beq.n	8009800 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	781a      	ldrb	r2, [r3, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	3b01      	subs	r3, #1
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1aa      	bne.n	800975e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009808:	697a      	ldr	r2, [r7, #20]
 800980a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 fe5c 	bl	800a4ca <I2C_WaitOnBTFFlagUntilTimeout>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00d      	beq.n	8009834 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981c:	2b04      	cmp	r3, #4
 800981e:	d107      	bne.n	8009830 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800982e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e016      	b.n	8009862 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2220      	movs	r2, #32
 8009848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	e000      	b.n	8009862 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009860:	2302      	movs	r3, #2
  }
}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	00100002 	.word	0x00100002
 8009870:	ffff0000 	.word	0xffff0000

08009874 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08c      	sub	sp, #48	; 0x30
 8009878:	af02      	add	r7, sp, #8
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	4608      	mov	r0, r1
 800987e:	4611      	mov	r1, r2
 8009880:	461a      	mov	r2, r3
 8009882:	4603      	mov	r3, r0
 8009884:	817b      	strh	r3, [r7, #10]
 8009886:	460b      	mov	r3, r1
 8009888:	813b      	strh	r3, [r7, #8]
 800988a:	4613      	mov	r3, r2
 800988c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009892:	f7fd fcc9 	bl	8007228 <HAL_GetTick>
 8009896:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b20      	cmp	r3, #32
 80098a2:	f040 8244 	bne.w	8009d2e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	2319      	movs	r3, #25
 80098ac:	2201      	movs	r2, #1
 80098ae:	4982      	ldr	r1, [pc, #520]	; (8009ab8 <HAL_I2C_Mem_Read+0x244>)
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 fcf3 	bl	800a29c <I2C_WaitOnFlagUntilTimeout>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80098bc:	2302      	movs	r3, #2
 80098be:	e237      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d101      	bne.n	80098ce <HAL_I2C_Mem_Read+0x5a>
 80098ca:	2302      	movs	r3, #2
 80098cc:	e230      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0301 	and.w	r3, r3, #1
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d007      	beq.n	80098f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0201 	orr.w	r2, r2, #1
 80098f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009902:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2222      	movs	r2, #34	; 0x22
 8009908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2240      	movs	r2, #64	; 0x40
 8009910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800991e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800992a:	b29a      	uxth	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4a62      	ldr	r2, [pc, #392]	; (8009abc <HAL_I2C_Mem_Read+0x248>)
 8009934:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009936:	88f8      	ldrh	r0, [r7, #6]
 8009938:	893a      	ldrh	r2, [r7, #8]
 800993a:	8979      	ldrh	r1, [r7, #10]
 800993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993e:	9301      	str	r3, [sp, #4]
 8009940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	4603      	mov	r3, r0
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f000 fbc0 	bl	800a0cc <I2C_RequestMemoryRead>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d001      	beq.n	8009956 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e1ec      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800995a:	2b00      	cmp	r3, #0
 800995c:	d113      	bne.n	8009986 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800995e:	2300      	movs	r3, #0
 8009960:	61fb      	str	r3, [r7, #28]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	695b      	ldr	r3, [r3, #20]
 8009968:	61fb      	str	r3, [r7, #28]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	61fb      	str	r3, [r7, #28]
 8009972:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	e1c0      	b.n	8009d08 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800998a:	2b01      	cmp	r3, #1
 800998c:	d11e      	bne.n	80099cc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800999c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800999e:	b672      	cpsid	i
}
 80099a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099a2:	2300      	movs	r3, #0
 80099a4:	61bb      	str	r3, [r7, #24]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	61bb      	str	r3, [r7, #24]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	61bb      	str	r3, [r7, #24]
 80099b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80099c8:	b662      	cpsie	i
}
 80099ca:	e035      	b.n	8009a38 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d11e      	bne.n	8009a12 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80099e4:	b672      	cpsid	i
}
 80099e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099e8:	2300      	movs	r3, #0
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	695b      	ldr	r3, [r3, #20]
 80099f2:	617b      	str	r3, [r7, #20]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	617b      	str	r3, [r7, #20]
 80099fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009a0e:	b662      	cpsie	i
}
 8009a10:	e012      	b.n	8009a38 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a20:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a22:	2300      	movs	r3, #0
 8009a24:	613b      	str	r3, [r7, #16]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	613b      	str	r3, [r7, #16]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	613b      	str	r3, [r7, #16]
 8009a36:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009a38:	e166      	b.n	8009d08 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a3e:	2b03      	cmp	r3, #3
 8009a40:	f200 811f 	bhi.w	8009c82 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d123      	bne.n	8009a94 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f000 fd7b 	bl	800a54c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e167      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	691a      	ldr	r2, [r3, #16]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6a:	b2d2      	uxtb	r2, r2
 8009a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a92:	e139      	b.n	8009d08 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d152      	bne.n	8009b42 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	4906      	ldr	r1, [pc, #24]	; (8009ac0 <HAL_I2C_Mem_Read+0x24c>)
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 fbf8 	bl	800a29c <I2C_WaitOnFlagUntilTimeout>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d008      	beq.n	8009ac4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e13c      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
 8009ab6:	bf00      	nop
 8009ab8:	00100002 	.word	0x00100002
 8009abc:	ffff0000 	.word	0xffff0000
 8009ac0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009ac4:	b672      	cpsid	i
}
 8009ac6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	691a      	ldr	r2, [r3, #16]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	b2d2      	uxtb	r2, r2
 8009ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009af4:	3b01      	subs	r3, #1
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	3b01      	subs	r3, #1
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009b0a:	b662      	cpsie	i
}
 8009b0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	691a      	ldr	r2, [r3, #16]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b18:	b2d2      	uxtb	r2, r2
 8009b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b20:	1c5a      	adds	r2, r3, #1
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b40:	e0e2      	b.n	8009d08 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b48:	2200      	movs	r2, #0
 8009b4a:	497b      	ldr	r1, [pc, #492]	; (8009d38 <HAL_I2C_Mem_Read+0x4c4>)
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 fba5 	bl	800a29c <I2C_WaitOnFlagUntilTimeout>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e0e9      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b6c:	b672      	cpsid	i
}
 8009b6e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	691a      	ldr	r2, [r3, #16]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	b2d2      	uxtb	r2, r2
 8009b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	1c5a      	adds	r2, r3, #1
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009ba2:	4b66      	ldr	r3, [pc, #408]	; (8009d3c <HAL_I2C_Mem_Read+0x4c8>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	08db      	lsrs	r3, r3, #3
 8009ba8:	4a65      	ldr	r2, [pc, #404]	; (8009d40 <HAL_I2C_Mem_Read+0x4cc>)
 8009baa:	fba2 2303 	umull	r2, r3, r2, r3
 8009bae:	0a1a      	lsrs	r2, r3, #8
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	00da      	lsls	r2, r3, #3
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d118      	bne.n	8009bfa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2220      	movs	r2, #32
 8009bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be2:	f043 0220 	orr.w	r2, r3, #32
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009bea:	b662      	cpsie	i
}
 8009bec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e09a      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	f003 0304 	and.w	r3, r3, #4
 8009c04:	2b04      	cmp	r3, #4
 8009c06:	d1d9      	bne.n	8009bbc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	691a      	ldr	r2, [r3, #16]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c22:	b2d2      	uxtb	r2, r2
 8009c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2a:	1c5a      	adds	r2, r3, #1
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c34:	3b01      	subs	r3, #1
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	3b01      	subs	r3, #1
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009c4a:	b662      	cpsie	i
}
 8009c4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	691a      	ldr	r2, [r3, #16]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	b2d2      	uxtb	r2, r2
 8009c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c60:	1c5a      	adds	r2, r3, #1
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c80:	e042      	b.n	8009d08 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f000 fc60 	bl	800a54c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e04c      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	691a      	ldr	r2, [r3, #16]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca0:	b2d2      	uxtb	r2, r2
 8009ca2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	695b      	ldr	r3, [r3, #20]
 8009cce:	f003 0304 	and.w	r3, r3, #4
 8009cd2:	2b04      	cmp	r3, #4
 8009cd4:	d118      	bne.n	8009d08 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	691a      	ldr	r2, [r3, #16]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	b2d2      	uxtb	r2, r2
 8009ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce8:	1c5a      	adds	r2, r3, #1
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	3b01      	subs	r3, #1
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f47f ae94 	bne.w	8009a3a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2220      	movs	r2, #32
 8009d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	e000      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009d2e:	2302      	movs	r3, #2
  }
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3728      	adds	r7, #40	; 0x28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	00010004 	.word	0x00010004
 8009d3c:	20000034 	.word	0x20000034
 8009d40:	14f8b589 	.word	0x14f8b589

08009d44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b08a      	sub	sp, #40	; 0x28
 8009d48:	af02      	add	r7, sp, #8
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	607a      	str	r2, [r7, #4]
 8009d4e:	603b      	str	r3, [r7, #0]
 8009d50:	460b      	mov	r3, r1
 8009d52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009d54:	f7fd fa68 	bl	8007228 <HAL_GetTick>
 8009d58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b20      	cmp	r3, #32
 8009d68:	f040 8111 	bne.w	8009f8e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	2319      	movs	r3, #25
 8009d72:	2201      	movs	r2, #1
 8009d74:	4988      	ldr	r1, [pc, #544]	; (8009f98 <HAL_I2C_IsDeviceReady+0x254>)
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f000 fa90 	bl	800a29c <I2C_WaitOnFlagUntilTimeout>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009d82:	2302      	movs	r3, #2
 8009d84:	e104      	b.n	8009f90 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d101      	bne.n	8009d94 <HAL_I2C_IsDeviceReady+0x50>
 8009d90:	2302      	movs	r3, #2
 8009d92:	e0fd      	b.n	8009f90 <HAL_I2C_IsDeviceReady+0x24c>
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 0301 	and.w	r3, r3, #1
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d007      	beq.n	8009dba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f042 0201 	orr.w	r2, r2, #1
 8009db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009dc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2224      	movs	r2, #36	; 0x24
 8009dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4a70      	ldr	r2, [pc, #448]	; (8009f9c <HAL_I2C_IsDeviceReady+0x258>)
 8009ddc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f000 fa4e 	bl	800a29c <I2C_WaitOnFlagUntilTimeout>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00d      	beq.n	8009e22 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e14:	d103      	bne.n	8009e1e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e1c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	e0b6      	b.n	8009f90 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e22:	897b      	ldrh	r3, [r7, #10]
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	461a      	mov	r2, r3
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009e30:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009e32:	f7fd f9f9 	bl	8007228 <HAL_GetTick>
 8009e36:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	695b      	ldr	r3, [r3, #20]
 8009e3e:	f003 0302 	and.w	r3, r3, #2
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	bf0c      	ite	eq
 8009e46:	2301      	moveq	r3, #1
 8009e48:	2300      	movne	r3, #0
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	695b      	ldr	r3, [r3, #20]
 8009e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e5c:	bf0c      	ite	eq
 8009e5e:	2301      	moveq	r3, #1
 8009e60:	2300      	movne	r3, #0
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009e66:	e025      	b.n	8009eb4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009e68:	f7fd f9de 	bl	8007228 <HAL_GetTick>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d302      	bcc.n	8009e7e <HAL_I2C_IsDeviceReady+0x13a>
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d103      	bne.n	8009e86 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	22a0      	movs	r2, #160	; 0xa0
 8009e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	695b      	ldr	r3, [r3, #20]
 8009e8c:	f003 0302 	and.w	r3, r3, #2
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	bf0c      	ite	eq
 8009e94:	2301      	moveq	r3, #1
 8009e96:	2300      	movne	r3, #0
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eaa:	bf0c      	ite	eq
 8009eac:	2301      	moveq	r3, #1
 8009eae:	2300      	movne	r3, #0
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2ba0      	cmp	r3, #160	; 0xa0
 8009ebe:	d005      	beq.n	8009ecc <HAL_I2C_IsDeviceReady+0x188>
 8009ec0:	7dfb      	ldrb	r3, [r7, #23]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d102      	bne.n	8009ecc <HAL_I2C_IsDeviceReady+0x188>
 8009ec6:	7dbb      	ldrb	r3, [r7, #22]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d0cd      	beq.n	8009e68 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2220      	movs	r2, #32
 8009ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	f003 0302 	and.w	r3, r3, #2
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d129      	bne.n	8009f36 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ef0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	613b      	str	r3, [r7, #16]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	613b      	str	r3, [r7, #16]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	613b      	str	r3, [r7, #16]
 8009f06:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	2319      	movs	r3, #25
 8009f0e:	2201      	movs	r2, #1
 8009f10:	4921      	ldr	r1, [pc, #132]	; (8009f98 <HAL_I2C_IsDeviceReady+0x254>)
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f000 f9c2 	bl	800a29c <I2C_WaitOnFlagUntilTimeout>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e036      	b.n	8009f90 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2220      	movs	r2, #32
 8009f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	e02c      	b.n	8009f90 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f44:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f4e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	2319      	movs	r3, #25
 8009f56:	2201      	movs	r2, #1
 8009f58:	490f      	ldr	r1, [pc, #60]	; (8009f98 <HAL_I2C_IsDeviceReady+0x254>)
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f000 f99e 	bl	800a29c <I2C_WaitOnFlagUntilTimeout>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e012      	b.n	8009f90 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009f70:	69ba      	ldr	r2, [r7, #24]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	f4ff af32 	bcc.w	8009dde <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e000      	b.n	8009f90 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8009f8e:	2302      	movs	r3, #2
  }
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3720      	adds	r7, #32
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	00100002 	.word	0x00100002
 8009f9c:	ffff0000 	.word	0xffff0000

08009fa0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b088      	sub	sp, #32
 8009fa4:	af02      	add	r7, sp, #8
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	4608      	mov	r0, r1
 8009faa:	4611      	mov	r1, r2
 8009fac:	461a      	mov	r2, r3
 8009fae:	4603      	mov	r3, r0
 8009fb0:	817b      	strh	r3, [r7, #10]
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	813b      	strh	r3, [r7, #8]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f000 f960 	bl	800a29c <I2C_WaitOnFlagUntilTimeout>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00d      	beq.n	8009ffe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ff0:	d103      	bne.n	8009ffa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ff8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	e05f      	b.n	800a0be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ffe:	897b      	ldrh	r3, [r7, #10]
 800a000:	b2db      	uxtb	r3, r3
 800a002:	461a      	mov	r2, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a00c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a010:	6a3a      	ldr	r2, [r7, #32]
 800a012:	492d      	ldr	r1, [pc, #180]	; (800a0c8 <I2C_RequestMemoryWrite+0x128>)
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f000 f998 	bl	800a34a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e04c      	b.n	800a0be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a024:	2300      	movs	r3, #0
 800a026:	617b      	str	r3, [r7, #20]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	617b      	str	r3, [r7, #20]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	617b      	str	r3, [r7, #20]
 800a038:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a03a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a03c:	6a39      	ldr	r1, [r7, #32]
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 fa02 	bl	800a448 <I2C_WaitOnTXEFlagUntilTimeout>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00d      	beq.n	800a066 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04e:	2b04      	cmp	r3, #4
 800a050:	d107      	bne.n	800a062 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a060:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e02b      	b.n	800a0be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a066:	88fb      	ldrh	r3, [r7, #6]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d105      	bne.n	800a078 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a06c:	893b      	ldrh	r3, [r7, #8]
 800a06e:	b2da      	uxtb	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	611a      	str	r2, [r3, #16]
 800a076:	e021      	b.n	800a0bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a078:	893b      	ldrh	r3, [r7, #8]
 800a07a:	0a1b      	lsrs	r3, r3, #8
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	b2da      	uxtb	r2, r3
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a088:	6a39      	ldr	r1, [r7, #32]
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 f9dc 	bl	800a448 <I2C_WaitOnTXEFlagUntilTimeout>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00d      	beq.n	800a0b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09a:	2b04      	cmp	r3, #4
 800a09c:	d107      	bne.n	800a0ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e005      	b.n	800a0be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0b2:	893b      	ldrh	r3, [r7, #8]
 800a0b4:	b2da      	uxtb	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3718      	adds	r7, #24
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	00010002 	.word	0x00010002

0800a0cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af02      	add	r7, sp, #8
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	4608      	mov	r0, r1
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4603      	mov	r3, r0
 800a0dc:	817b      	strh	r3, [r7, #10]
 800a0de:	460b      	mov	r3, r1
 800a0e0:	813b      	strh	r3, [r7, #8]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a0f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a104:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	6a3b      	ldr	r3, [r7, #32]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f000 f8c2 	bl	800a29c <I2C_WaitOnFlagUntilTimeout>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00d      	beq.n	800a13a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a12c:	d103      	bne.n	800a136 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a134:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a136:	2303      	movs	r3, #3
 800a138:	e0aa      	b.n	800a290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a13a:	897b      	ldrh	r3, [r7, #10]
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	461a      	mov	r2, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a148:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	6a3a      	ldr	r2, [r7, #32]
 800a14e:	4952      	ldr	r1, [pc, #328]	; (800a298 <I2C_RequestMemoryRead+0x1cc>)
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f000 f8fa 	bl	800a34a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e097      	b.n	800a290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a160:	2300      	movs	r3, #0
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	617b      	str	r3, [r7, #20]
 800a174:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a178:	6a39      	ldr	r1, [r7, #32]
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 f964 	bl	800a448 <I2C_WaitOnTXEFlagUntilTimeout>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00d      	beq.n	800a1a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18a:	2b04      	cmp	r3, #4
 800a18c:	d107      	bne.n	800a19e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a19c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e076      	b.n	800a290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1a2:	88fb      	ldrh	r3, [r7, #6]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d105      	bne.n	800a1b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1a8:	893b      	ldrh	r3, [r7, #8]
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	611a      	str	r2, [r3, #16]
 800a1b2:	e021      	b.n	800a1f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1b4:	893b      	ldrh	r3, [r7, #8]
 800a1b6:	0a1b      	lsrs	r3, r3, #8
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1c4:	6a39      	ldr	r1, [r7, #32]
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f000 f93e 	bl	800a448 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00d      	beq.n	800a1ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d6:	2b04      	cmp	r3, #4
 800a1d8:	d107      	bne.n	800a1ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e050      	b.n	800a290 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1ee:	893b      	ldrh	r3, [r7, #8]
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1fa:	6a39      	ldr	r1, [r7, #32]
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 f923 	bl	800a448 <I2C_WaitOnTXEFlagUntilTimeout>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00d      	beq.n	800a224 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20c:	2b04      	cmp	r3, #4
 800a20e:	d107      	bne.n	800a220 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a21e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e035      	b.n	800a290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a232:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	6a3b      	ldr	r3, [r7, #32]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 f82b 	bl	800a29c <I2C_WaitOnFlagUntilTimeout>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00d      	beq.n	800a268 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a25a:	d103      	bne.n	800a264 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a262:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a264:	2303      	movs	r3, #3
 800a266:	e013      	b.n	800a290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a268:	897b      	ldrh	r3, [r7, #10]
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	f043 0301 	orr.w	r3, r3, #1
 800a270:	b2da      	uxtb	r2, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27a:	6a3a      	ldr	r2, [r7, #32]
 800a27c:	4906      	ldr	r1, [pc, #24]	; (800a298 <I2C_RequestMemoryRead+0x1cc>)
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f000 f863 	bl	800a34a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e000      	b.n	800a290 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3718      	adds	r7, #24
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	00010002 	.word	0x00010002

0800a29c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	603b      	str	r3, [r7, #0]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a2ac:	e025      	b.n	800a2fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b4:	d021      	beq.n	800a2fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2b6:	f7fc ffb7 	bl	8007228 <HAL_GetTick>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d302      	bcc.n	800a2cc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d116      	bne.n	800a2fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2220      	movs	r2, #32
 800a2d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e6:	f043 0220 	orr.w	r2, r3, #32
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e023      	b.n	800a342 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	0c1b      	lsrs	r3, r3, #16
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	2b01      	cmp	r3, #1
 800a302:	d10d      	bne.n	800a320 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	43da      	mvns	r2, r3
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	4013      	ands	r3, r2
 800a310:	b29b      	uxth	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	bf0c      	ite	eq
 800a316:	2301      	moveq	r3, #1
 800a318:	2300      	movne	r3, #0
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	461a      	mov	r2, r3
 800a31e:	e00c      	b.n	800a33a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	43da      	mvns	r2, r3
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	4013      	ands	r3, r2
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	bf0c      	ite	eq
 800a332:	2301      	moveq	r3, #1
 800a334:	2300      	movne	r3, #0
 800a336:	b2db      	uxtb	r3, r3
 800a338:	461a      	mov	r2, r3
 800a33a:	79fb      	ldrb	r3, [r7, #7]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d0b6      	beq.n	800a2ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b084      	sub	sp, #16
 800a34e:	af00      	add	r7, sp, #0
 800a350:	60f8      	str	r0, [r7, #12]
 800a352:	60b9      	str	r1, [r7, #8]
 800a354:	607a      	str	r2, [r7, #4]
 800a356:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a358:	e051      	b.n	800a3fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	695b      	ldr	r3, [r3, #20]
 800a360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a368:	d123      	bne.n	800a3b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a378:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a382:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2220      	movs	r2, #32
 800a38e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2200      	movs	r2, #0
 800a396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39e:	f043 0204 	orr.w	r2, r3, #4
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e046      	b.n	800a440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b8:	d021      	beq.n	800a3fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3ba:	f7fc ff35 	bl	8007228 <HAL_GetTick>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d302      	bcc.n	800a3d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d116      	bne.n	800a3fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2220      	movs	r2, #32
 800a3da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ea:	f043 0220 	orr.w	r2, r3, #32
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e020      	b.n	800a440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	0c1b      	lsrs	r3, r3, #16
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b01      	cmp	r3, #1
 800a406:	d10c      	bne.n	800a422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	695b      	ldr	r3, [r3, #20]
 800a40e:	43da      	mvns	r2, r3
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	4013      	ands	r3, r2
 800a414:	b29b      	uxth	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	bf14      	ite	ne
 800a41a:	2301      	movne	r3, #1
 800a41c:	2300      	moveq	r3, #0
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	e00b      	b.n	800a43a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	699b      	ldr	r3, [r3, #24]
 800a428:	43da      	mvns	r2, r3
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	4013      	ands	r3, r2
 800a42e:	b29b      	uxth	r3, r3
 800a430:	2b00      	cmp	r3, #0
 800a432:	bf14      	ite	ne
 800a434:	2301      	movne	r3, #1
 800a436:	2300      	moveq	r3, #0
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d18d      	bne.n	800a35a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a454:	e02d      	b.n	800a4b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f000 f8ce 	bl	800a5f8 <I2C_IsAcknowledgeFailed>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e02d      	b.n	800a4c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46c:	d021      	beq.n	800a4b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a46e:	f7fc fedb 	bl	8007228 <HAL_GetTick>
 800a472:	4602      	mov	r2, r0
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d302      	bcc.n	800a484 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d116      	bne.n	800a4b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2220      	movs	r2, #32
 800a48e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49e:	f043 0220 	orr.w	r2, r3, #32
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e007      	b.n	800a4c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	695b      	ldr	r3, [r3, #20]
 800a4b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4bc:	2b80      	cmp	r3, #128	; 0x80
 800a4be:	d1ca      	bne.n	800a456 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	60f8      	str	r0, [r7, #12]
 800a4d2:	60b9      	str	r1, [r7, #8]
 800a4d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a4d6:	e02d      	b.n	800a534 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f000 f88d 	bl	800a5f8 <I2C_IsAcknowledgeFailed>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e02d      	b.n	800a544 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ee:	d021      	beq.n	800a534 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4f0:	f7fc fe9a 	bl	8007228 <HAL_GetTick>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d302      	bcc.n	800a506 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d116      	bne.n	800a534 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2220      	movs	r2, #32
 800a510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a520:	f043 0220 	orr.w	r2, r3, #32
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	e007      	b.n	800a544 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	f003 0304 	and.w	r3, r3, #4
 800a53e:	2b04      	cmp	r3, #4
 800a540:	d1ca      	bne.n	800a4d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a558:	e042      	b.n	800a5e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	695b      	ldr	r3, [r3, #20]
 800a560:	f003 0310 	and.w	r3, r3, #16
 800a564:	2b10      	cmp	r3, #16
 800a566:	d119      	bne.n	800a59c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f06f 0210 	mvn.w	r2, #16
 800a570:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2220      	movs	r2, #32
 800a57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e029      	b.n	800a5f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a59c:	f7fc fe44 	bl	8007228 <HAL_GetTick>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d302      	bcc.n	800a5b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d116      	bne.n	800a5e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2220      	movs	r2, #32
 800a5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5cc:	f043 0220 	orr.w	r2, r3, #32
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e007      	b.n	800a5f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ea:	2b40      	cmp	r3, #64	; 0x40
 800a5ec:	d1b5      	bne.n	800a55a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a60a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a60e:	d11b      	bne.n	800a648 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a618:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2220      	movs	r2, #32
 800a624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a634:	f043 0204 	orr.w	r2, r3, #4
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e000      	b.n	800a64a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	370c      	adds	r7, #12
 800a64e:	46bd      	mov	sp, r7
 800a650:	bc80      	pop	{r7}
 800a652:	4770      	bx	lr

0800a654 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d101      	bne.n	800a666 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e034      	b.n	800a6d0 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a66e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f245 5255 	movw	r2, #21845	; 0x5555
 800a678:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	6852      	ldr	r2, [r2, #4]
 800a682:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	6892      	ldr	r2, [r2, #8]
 800a68c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a68e:	f7fc fdcb 	bl	8007228 <HAL_GetTick>
 800a692:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a694:	e00f      	b.n	800a6b6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a696:	f7fc fdc7 	bl	8007228 <HAL_GetTick>
 800a69a:	4602      	mov	r2, r0
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	2b27      	cmp	r3, #39	; 0x27
 800a6a2:	d908      	bls.n	800a6b6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	f003 0303 	and.w	r3, r3, #3
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e00c      	b.n	800a6d0 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	f003 0303 	and.w	r3, r3, #3
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1e8      	bne.n	800a696 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a6cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a6e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bc80      	pop	{r7}
 800a6f4:	4770      	bx	lr
	...

0800a6f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d101      	bne.n	800a70a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e26c      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	f000 8087 	beq.w	800a826 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a718:	4b92      	ldr	r3, [pc, #584]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	f003 030c 	and.w	r3, r3, #12
 800a720:	2b04      	cmp	r3, #4
 800a722:	d00c      	beq.n	800a73e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a724:	4b8f      	ldr	r3, [pc, #572]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	f003 030c 	and.w	r3, r3, #12
 800a72c:	2b08      	cmp	r3, #8
 800a72e:	d112      	bne.n	800a756 <HAL_RCC_OscConfig+0x5e>
 800a730:	4b8c      	ldr	r3, [pc, #560]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a73c:	d10b      	bne.n	800a756 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a73e:	4b89      	ldr	r3, [pc, #548]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a746:	2b00      	cmp	r3, #0
 800a748:	d06c      	beq.n	800a824 <HAL_RCC_OscConfig+0x12c>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d168      	bne.n	800a824 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	e246      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a75e:	d106      	bne.n	800a76e <HAL_RCC_OscConfig+0x76>
 800a760:	4b80      	ldr	r3, [pc, #512]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a7f      	ldr	r2, [pc, #508]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a76a:	6013      	str	r3, [r2, #0]
 800a76c:	e02e      	b.n	800a7cc <HAL_RCC_OscConfig+0xd4>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d10c      	bne.n	800a790 <HAL_RCC_OscConfig+0x98>
 800a776:	4b7b      	ldr	r3, [pc, #492]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a7a      	ldr	r2, [pc, #488]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a77c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a780:	6013      	str	r3, [r2, #0]
 800a782:	4b78      	ldr	r3, [pc, #480]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a77      	ldr	r2, [pc, #476]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a78c:	6013      	str	r3, [r2, #0]
 800a78e:	e01d      	b.n	800a7cc <HAL_RCC_OscConfig+0xd4>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a798:	d10c      	bne.n	800a7b4 <HAL_RCC_OscConfig+0xbc>
 800a79a:	4b72      	ldr	r3, [pc, #456]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a71      	ldr	r2, [pc, #452]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a7a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7a4:	6013      	str	r3, [r2, #0]
 800a7a6:	4b6f      	ldr	r3, [pc, #444]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a6e      	ldr	r2, [pc, #440]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a7ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	e00b      	b.n	800a7cc <HAL_RCC_OscConfig+0xd4>
 800a7b4:	4b6b      	ldr	r3, [pc, #428]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a6a      	ldr	r2, [pc, #424]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a7ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	4b68      	ldr	r3, [pc, #416]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a67      	ldr	r2, [pc, #412]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a7c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d013      	beq.n	800a7fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7d4:	f7fc fd28 	bl	8007228 <HAL_GetTick>
 800a7d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7da:	e008      	b.n	800a7ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7dc:	f7fc fd24 	bl	8007228 <HAL_GetTick>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	2b64      	cmp	r3, #100	; 0x64
 800a7e8:	d901      	bls.n	800a7ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	e1fa      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7ee:	4b5d      	ldr	r3, [pc, #372]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d0f0      	beq.n	800a7dc <HAL_RCC_OscConfig+0xe4>
 800a7fa:	e014      	b.n	800a826 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7fc:	f7fc fd14 	bl	8007228 <HAL_GetTick>
 800a800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a802:	e008      	b.n	800a816 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a804:	f7fc fd10 	bl	8007228 <HAL_GetTick>
 800a808:	4602      	mov	r2, r0
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	2b64      	cmp	r3, #100	; 0x64
 800a810:	d901      	bls.n	800a816 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a812:	2303      	movs	r3, #3
 800a814:	e1e6      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a816:	4b53      	ldr	r3, [pc, #332]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1f0      	bne.n	800a804 <HAL_RCC_OscConfig+0x10c>
 800a822:	e000      	b.n	800a826 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 0302 	and.w	r3, r3, #2
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d063      	beq.n	800a8fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a832:	4b4c      	ldr	r3, [pc, #304]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	f003 030c 	and.w	r3, r3, #12
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00b      	beq.n	800a856 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a83e:	4b49      	ldr	r3, [pc, #292]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	f003 030c 	and.w	r3, r3, #12
 800a846:	2b08      	cmp	r3, #8
 800a848:	d11c      	bne.n	800a884 <HAL_RCC_OscConfig+0x18c>
 800a84a:	4b46      	ldr	r3, [pc, #280]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a852:	2b00      	cmp	r3, #0
 800a854:	d116      	bne.n	800a884 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a856:	4b43      	ldr	r3, [pc, #268]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 0302 	and.w	r3, r3, #2
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d005      	beq.n	800a86e <HAL_RCC_OscConfig+0x176>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	2b01      	cmp	r3, #1
 800a868:	d001      	beq.n	800a86e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e1ba      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a86e:	4b3d      	ldr	r3, [pc, #244]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	00db      	lsls	r3, r3, #3
 800a87c:	4939      	ldr	r1, [pc, #228]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a87e:	4313      	orrs	r3, r2
 800a880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a882:	e03a      	b.n	800a8fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d020      	beq.n	800a8ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a88c:	4b36      	ldr	r3, [pc, #216]	; (800a968 <HAL_RCC_OscConfig+0x270>)
 800a88e:	2201      	movs	r2, #1
 800a890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a892:	f7fc fcc9 	bl	8007228 <HAL_GetTick>
 800a896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a898:	e008      	b.n	800a8ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a89a:	f7fc fcc5 	bl	8007228 <HAL_GetTick>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d901      	bls.n	800a8ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e19b      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8ac:	4b2d      	ldr	r3, [pc, #180]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f003 0302 	and.w	r3, r3, #2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d0f0      	beq.n	800a89a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8b8:	4b2a      	ldr	r3, [pc, #168]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	00db      	lsls	r3, r3, #3
 800a8c6:	4927      	ldr	r1, [pc, #156]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	600b      	str	r3, [r1, #0]
 800a8cc:	e015      	b.n	800a8fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8ce:	4b26      	ldr	r3, [pc, #152]	; (800a968 <HAL_RCC_OscConfig+0x270>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8d4:	f7fc fca8 	bl	8007228 <HAL_GetTick>
 800a8d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8da:	e008      	b.n	800a8ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8dc:	f7fc fca4 	bl	8007228 <HAL_GetTick>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	d901      	bls.n	800a8ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e17a      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8ee:	4b1d      	ldr	r3, [pc, #116]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0302 	and.w	r3, r3, #2
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1f0      	bne.n	800a8dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f003 0308 	and.w	r3, r3, #8
 800a902:	2b00      	cmp	r3, #0
 800a904:	d03a      	beq.n	800a97c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d019      	beq.n	800a942 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a90e:	4b17      	ldr	r3, [pc, #92]	; (800a96c <HAL_RCC_OscConfig+0x274>)
 800a910:	2201      	movs	r2, #1
 800a912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a914:	f7fc fc88 	bl	8007228 <HAL_GetTick>
 800a918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a91a:	e008      	b.n	800a92e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a91c:	f7fc fc84 	bl	8007228 <HAL_GetTick>
 800a920:	4602      	mov	r2, r0
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	2b02      	cmp	r3, #2
 800a928:	d901      	bls.n	800a92e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e15a      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a92e:	4b0d      	ldr	r3, [pc, #52]	; (800a964 <HAL_RCC_OscConfig+0x26c>)
 800a930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a932:	f003 0302 	and.w	r3, r3, #2
 800a936:	2b00      	cmp	r3, #0
 800a938:	d0f0      	beq.n	800a91c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a93a:	2001      	movs	r0, #1
 800a93c:	f000 fac4 	bl	800aec8 <RCC_Delay>
 800a940:	e01c      	b.n	800a97c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a942:	4b0a      	ldr	r3, [pc, #40]	; (800a96c <HAL_RCC_OscConfig+0x274>)
 800a944:	2200      	movs	r2, #0
 800a946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a948:	f7fc fc6e 	bl	8007228 <HAL_GetTick>
 800a94c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a94e:	e00f      	b.n	800a970 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a950:	f7fc fc6a 	bl	8007228 <HAL_GetTick>
 800a954:	4602      	mov	r2, r0
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d908      	bls.n	800a970 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e140      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
 800a962:	bf00      	nop
 800a964:	40021000 	.word	0x40021000
 800a968:	42420000 	.word	0x42420000
 800a96c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a970:	4b9e      	ldr	r3, [pc, #632]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800a972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a974:	f003 0302 	and.w	r3, r3, #2
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1e9      	bne.n	800a950 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0304 	and.w	r3, r3, #4
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 80a6 	beq.w	800aad6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a98a:	2300      	movs	r3, #0
 800a98c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a98e:	4b97      	ldr	r3, [pc, #604]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800a990:	69db      	ldr	r3, [r3, #28]
 800a992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10d      	bne.n	800a9b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a99a:	4b94      	ldr	r3, [pc, #592]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800a99c:	69db      	ldr	r3, [r3, #28]
 800a99e:	4a93      	ldr	r2, [pc, #588]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800a9a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9a4:	61d3      	str	r3, [r2, #28]
 800a9a6:	4b91      	ldr	r3, [pc, #580]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800a9a8:	69db      	ldr	r3, [r3, #28]
 800a9aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9ae:	60bb      	str	r3, [r7, #8]
 800a9b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9b6:	4b8e      	ldr	r3, [pc, #568]	; (800abf0 <HAL_RCC_OscConfig+0x4f8>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d118      	bne.n	800a9f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9c2:	4b8b      	ldr	r3, [pc, #556]	; (800abf0 <HAL_RCC_OscConfig+0x4f8>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a8a      	ldr	r2, [pc, #552]	; (800abf0 <HAL_RCC_OscConfig+0x4f8>)
 800a9c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9ce:	f7fc fc2b 	bl	8007228 <HAL_GetTick>
 800a9d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9d4:	e008      	b.n	800a9e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9d6:	f7fc fc27 	bl	8007228 <HAL_GetTick>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	2b64      	cmp	r3, #100	; 0x64
 800a9e2:	d901      	bls.n	800a9e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e0fd      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9e8:	4b81      	ldr	r3, [pc, #516]	; (800abf0 <HAL_RCC_OscConfig+0x4f8>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0f0      	beq.n	800a9d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d106      	bne.n	800aa0a <HAL_RCC_OscConfig+0x312>
 800a9fc:	4b7b      	ldr	r3, [pc, #492]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800a9fe:	6a1b      	ldr	r3, [r3, #32]
 800aa00:	4a7a      	ldr	r2, [pc, #488]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aa02:	f043 0301 	orr.w	r3, r3, #1
 800aa06:	6213      	str	r3, [r2, #32]
 800aa08:	e02d      	b.n	800aa66 <HAL_RCC_OscConfig+0x36e>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d10c      	bne.n	800aa2c <HAL_RCC_OscConfig+0x334>
 800aa12:	4b76      	ldr	r3, [pc, #472]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	4a75      	ldr	r2, [pc, #468]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aa18:	f023 0301 	bic.w	r3, r3, #1
 800aa1c:	6213      	str	r3, [r2, #32]
 800aa1e:	4b73      	ldr	r3, [pc, #460]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	4a72      	ldr	r2, [pc, #456]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aa24:	f023 0304 	bic.w	r3, r3, #4
 800aa28:	6213      	str	r3, [r2, #32]
 800aa2a:	e01c      	b.n	800aa66 <HAL_RCC_OscConfig+0x36e>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	2b05      	cmp	r3, #5
 800aa32:	d10c      	bne.n	800aa4e <HAL_RCC_OscConfig+0x356>
 800aa34:	4b6d      	ldr	r3, [pc, #436]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aa36:	6a1b      	ldr	r3, [r3, #32]
 800aa38:	4a6c      	ldr	r2, [pc, #432]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aa3a:	f043 0304 	orr.w	r3, r3, #4
 800aa3e:	6213      	str	r3, [r2, #32]
 800aa40:	4b6a      	ldr	r3, [pc, #424]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aa42:	6a1b      	ldr	r3, [r3, #32]
 800aa44:	4a69      	ldr	r2, [pc, #420]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aa46:	f043 0301 	orr.w	r3, r3, #1
 800aa4a:	6213      	str	r3, [r2, #32]
 800aa4c:	e00b      	b.n	800aa66 <HAL_RCC_OscConfig+0x36e>
 800aa4e:	4b67      	ldr	r3, [pc, #412]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	4a66      	ldr	r2, [pc, #408]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aa54:	f023 0301 	bic.w	r3, r3, #1
 800aa58:	6213      	str	r3, [r2, #32]
 800aa5a:	4b64      	ldr	r3, [pc, #400]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	4a63      	ldr	r2, [pc, #396]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aa60:	f023 0304 	bic.w	r3, r3, #4
 800aa64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d015      	beq.n	800aa9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa6e:	f7fc fbdb 	bl	8007228 <HAL_GetTick>
 800aa72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa74:	e00a      	b.n	800aa8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa76:	f7fc fbd7 	bl	8007228 <HAL_GetTick>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d901      	bls.n	800aa8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e0ab      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa8c:	4b57      	ldr	r3, [pc, #348]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aa8e:	6a1b      	ldr	r3, [r3, #32]
 800aa90:	f003 0302 	and.w	r3, r3, #2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d0ee      	beq.n	800aa76 <HAL_RCC_OscConfig+0x37e>
 800aa98:	e014      	b.n	800aac4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa9a:	f7fc fbc5 	bl	8007228 <HAL_GetTick>
 800aa9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aaa0:	e00a      	b.n	800aab8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aaa2:	f7fc fbc1 	bl	8007228 <HAL_GetTick>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	1ad3      	subs	r3, r2, r3
 800aaac:	f241 3288 	movw	r2, #5000	; 0x1388
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d901      	bls.n	800aab8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800aab4:	2303      	movs	r3, #3
 800aab6:	e095      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aab8:	4b4c      	ldr	r3, [pc, #304]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aaba:	6a1b      	ldr	r3, [r3, #32]
 800aabc:	f003 0302 	and.w	r3, r3, #2
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1ee      	bne.n	800aaa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aac4:	7dfb      	ldrb	r3, [r7, #23]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d105      	bne.n	800aad6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aaca:	4b48      	ldr	r3, [pc, #288]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aacc:	69db      	ldr	r3, [r3, #28]
 800aace:	4a47      	ldr	r2, [pc, #284]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aad4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f000 8081 	beq.w	800abe2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aae0:	4b42      	ldr	r3, [pc, #264]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	f003 030c 	and.w	r3, r3, #12
 800aae8:	2b08      	cmp	r3, #8
 800aaea:	d061      	beq.n	800abb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	69db      	ldr	r3, [r3, #28]
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d146      	bne.n	800ab82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaf4:	4b3f      	ldr	r3, [pc, #252]	; (800abf4 <HAL_RCC_OscConfig+0x4fc>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aafa:	f7fc fb95 	bl	8007228 <HAL_GetTick>
 800aafe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab00:	e008      	b.n	800ab14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab02:	f7fc fb91 	bl	8007228 <HAL_GetTick>
 800ab06:	4602      	mov	r2, r0
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d901      	bls.n	800ab14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ab10:	2303      	movs	r3, #3
 800ab12:	e067      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab14:	4b35      	ldr	r3, [pc, #212]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1f0      	bne.n	800ab02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a1b      	ldr	r3, [r3, #32]
 800ab24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab28:	d108      	bne.n	800ab3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ab2a:	4b30      	ldr	r3, [pc, #192]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	492d      	ldr	r1, [pc, #180]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab3c:	4b2b      	ldr	r3, [pc, #172]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a19      	ldr	r1, [r3, #32]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4c:	430b      	orrs	r3, r1
 800ab4e:	4927      	ldr	r1, [pc, #156]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800ab50:	4313      	orrs	r3, r2
 800ab52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab54:	4b27      	ldr	r3, [pc, #156]	; (800abf4 <HAL_RCC_OscConfig+0x4fc>)
 800ab56:	2201      	movs	r2, #1
 800ab58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab5a:	f7fc fb65 	bl	8007228 <HAL_GetTick>
 800ab5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab60:	e008      	b.n	800ab74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab62:	f7fc fb61 	bl	8007228 <HAL_GetTick>
 800ab66:	4602      	mov	r2, r0
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	1ad3      	subs	r3, r2, r3
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	d901      	bls.n	800ab74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e037      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab74:	4b1d      	ldr	r3, [pc, #116]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d0f0      	beq.n	800ab62 <HAL_RCC_OscConfig+0x46a>
 800ab80:	e02f      	b.n	800abe2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab82:	4b1c      	ldr	r3, [pc, #112]	; (800abf4 <HAL_RCC_OscConfig+0x4fc>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab88:	f7fc fb4e 	bl	8007228 <HAL_GetTick>
 800ab8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab8e:	e008      	b.n	800aba2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab90:	f7fc fb4a 	bl	8007228 <HAL_GetTick>
 800ab94:	4602      	mov	r2, r0
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	1ad3      	subs	r3, r2, r3
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d901      	bls.n	800aba2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ab9e:	2303      	movs	r3, #3
 800aba0:	e020      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aba2:	4b12      	ldr	r3, [pc, #72]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1f0      	bne.n	800ab90 <HAL_RCC_OscConfig+0x498>
 800abae:	e018      	b.n	800abe2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	69db      	ldr	r3, [r3, #28]
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d101      	bne.n	800abbc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	e013      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800abbc:	4b0b      	ldr	r3, [pc, #44]	; (800abec <HAL_RCC_OscConfig+0x4f4>)
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a1b      	ldr	r3, [r3, #32]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d106      	bne.n	800abde <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abda:	429a      	cmp	r2, r3
 800abdc:	d001      	beq.n	800abe2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	e000      	b.n	800abe4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3718      	adds	r7, #24
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	40021000 	.word	0x40021000
 800abf0:	40007000 	.word	0x40007000
 800abf4:	42420060 	.word	0x42420060

0800abf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d101      	bne.n	800ac0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e0d0      	b.n	800adae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ac0c:	4b6a      	ldr	r3, [pc, #424]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 0307 	and.w	r3, r3, #7
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d910      	bls.n	800ac3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac1a:	4b67      	ldr	r3, [pc, #412]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f023 0207 	bic.w	r2, r3, #7
 800ac22:	4965      	ldr	r1, [pc, #404]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac2a:	4b63      	ldr	r3, [pc, #396]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 0307 	and.w	r3, r3, #7
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d001      	beq.n	800ac3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e0b8      	b.n	800adae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 0302 	and.w	r3, r3, #2
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d020      	beq.n	800ac8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0304 	and.w	r3, r3, #4
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d005      	beq.n	800ac60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac54:	4b59      	ldr	r3, [pc, #356]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	4a58      	ldr	r2, [pc, #352]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ac5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ac5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f003 0308 	and.w	r3, r3, #8
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d005      	beq.n	800ac78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac6c:	4b53      	ldr	r3, [pc, #332]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	4a52      	ldr	r2, [pc, #328]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ac72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ac76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac78:	4b50      	ldr	r3, [pc, #320]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	494d      	ldr	r1, [pc, #308]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 0301 	and.w	r3, r3, #1
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d040      	beq.n	800ad18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d107      	bne.n	800acae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac9e:	4b47      	ldr	r3, [pc, #284]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d115      	bne.n	800acd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	e07f      	b.n	800adae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d107      	bne.n	800acc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800acb6:	4b41      	ldr	r3, [pc, #260]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d109      	bne.n	800acd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	e073      	b.n	800adae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acc6:	4b3d      	ldr	r3, [pc, #244]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f003 0302 	and.w	r3, r3, #2
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e06b      	b.n	800adae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800acd6:	4b39      	ldr	r3, [pc, #228]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	f023 0203 	bic.w	r2, r3, #3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	4936      	ldr	r1, [pc, #216]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ace4:	4313      	orrs	r3, r2
 800ace6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ace8:	f7fc fa9e 	bl	8007228 <HAL_GetTick>
 800acec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acee:	e00a      	b.n	800ad06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800acf0:	f7fc fa9a 	bl	8007228 <HAL_GetTick>
 800acf4:	4602      	mov	r2, r0
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	f241 3288 	movw	r2, #5000	; 0x1388
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d901      	bls.n	800ad06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ad02:	2303      	movs	r3, #3
 800ad04:	e053      	b.n	800adae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad06:	4b2d      	ldr	r3, [pc, #180]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f003 020c 	and.w	r2, r3, #12
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d1eb      	bne.n	800acf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ad18:	4b27      	ldr	r3, [pc, #156]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0307 	and.w	r3, r3, #7
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d210      	bcs.n	800ad48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad26:	4b24      	ldr	r3, [pc, #144]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f023 0207 	bic.w	r2, r3, #7
 800ad2e:	4922      	ldr	r1, [pc, #136]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad36:	4b20      	ldr	r3, [pc, #128]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f003 0307 	and.w	r3, r3, #7
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d001      	beq.n	800ad48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e032      	b.n	800adae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 0304 	and.w	r3, r3, #4
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d008      	beq.n	800ad66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad54:	4b19      	ldr	r3, [pc, #100]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	4916      	ldr	r1, [pc, #88]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ad62:	4313      	orrs	r3, r2
 800ad64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0308 	and.w	r3, r3, #8
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d009      	beq.n	800ad86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ad72:	4b12      	ldr	r3, [pc, #72]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	490e      	ldr	r1, [pc, #56]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ad82:	4313      	orrs	r3, r2
 800ad84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ad86:	f000 f821 	bl	800adcc <HAL_RCC_GetSysClockFreq>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	4b0b      	ldr	r3, [pc, #44]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	091b      	lsrs	r3, r3, #4
 800ad92:	f003 030f 	and.w	r3, r3, #15
 800ad96:	490a      	ldr	r1, [pc, #40]	; (800adc0 <HAL_RCC_ClockConfig+0x1c8>)
 800ad98:	5ccb      	ldrb	r3, [r1, r3]
 800ad9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad9e:	4a09      	ldr	r2, [pc, #36]	; (800adc4 <HAL_RCC_ClockConfig+0x1cc>)
 800ada0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ada2:	4b09      	ldr	r3, [pc, #36]	; (800adc8 <HAL_RCC_ClockConfig+0x1d0>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fc f9fc 	bl	80071a4 <HAL_InitTick>

  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	40022000 	.word	0x40022000
 800adbc:	40021000 	.word	0x40021000
 800adc0:	08010aac 	.word	0x08010aac
 800adc4:	20000034 	.word	0x20000034
 800adc8:	20000038 	.word	0x20000038

0800adcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800adcc:	b490      	push	{r4, r7}
 800adce:	b08a      	sub	sp, #40	; 0x28
 800add0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800add2:	4b2a      	ldr	r3, [pc, #168]	; (800ae7c <HAL_RCC_GetSysClockFreq+0xb0>)
 800add4:	1d3c      	adds	r4, r7, #4
 800add6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800add8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800addc:	f240 2301 	movw	r3, #513	; 0x201
 800ade0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ade2:	2300      	movs	r3, #0
 800ade4:	61fb      	str	r3, [r7, #28]
 800ade6:	2300      	movs	r3, #0
 800ade8:	61bb      	str	r3, [r7, #24]
 800adea:	2300      	movs	r3, #0
 800adec:	627b      	str	r3, [r7, #36]	; 0x24
 800adee:	2300      	movs	r3, #0
 800adf0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800adf2:	2300      	movs	r3, #0
 800adf4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800adf6:	4b22      	ldr	r3, [pc, #136]	; (800ae80 <HAL_RCC_GetSysClockFreq+0xb4>)
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	f003 030c 	and.w	r3, r3, #12
 800ae02:	2b04      	cmp	r3, #4
 800ae04:	d002      	beq.n	800ae0c <HAL_RCC_GetSysClockFreq+0x40>
 800ae06:	2b08      	cmp	r3, #8
 800ae08:	d003      	beq.n	800ae12 <HAL_RCC_GetSysClockFreq+0x46>
 800ae0a:	e02d      	b.n	800ae68 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ae0c:	4b1d      	ldr	r3, [pc, #116]	; (800ae84 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae0e:	623b      	str	r3, [r7, #32]
      break;
 800ae10:	e02d      	b.n	800ae6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	0c9b      	lsrs	r3, r3, #18
 800ae16:	f003 030f 	and.w	r3, r3, #15
 800ae1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ae1e:	4413      	add	r3, r2
 800ae20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800ae24:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d013      	beq.n	800ae58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ae30:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <HAL_RCC_GetSysClockFreq+0xb4>)
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	0c5b      	lsrs	r3, r3, #17
 800ae36:	f003 0301 	and.w	r3, r3, #1
 800ae3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ae3e:	4413      	add	r3, r2
 800ae40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ae44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	4a0e      	ldr	r2, [pc, #56]	; (800ae84 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae4a:	fb02 f203 	mul.w	r2, r2, r3
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae54:	627b      	str	r3, [r7, #36]	; 0x24
 800ae56:	e004      	b.n	800ae62 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	4a0b      	ldr	r2, [pc, #44]	; (800ae88 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ae5c:	fb02 f303 	mul.w	r3, r2, r3
 800ae60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800ae62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae64:	623b      	str	r3, [r7, #32]
      break;
 800ae66:	e002      	b.n	800ae6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ae68:	4b06      	ldr	r3, [pc, #24]	; (800ae84 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae6a:	623b      	str	r3, [r7, #32]
      break;
 800ae6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ae6e:	6a3b      	ldr	r3, [r7, #32]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3728      	adds	r7, #40	; 0x28
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bc90      	pop	{r4, r7}
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	08010698 	.word	0x08010698
 800ae80:	40021000 	.word	0x40021000
 800ae84:	007a1200 	.word	0x007a1200
 800ae88:	003d0900 	.word	0x003d0900

0800ae8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae90:	4b02      	ldr	r3, [pc, #8]	; (800ae9c <HAL_RCC_GetHCLKFreq+0x10>)
 800ae92:	681b      	ldr	r3, [r3, #0]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bc80      	pop	{r7}
 800ae9a:	4770      	bx	lr
 800ae9c:	20000034 	.word	0x20000034

0800aea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aea4:	f7ff fff2 	bl	800ae8c <HAL_RCC_GetHCLKFreq>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	4b05      	ldr	r3, [pc, #20]	; (800aec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	0a1b      	lsrs	r3, r3, #8
 800aeb0:	f003 0307 	and.w	r3, r3, #7
 800aeb4:	4903      	ldr	r1, [pc, #12]	; (800aec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aeb6:	5ccb      	ldrb	r3, [r1, r3]
 800aeb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	40021000 	.word	0x40021000
 800aec4:	08010abc 	.word	0x08010abc

0800aec8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800aed0:	4b0a      	ldr	r3, [pc, #40]	; (800aefc <RCC_Delay+0x34>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a0a      	ldr	r2, [pc, #40]	; (800af00 <RCC_Delay+0x38>)
 800aed6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeda:	0a5b      	lsrs	r3, r3, #9
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	fb02 f303 	mul.w	r3, r2, r3
 800aee2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800aee4:	bf00      	nop
  }
  while (Delay --);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	1e5a      	subs	r2, r3, #1
 800aeea:	60fa      	str	r2, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1f9      	bne.n	800aee4 <RCC_Delay+0x1c>
}
 800aef0:	bf00      	nop
 800aef2:	bf00      	nop
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bc80      	pop	{r7}
 800aefa:	4770      	bx	lr
 800aefc:	20000034 	.word	0x20000034
 800af00:	10624dd3 	.word	0x10624dd3

0800af04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800af0c:	2300      	movs	r3, #0
 800af0e:	613b      	str	r3, [r7, #16]
 800af10:	2300      	movs	r3, #0
 800af12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 0301 	and.w	r3, r3, #1
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d07d      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800af20:	2300      	movs	r3, #0
 800af22:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af24:	4b4f      	ldr	r3, [pc, #316]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af26:	69db      	ldr	r3, [r3, #28]
 800af28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d10d      	bne.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af30:	4b4c      	ldr	r3, [pc, #304]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af32:	69db      	ldr	r3, [r3, #28]
 800af34:	4a4b      	ldr	r2, [pc, #300]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af3a:	61d3      	str	r3, [r2, #28]
 800af3c:	4b49      	ldr	r3, [pc, #292]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af3e:	69db      	ldr	r3, [r3, #28]
 800af40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af44:	60bb      	str	r3, [r7, #8]
 800af46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af48:	2301      	movs	r3, #1
 800af4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af4c:	4b46      	ldr	r3, [pc, #280]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af54:	2b00      	cmp	r3, #0
 800af56:	d118      	bne.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800af58:	4b43      	ldr	r3, [pc, #268]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a42      	ldr	r2, [pc, #264]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af64:	f7fc f960 	bl	8007228 <HAL_GetTick>
 800af68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af6a:	e008      	b.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af6c:	f7fc f95c 	bl	8007228 <HAL_GetTick>
 800af70:	4602      	mov	r2, r0
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	2b64      	cmp	r3, #100	; 0x64
 800af78:	d901      	bls.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800af7a:	2303      	movs	r3, #3
 800af7c:	e06d      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af7e:	4b3a      	ldr	r3, [pc, #232]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0f0      	beq.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800af8a:	4b36      	ldr	r3, [pc, #216]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af8c:	6a1b      	ldr	r3, [r3, #32]
 800af8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d02e      	beq.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d027      	beq.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800afa8:	4b2e      	ldr	r3, [pc, #184]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afaa:	6a1b      	ldr	r3, [r3, #32]
 800afac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800afb2:	4b2e      	ldr	r3, [pc, #184]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800afb4:	2201      	movs	r2, #1
 800afb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800afb8:	4b2c      	ldr	r3, [pc, #176]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800afba:	2200      	movs	r2, #0
 800afbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800afbe:	4a29      	ldr	r2, [pc, #164]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f003 0301 	and.w	r3, r3, #1
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d014      	beq.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afce:	f7fc f92b 	bl	8007228 <HAL_GetTick>
 800afd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afd4:	e00a      	b.n	800afec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afd6:	f7fc f927 	bl	8007228 <HAL_GetTick>
 800afda:	4602      	mov	r2, r0
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d901      	bls.n	800afec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800afe8:	2303      	movs	r3, #3
 800afea:	e036      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afec:	4b1d      	ldr	r3, [pc, #116]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afee:	6a1b      	ldr	r3, [r3, #32]
 800aff0:	f003 0302 	and.w	r3, r3, #2
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d0ee      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aff8:	4b1a      	ldr	r3, [pc, #104]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800affa:	6a1b      	ldr	r3, [r3, #32]
 800affc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	4917      	ldr	r1, [pc, #92]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b006:	4313      	orrs	r3, r2
 800b008:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b00a:	7dfb      	ldrb	r3, [r7, #23]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d105      	bne.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b010:	4b14      	ldr	r3, [pc, #80]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b012:	69db      	ldr	r3, [r3, #28]
 800b014:	4a13      	ldr	r2, [pc, #76]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b01a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f003 0302 	and.w	r3, r3, #2
 800b024:	2b00      	cmp	r3, #0
 800b026:	d008      	beq.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b028:	4b0e      	ldr	r3, [pc, #56]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	490b      	ldr	r1, [pc, #44]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b036:	4313      	orrs	r3, r2
 800b038:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f003 0310 	and.w	r3, r3, #16
 800b042:	2b00      	cmp	r3, #0
 800b044:	d008      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b046:	4b07      	ldr	r3, [pc, #28]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	695b      	ldr	r3, [r3, #20]
 800b052:	4904      	ldr	r1, [pc, #16]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b054:	4313      	orrs	r3, r2
 800b056:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3718      	adds	r7, #24
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	40021000 	.word	0x40021000
 800b068:	40007000 	.word	0x40007000
 800b06c:	42420440 	.word	0x42420440

0800b070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d101      	bne.n	800b082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	e041      	b.n	800b106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d106      	bne.n	800b09c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f7fc f808 	bl	80070ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2202      	movs	r2, #2
 800b0a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	f000 fa96 	bl	800b5e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3708      	adds	r7, #8
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
	...

0800b110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	2b01      	cmp	r3, #1
 800b122:	d001      	beq.n	800b128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	e04e      	b.n	800b1c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2202      	movs	r2, #2
 800b12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68da      	ldr	r2, [r3, #12]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f042 0201 	orr.w	r2, r2, #1
 800b13e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a22      	ldr	r2, [pc, #136]	; (800b1d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d022      	beq.n	800b190 <HAL_TIM_Base_Start_IT+0x80>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a21      	ldr	r2, [pc, #132]	; (800b1d4 <HAL_TIM_Base_Start_IT+0xc4>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d01d      	beq.n	800b190 <HAL_TIM_Base_Start_IT+0x80>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b15c:	d018      	beq.n	800b190 <HAL_TIM_Base_Start_IT+0x80>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a1d      	ldr	r2, [pc, #116]	; (800b1d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d013      	beq.n	800b190 <HAL_TIM_Base_Start_IT+0x80>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a1b      	ldr	r2, [pc, #108]	; (800b1dc <HAL_TIM_Base_Start_IT+0xcc>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d00e      	beq.n	800b190 <HAL_TIM_Base_Start_IT+0x80>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a1a      	ldr	r2, [pc, #104]	; (800b1e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d009      	beq.n	800b190 <HAL_TIM_Base_Start_IT+0x80>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a18      	ldr	r2, [pc, #96]	; (800b1e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d004      	beq.n	800b190 <HAL_TIM_Base_Start_IT+0x80>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a17      	ldr	r2, [pc, #92]	; (800b1e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d111      	bne.n	800b1b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b06      	cmp	r3, #6
 800b1a0:	d010      	beq.n	800b1c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f042 0201 	orr.w	r2, r2, #1
 800b1b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1b2:	e007      	b.n	800b1c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f042 0201 	orr.w	r2, r2, #1
 800b1c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3714      	adds	r7, #20
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bc80      	pop	{r7}
 800b1ce:	4770      	bx	lr
 800b1d0:	40012c00 	.word	0x40012c00
 800b1d4:	40013400 	.word	0x40013400
 800b1d8:	40000400 	.word	0x40000400
 800b1dc:	40000800 	.word	0x40000800
 800b1e0:	40000c00 	.word	0x40000c00
 800b1e4:	40014c00 	.word	0x40014c00
 800b1e8:	40001800 	.word	0x40001800

0800b1ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	f003 0302 	and.w	r3, r3, #2
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d122      	bne.n	800b248 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	f003 0302 	and.w	r3, r3, #2
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d11b      	bne.n	800b248 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f06f 0202 	mvn.w	r2, #2
 800b218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	f003 0303 	and.w	r3, r3, #3
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d003      	beq.n	800b236 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 f9ba 	bl	800b5a8 <HAL_TIM_IC_CaptureCallback>
 800b234:	e005      	b.n	800b242 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f9ad 	bl	800b596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f9bc 	bl	800b5ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	f003 0304 	and.w	r3, r3, #4
 800b252:	2b04      	cmp	r3, #4
 800b254:	d122      	bne.n	800b29c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	f003 0304 	and.w	r3, r3, #4
 800b260:	2b04      	cmp	r3, #4
 800b262:	d11b      	bne.n	800b29c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f06f 0204 	mvn.w	r2, #4
 800b26c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2202      	movs	r2, #2
 800b272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 f990 	bl	800b5a8 <HAL_TIM_IC_CaptureCallback>
 800b288:	e005      	b.n	800b296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f983 	bl	800b596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 f992 	bl	800b5ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	f003 0308 	and.w	r3, r3, #8
 800b2a6:	2b08      	cmp	r3, #8
 800b2a8:	d122      	bne.n	800b2f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	f003 0308 	and.w	r3, r3, #8
 800b2b4:	2b08      	cmp	r3, #8
 800b2b6:	d11b      	bne.n	800b2f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f06f 0208 	mvn.w	r2, #8
 800b2c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2204      	movs	r2, #4
 800b2c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	f003 0303 	and.w	r3, r3, #3
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f966 	bl	800b5a8 <HAL_TIM_IC_CaptureCallback>
 800b2dc:	e005      	b.n	800b2ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f959 	bl	800b596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f968 	bl	800b5ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	f003 0310 	and.w	r3, r3, #16
 800b2fa:	2b10      	cmp	r3, #16
 800b2fc:	d122      	bne.n	800b344 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	f003 0310 	and.w	r3, r3, #16
 800b308:	2b10      	cmp	r3, #16
 800b30a:	d11b      	bne.n	800b344 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f06f 0210 	mvn.w	r2, #16
 800b314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2208      	movs	r2, #8
 800b31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	69db      	ldr	r3, [r3, #28]
 800b322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f93c 	bl	800b5a8 <HAL_TIM_IC_CaptureCallback>
 800b330:	e005      	b.n	800b33e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 f92f 	bl	800b596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f93e 	bl	800b5ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	f003 0301 	and.w	r3, r3, #1
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d10e      	bne.n	800b370 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	f003 0301 	and.w	r3, r3, #1
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d107      	bne.n	800b370 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f06f 0201 	mvn.w	r2, #1
 800b368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 f90a 	bl	800b584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b37a:	2b80      	cmp	r3, #128	; 0x80
 800b37c:	d10e      	bne.n	800b39c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b388:	2b80      	cmp	r3, #128	; 0x80
 800b38a:	d107      	bne.n	800b39c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fad9 	bl	800b94e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a6:	2b40      	cmp	r3, #64	; 0x40
 800b3a8:	d10e      	bne.n	800b3c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b4:	2b40      	cmp	r3, #64	; 0x40
 800b3b6:	d107      	bne.n	800b3c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 f902 	bl	800b5cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	f003 0320 	and.w	r3, r3, #32
 800b3d2:	2b20      	cmp	r3, #32
 800b3d4:	d10e      	bne.n	800b3f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	f003 0320 	and.w	r3, r3, #32
 800b3e0:	2b20      	cmp	r3, #32
 800b3e2:	d107      	bne.n	800b3f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f06f 0220 	mvn.w	r2, #32
 800b3ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 faa4 	bl	800b93c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3f4:	bf00      	nop
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d101      	bne.n	800b414 <HAL_TIM_ConfigClockSource+0x18>
 800b410:	2302      	movs	r3, #2
 800b412:	e0b3      	b.n	800b57c <HAL_TIM_ConfigClockSource+0x180>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2202      	movs	r2, #2
 800b420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b432:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b43a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b44c:	d03e      	beq.n	800b4cc <HAL_TIM_ConfigClockSource+0xd0>
 800b44e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b452:	f200 8087 	bhi.w	800b564 <HAL_TIM_ConfigClockSource+0x168>
 800b456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b45a:	f000 8085 	beq.w	800b568 <HAL_TIM_ConfigClockSource+0x16c>
 800b45e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b462:	d87f      	bhi.n	800b564 <HAL_TIM_ConfigClockSource+0x168>
 800b464:	2b70      	cmp	r3, #112	; 0x70
 800b466:	d01a      	beq.n	800b49e <HAL_TIM_ConfigClockSource+0xa2>
 800b468:	2b70      	cmp	r3, #112	; 0x70
 800b46a:	d87b      	bhi.n	800b564 <HAL_TIM_ConfigClockSource+0x168>
 800b46c:	2b60      	cmp	r3, #96	; 0x60
 800b46e:	d050      	beq.n	800b512 <HAL_TIM_ConfigClockSource+0x116>
 800b470:	2b60      	cmp	r3, #96	; 0x60
 800b472:	d877      	bhi.n	800b564 <HAL_TIM_ConfigClockSource+0x168>
 800b474:	2b50      	cmp	r3, #80	; 0x50
 800b476:	d03c      	beq.n	800b4f2 <HAL_TIM_ConfigClockSource+0xf6>
 800b478:	2b50      	cmp	r3, #80	; 0x50
 800b47a:	d873      	bhi.n	800b564 <HAL_TIM_ConfigClockSource+0x168>
 800b47c:	2b40      	cmp	r3, #64	; 0x40
 800b47e:	d058      	beq.n	800b532 <HAL_TIM_ConfigClockSource+0x136>
 800b480:	2b40      	cmp	r3, #64	; 0x40
 800b482:	d86f      	bhi.n	800b564 <HAL_TIM_ConfigClockSource+0x168>
 800b484:	2b30      	cmp	r3, #48	; 0x30
 800b486:	d064      	beq.n	800b552 <HAL_TIM_ConfigClockSource+0x156>
 800b488:	2b30      	cmp	r3, #48	; 0x30
 800b48a:	d86b      	bhi.n	800b564 <HAL_TIM_ConfigClockSource+0x168>
 800b48c:	2b20      	cmp	r3, #32
 800b48e:	d060      	beq.n	800b552 <HAL_TIM_ConfigClockSource+0x156>
 800b490:	2b20      	cmp	r3, #32
 800b492:	d867      	bhi.n	800b564 <HAL_TIM_ConfigClockSource+0x168>
 800b494:	2b00      	cmp	r3, #0
 800b496:	d05c      	beq.n	800b552 <HAL_TIM_ConfigClockSource+0x156>
 800b498:	2b10      	cmp	r3, #16
 800b49a:	d05a      	beq.n	800b552 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b49c:	e062      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6818      	ldr	r0, [r3, #0]
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	6899      	ldr	r1, [r3, #8]
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	685a      	ldr	r2, [r3, #4]
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	f000 f9ac 	bl	800b80a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	609a      	str	r2, [r3, #8]
      break;
 800b4ca:	e04e      	b.n	800b56a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6818      	ldr	r0, [r3, #0]
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	6899      	ldr	r1, [r3, #8]
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	685a      	ldr	r2, [r3, #4]
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	f000 f995 	bl	800b80a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	689a      	ldr	r2, [r3, #8]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4ee:	609a      	str	r2, [r3, #8]
      break;
 800b4f0:	e03b      	b.n	800b56a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6818      	ldr	r0, [r3, #0]
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	6859      	ldr	r1, [r3, #4]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	461a      	mov	r2, r3
 800b500:	f000 f90c 	bl	800b71c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2150      	movs	r1, #80	; 0x50
 800b50a:	4618      	mov	r0, r3
 800b50c:	f000 f963 	bl	800b7d6 <TIM_ITRx_SetConfig>
      break;
 800b510:	e02b      	b.n	800b56a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6818      	ldr	r0, [r3, #0]
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	6859      	ldr	r1, [r3, #4]
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	461a      	mov	r2, r3
 800b520:	f000 f92a 	bl	800b778 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2160      	movs	r1, #96	; 0x60
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 f953 	bl	800b7d6 <TIM_ITRx_SetConfig>
      break;
 800b530:	e01b      	b.n	800b56a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6818      	ldr	r0, [r3, #0]
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	6859      	ldr	r1, [r3, #4]
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	461a      	mov	r2, r3
 800b540:	f000 f8ec 	bl	800b71c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2140      	movs	r1, #64	; 0x40
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 f943 	bl	800b7d6 <TIM_ITRx_SetConfig>
      break;
 800b550:	e00b      	b.n	800b56a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4619      	mov	r1, r3
 800b55c:	4610      	mov	r0, r2
 800b55e:	f000 f93a 	bl	800b7d6 <TIM_ITRx_SetConfig>
        break;
 800b562:	e002      	b.n	800b56a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b564:	bf00      	nop
 800b566:	e000      	b.n	800b56a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b568:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2201      	movs	r2, #1
 800b56e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b58c:	bf00      	nop
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	bc80      	pop	{r7}
 800b594:	4770      	bx	lr

0800b596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b596:	b480      	push	{r7}
 800b598:	b083      	sub	sp, #12
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b59e:	bf00      	nop
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bc80      	pop	{r7}
 800b5a6:	4770      	bx	lr

0800b5a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bc80      	pop	{r7}
 800b5b8:	4770      	bx	lr

0800b5ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b083      	sub	sp, #12
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5c2:	bf00      	nop
 800b5c4:	370c      	adds	r7, #12
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bc80      	pop	{r7}
 800b5ca:	4770      	bx	lr

0800b5cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bc80      	pop	{r7}
 800b5dc:	4770      	bx	lr
	...

0800b5e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a3f      	ldr	r2, [pc, #252]	; (800b6f0 <TIM_Base_SetConfig+0x110>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d013      	beq.n	800b620 <TIM_Base_SetConfig+0x40>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a3e      	ldr	r2, [pc, #248]	; (800b6f4 <TIM_Base_SetConfig+0x114>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d00f      	beq.n	800b620 <TIM_Base_SetConfig+0x40>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b606:	d00b      	beq.n	800b620 <TIM_Base_SetConfig+0x40>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a3b      	ldr	r2, [pc, #236]	; (800b6f8 <TIM_Base_SetConfig+0x118>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d007      	beq.n	800b620 <TIM_Base_SetConfig+0x40>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a3a      	ldr	r2, [pc, #232]	; (800b6fc <TIM_Base_SetConfig+0x11c>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d003      	beq.n	800b620 <TIM_Base_SetConfig+0x40>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a39      	ldr	r2, [pc, #228]	; (800b700 <TIM_Base_SetConfig+0x120>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d108      	bne.n	800b632 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	4313      	orrs	r3, r2
 800b630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a2e      	ldr	r2, [pc, #184]	; (800b6f0 <TIM_Base_SetConfig+0x110>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d02b      	beq.n	800b692 <TIM_Base_SetConfig+0xb2>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a2d      	ldr	r2, [pc, #180]	; (800b6f4 <TIM_Base_SetConfig+0x114>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d027      	beq.n	800b692 <TIM_Base_SetConfig+0xb2>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b648:	d023      	beq.n	800b692 <TIM_Base_SetConfig+0xb2>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a2a      	ldr	r2, [pc, #168]	; (800b6f8 <TIM_Base_SetConfig+0x118>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d01f      	beq.n	800b692 <TIM_Base_SetConfig+0xb2>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a29      	ldr	r2, [pc, #164]	; (800b6fc <TIM_Base_SetConfig+0x11c>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d01b      	beq.n	800b692 <TIM_Base_SetConfig+0xb2>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a28      	ldr	r2, [pc, #160]	; (800b700 <TIM_Base_SetConfig+0x120>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d017      	beq.n	800b692 <TIM_Base_SetConfig+0xb2>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a27      	ldr	r2, [pc, #156]	; (800b704 <TIM_Base_SetConfig+0x124>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d013      	beq.n	800b692 <TIM_Base_SetConfig+0xb2>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a26      	ldr	r2, [pc, #152]	; (800b708 <TIM_Base_SetConfig+0x128>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d00f      	beq.n	800b692 <TIM_Base_SetConfig+0xb2>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a25      	ldr	r2, [pc, #148]	; (800b70c <TIM_Base_SetConfig+0x12c>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d00b      	beq.n	800b692 <TIM_Base_SetConfig+0xb2>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4a24      	ldr	r2, [pc, #144]	; (800b710 <TIM_Base_SetConfig+0x130>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d007      	beq.n	800b692 <TIM_Base_SetConfig+0xb2>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4a23      	ldr	r2, [pc, #140]	; (800b714 <TIM_Base_SetConfig+0x134>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d003      	beq.n	800b692 <TIM_Base_SetConfig+0xb2>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a22      	ldr	r2, [pc, #136]	; (800b718 <TIM_Base_SetConfig+0x138>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d108      	bne.n	800b6a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	695b      	ldr	r3, [r3, #20]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	689a      	ldr	r2, [r3, #8]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a09      	ldr	r2, [pc, #36]	; (800b6f0 <TIM_Base_SetConfig+0x110>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d003      	beq.n	800b6d8 <TIM_Base_SetConfig+0xf8>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a08      	ldr	r2, [pc, #32]	; (800b6f4 <TIM_Base_SetConfig+0x114>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d103      	bne.n	800b6e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	691a      	ldr	r2, [r3, #16]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	615a      	str	r2, [r3, #20]
}
 800b6e6:	bf00      	nop
 800b6e8:	3714      	adds	r7, #20
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bc80      	pop	{r7}
 800b6ee:	4770      	bx	lr
 800b6f0:	40012c00 	.word	0x40012c00
 800b6f4:	40013400 	.word	0x40013400
 800b6f8:	40000400 	.word	0x40000400
 800b6fc:	40000800 	.word	0x40000800
 800b700:	40000c00 	.word	0x40000c00
 800b704:	40014c00 	.word	0x40014c00
 800b708:	40015000 	.word	0x40015000
 800b70c:	40015400 	.word	0x40015400
 800b710:	40001800 	.word	0x40001800
 800b714:	40001c00 	.word	0x40001c00
 800b718:	40002000 	.word	0x40002000

0800b71c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b087      	sub	sp, #28
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6a1b      	ldr	r3, [r3, #32]
 800b72c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	f023 0201 	bic.w	r2, r3, #1
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	011b      	lsls	r3, r3, #4
 800b74c:	693a      	ldr	r2, [r7, #16]
 800b74e:	4313      	orrs	r3, r2
 800b750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	f023 030a 	bic.w	r3, r3, #10
 800b758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b75a:	697a      	ldr	r2, [r7, #20]
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	4313      	orrs	r3, r2
 800b760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	693a      	ldr	r2, [r7, #16]
 800b766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	621a      	str	r2, [r3, #32]
}
 800b76e:	bf00      	nop
 800b770:	371c      	adds	r7, #28
 800b772:	46bd      	mov	sp, r7
 800b774:	bc80      	pop	{r7}
 800b776:	4770      	bx	lr

0800b778 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b778:	b480      	push	{r7}
 800b77a:	b087      	sub	sp, #28
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6a1b      	ldr	r3, [r3, #32]
 800b788:	f023 0210 	bic.w	r2, r3, #16
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	699b      	ldr	r3, [r3, #24]
 800b794:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	031b      	lsls	r3, r3, #12
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b7b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	011b      	lsls	r3, r3, #4
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	697a      	ldr	r2, [r7, #20]
 800b7c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	693a      	ldr	r2, [r7, #16]
 800b7ca:	621a      	str	r2, [r3, #32]
}
 800b7cc:	bf00      	nop
 800b7ce:	371c      	adds	r7, #28
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bc80      	pop	{r7}
 800b7d4:	4770      	bx	lr

0800b7d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b085      	sub	sp, #20
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	f043 0307 	orr.w	r3, r3, #7
 800b7f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	609a      	str	r2, [r3, #8]
}
 800b800:	bf00      	nop
 800b802:	3714      	adds	r7, #20
 800b804:	46bd      	mov	sp, r7
 800b806:	bc80      	pop	{r7}
 800b808:	4770      	bx	lr

0800b80a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b087      	sub	sp, #28
 800b80e:	af00      	add	r7, sp, #0
 800b810:	60f8      	str	r0, [r7, #12]
 800b812:	60b9      	str	r1, [r7, #8]
 800b814:	607a      	str	r2, [r7, #4]
 800b816:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b824:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	021a      	lsls	r2, r3, #8
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	431a      	orrs	r2, r3
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	4313      	orrs	r3, r2
 800b832:	697a      	ldr	r2, [r7, #20]
 800b834:	4313      	orrs	r3, r2
 800b836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	609a      	str	r2, [r3, #8]
}
 800b83e:	bf00      	nop
 800b840:	371c      	adds	r7, #28
 800b842:	46bd      	mov	sp, r7
 800b844:	bc80      	pop	{r7}
 800b846:	4770      	bx	lr

0800b848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d101      	bne.n	800b860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b85c:	2302      	movs	r3, #2
 800b85e:	e05a      	b.n	800b916 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2202      	movs	r2, #2
 800b86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	4313      	orrs	r3, r2
 800b890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a20      	ldr	r2, [pc, #128]	; (800b920 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d022      	beq.n	800b8ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a1e      	ldr	r2, [pc, #120]	; (800b924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d01d      	beq.n	800b8ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8b6:	d018      	beq.n	800b8ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a1a      	ldr	r2, [pc, #104]	; (800b928 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d013      	beq.n	800b8ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a19      	ldr	r2, [pc, #100]	; (800b92c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d00e      	beq.n	800b8ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a17      	ldr	r2, [pc, #92]	; (800b930 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d009      	beq.n	800b8ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a16      	ldr	r2, [pc, #88]	; (800b934 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d004      	beq.n	800b8ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a14      	ldr	r2, [pc, #80]	; (800b938 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d10c      	bne.n	800b904 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2201      	movs	r2, #1
 800b908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bc80      	pop	{r7}
 800b91e:	4770      	bx	lr
 800b920:	40012c00 	.word	0x40012c00
 800b924:	40013400 	.word	0x40013400
 800b928:	40000400 	.word	0x40000400
 800b92c:	40000800 	.word	0x40000800
 800b930:	40000c00 	.word	0x40000c00
 800b934:	40014c00 	.word	0x40014c00
 800b938:	40001800 	.word	0x40001800

0800b93c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b944:	bf00      	nop
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	bc80      	pop	{r7}
 800b94c:	4770      	bx	lr

0800b94e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b94e:	b480      	push	{r7}
 800b950:	b083      	sub	sp, #12
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b956:	bf00      	nop
 800b958:	370c      	adds	r7, #12
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bc80      	pop	{r7}
 800b95e:	4770      	bx	lr

0800b960 <__errno>:
 800b960:	4b01      	ldr	r3, [pc, #4]	; (800b968 <__errno+0x8>)
 800b962:	6818      	ldr	r0, [r3, #0]
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	20000040 	.word	0x20000040

0800b96c <__libc_init_array>:
 800b96c:	b570      	push	{r4, r5, r6, lr}
 800b96e:	2600      	movs	r6, #0
 800b970:	4d0c      	ldr	r5, [pc, #48]	; (800b9a4 <__libc_init_array+0x38>)
 800b972:	4c0d      	ldr	r4, [pc, #52]	; (800b9a8 <__libc_init_array+0x3c>)
 800b974:	1b64      	subs	r4, r4, r5
 800b976:	10a4      	asrs	r4, r4, #2
 800b978:	42a6      	cmp	r6, r4
 800b97a:	d109      	bne.n	800b990 <__libc_init_array+0x24>
 800b97c:	f004 fe7e 	bl	801067c <_init>
 800b980:	2600      	movs	r6, #0
 800b982:	4d0a      	ldr	r5, [pc, #40]	; (800b9ac <__libc_init_array+0x40>)
 800b984:	4c0a      	ldr	r4, [pc, #40]	; (800b9b0 <__libc_init_array+0x44>)
 800b986:	1b64      	subs	r4, r4, r5
 800b988:	10a4      	asrs	r4, r4, #2
 800b98a:	42a6      	cmp	r6, r4
 800b98c:	d105      	bne.n	800b99a <__libc_init_array+0x2e>
 800b98e:	bd70      	pop	{r4, r5, r6, pc}
 800b990:	f855 3b04 	ldr.w	r3, [r5], #4
 800b994:	4798      	blx	r3
 800b996:	3601      	adds	r6, #1
 800b998:	e7ee      	b.n	800b978 <__libc_init_array+0xc>
 800b99a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b99e:	4798      	blx	r3
 800b9a0:	3601      	adds	r6, #1
 800b9a2:	e7f2      	b.n	800b98a <__libc_init_array+0x1e>
 800b9a4:	08010f9c 	.word	0x08010f9c
 800b9a8:	08010f9c 	.word	0x08010f9c
 800b9ac:	08010f9c 	.word	0x08010f9c
 800b9b0:	08010fa0 	.word	0x08010fa0

0800b9b4 <__itoa>:
 800b9b4:	1e93      	subs	r3, r2, #2
 800b9b6:	2b22      	cmp	r3, #34	; 0x22
 800b9b8:	b510      	push	{r4, lr}
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	d904      	bls.n	800b9c8 <__itoa+0x14>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	461c      	mov	r4, r3
 800b9c2:	700b      	strb	r3, [r1, #0]
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	bd10      	pop	{r4, pc}
 800b9c8:	2a0a      	cmp	r2, #10
 800b9ca:	d109      	bne.n	800b9e0 <__itoa+0x2c>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	da07      	bge.n	800b9e0 <__itoa+0x2c>
 800b9d0:	232d      	movs	r3, #45	; 0x2d
 800b9d2:	700b      	strb	r3, [r1, #0]
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	4240      	negs	r0, r0
 800b9d8:	4421      	add	r1, r4
 800b9da:	f001 fe0f 	bl	800d5fc <__utoa>
 800b9de:	e7f1      	b.n	800b9c4 <__itoa+0x10>
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	e7f9      	b.n	800b9d8 <__itoa+0x24>

0800b9e4 <itoa>:
 800b9e4:	f7ff bfe6 	b.w	800b9b4 <__itoa>

0800b9e8 <malloc>:
 800b9e8:	4b02      	ldr	r3, [pc, #8]	; (800b9f4 <malloc+0xc>)
 800b9ea:	4601      	mov	r1, r0
 800b9ec:	6818      	ldr	r0, [r3, #0]
 800b9ee:	f000 b85f 	b.w	800bab0 <_malloc_r>
 800b9f2:	bf00      	nop
 800b9f4:	20000040 	.word	0x20000040

0800b9f8 <free>:
 800b9f8:	4b02      	ldr	r3, [pc, #8]	; (800ba04 <free+0xc>)
 800b9fa:	4601      	mov	r1, r0
 800b9fc:	6818      	ldr	r0, [r3, #0]
 800b9fe:	f000 b80b 	b.w	800ba18 <_free_r>
 800ba02:	bf00      	nop
 800ba04:	20000040 	.word	0x20000040

0800ba08 <memset>:
 800ba08:	4603      	mov	r3, r0
 800ba0a:	4402      	add	r2, r0
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d100      	bne.n	800ba12 <memset+0xa>
 800ba10:	4770      	bx	lr
 800ba12:	f803 1b01 	strb.w	r1, [r3], #1
 800ba16:	e7f9      	b.n	800ba0c <memset+0x4>

0800ba18 <_free_r>:
 800ba18:	b538      	push	{r3, r4, r5, lr}
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	2900      	cmp	r1, #0
 800ba1e:	d043      	beq.n	800baa8 <_free_r+0x90>
 800ba20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba24:	1f0c      	subs	r4, r1, #4
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	bfb8      	it	lt
 800ba2a:	18e4      	addlt	r4, r4, r3
 800ba2c:	f003 f83e 	bl	800eaac <__malloc_lock>
 800ba30:	4a1e      	ldr	r2, [pc, #120]	; (800baac <_free_r+0x94>)
 800ba32:	6813      	ldr	r3, [r2, #0]
 800ba34:	4610      	mov	r0, r2
 800ba36:	b933      	cbnz	r3, 800ba46 <_free_r+0x2e>
 800ba38:	6063      	str	r3, [r4, #4]
 800ba3a:	6014      	str	r4, [r2, #0]
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba42:	f003 b839 	b.w	800eab8 <__malloc_unlock>
 800ba46:	42a3      	cmp	r3, r4
 800ba48:	d90a      	bls.n	800ba60 <_free_r+0x48>
 800ba4a:	6821      	ldr	r1, [r4, #0]
 800ba4c:	1862      	adds	r2, r4, r1
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	bf01      	itttt	eq
 800ba52:	681a      	ldreq	r2, [r3, #0]
 800ba54:	685b      	ldreq	r3, [r3, #4]
 800ba56:	1852      	addeq	r2, r2, r1
 800ba58:	6022      	streq	r2, [r4, #0]
 800ba5a:	6063      	str	r3, [r4, #4]
 800ba5c:	6004      	str	r4, [r0, #0]
 800ba5e:	e7ed      	b.n	800ba3c <_free_r+0x24>
 800ba60:	461a      	mov	r2, r3
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	b10b      	cbz	r3, 800ba6a <_free_r+0x52>
 800ba66:	42a3      	cmp	r3, r4
 800ba68:	d9fa      	bls.n	800ba60 <_free_r+0x48>
 800ba6a:	6811      	ldr	r1, [r2, #0]
 800ba6c:	1850      	adds	r0, r2, r1
 800ba6e:	42a0      	cmp	r0, r4
 800ba70:	d10b      	bne.n	800ba8a <_free_r+0x72>
 800ba72:	6820      	ldr	r0, [r4, #0]
 800ba74:	4401      	add	r1, r0
 800ba76:	1850      	adds	r0, r2, r1
 800ba78:	4283      	cmp	r3, r0
 800ba7a:	6011      	str	r1, [r2, #0]
 800ba7c:	d1de      	bne.n	800ba3c <_free_r+0x24>
 800ba7e:	6818      	ldr	r0, [r3, #0]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	4401      	add	r1, r0
 800ba84:	6011      	str	r1, [r2, #0]
 800ba86:	6053      	str	r3, [r2, #4]
 800ba88:	e7d8      	b.n	800ba3c <_free_r+0x24>
 800ba8a:	d902      	bls.n	800ba92 <_free_r+0x7a>
 800ba8c:	230c      	movs	r3, #12
 800ba8e:	602b      	str	r3, [r5, #0]
 800ba90:	e7d4      	b.n	800ba3c <_free_r+0x24>
 800ba92:	6820      	ldr	r0, [r4, #0]
 800ba94:	1821      	adds	r1, r4, r0
 800ba96:	428b      	cmp	r3, r1
 800ba98:	bf01      	itttt	eq
 800ba9a:	6819      	ldreq	r1, [r3, #0]
 800ba9c:	685b      	ldreq	r3, [r3, #4]
 800ba9e:	1809      	addeq	r1, r1, r0
 800baa0:	6021      	streq	r1, [r4, #0]
 800baa2:	6063      	str	r3, [r4, #4]
 800baa4:	6054      	str	r4, [r2, #4]
 800baa6:	e7c9      	b.n	800ba3c <_free_r+0x24>
 800baa8:	bd38      	pop	{r3, r4, r5, pc}
 800baaa:	bf00      	nop
 800baac:	20000240 	.word	0x20000240

0800bab0 <_malloc_r>:
 800bab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab2:	1ccd      	adds	r5, r1, #3
 800bab4:	f025 0503 	bic.w	r5, r5, #3
 800bab8:	3508      	adds	r5, #8
 800baba:	2d0c      	cmp	r5, #12
 800babc:	bf38      	it	cc
 800babe:	250c      	movcc	r5, #12
 800bac0:	2d00      	cmp	r5, #0
 800bac2:	4606      	mov	r6, r0
 800bac4:	db01      	blt.n	800baca <_malloc_r+0x1a>
 800bac6:	42a9      	cmp	r1, r5
 800bac8:	d903      	bls.n	800bad2 <_malloc_r+0x22>
 800baca:	230c      	movs	r3, #12
 800bacc:	6033      	str	r3, [r6, #0]
 800bace:	2000      	movs	r0, #0
 800bad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bad2:	f002 ffeb 	bl	800eaac <__malloc_lock>
 800bad6:	4921      	ldr	r1, [pc, #132]	; (800bb5c <_malloc_r+0xac>)
 800bad8:	680a      	ldr	r2, [r1, #0]
 800bada:	4614      	mov	r4, r2
 800badc:	b99c      	cbnz	r4, 800bb06 <_malloc_r+0x56>
 800bade:	4f20      	ldr	r7, [pc, #128]	; (800bb60 <_malloc_r+0xb0>)
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	b923      	cbnz	r3, 800baee <_malloc_r+0x3e>
 800bae4:	4621      	mov	r1, r4
 800bae6:	4630      	mov	r0, r6
 800bae8:	f000 feae 	bl	800c848 <_sbrk_r>
 800baec:	6038      	str	r0, [r7, #0]
 800baee:	4629      	mov	r1, r5
 800baf0:	4630      	mov	r0, r6
 800baf2:	f000 fea9 	bl	800c848 <_sbrk_r>
 800baf6:	1c43      	adds	r3, r0, #1
 800baf8:	d123      	bne.n	800bb42 <_malloc_r+0x92>
 800bafa:	230c      	movs	r3, #12
 800bafc:	4630      	mov	r0, r6
 800bafe:	6033      	str	r3, [r6, #0]
 800bb00:	f002 ffda 	bl	800eab8 <__malloc_unlock>
 800bb04:	e7e3      	b.n	800bace <_malloc_r+0x1e>
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	1b5b      	subs	r3, r3, r5
 800bb0a:	d417      	bmi.n	800bb3c <_malloc_r+0x8c>
 800bb0c:	2b0b      	cmp	r3, #11
 800bb0e:	d903      	bls.n	800bb18 <_malloc_r+0x68>
 800bb10:	6023      	str	r3, [r4, #0]
 800bb12:	441c      	add	r4, r3
 800bb14:	6025      	str	r5, [r4, #0]
 800bb16:	e004      	b.n	800bb22 <_malloc_r+0x72>
 800bb18:	6863      	ldr	r3, [r4, #4]
 800bb1a:	42a2      	cmp	r2, r4
 800bb1c:	bf0c      	ite	eq
 800bb1e:	600b      	streq	r3, [r1, #0]
 800bb20:	6053      	strne	r3, [r2, #4]
 800bb22:	4630      	mov	r0, r6
 800bb24:	f002 ffc8 	bl	800eab8 <__malloc_unlock>
 800bb28:	f104 000b 	add.w	r0, r4, #11
 800bb2c:	1d23      	adds	r3, r4, #4
 800bb2e:	f020 0007 	bic.w	r0, r0, #7
 800bb32:	1ac2      	subs	r2, r0, r3
 800bb34:	d0cc      	beq.n	800bad0 <_malloc_r+0x20>
 800bb36:	1a1b      	subs	r3, r3, r0
 800bb38:	50a3      	str	r3, [r4, r2]
 800bb3a:	e7c9      	b.n	800bad0 <_malloc_r+0x20>
 800bb3c:	4622      	mov	r2, r4
 800bb3e:	6864      	ldr	r4, [r4, #4]
 800bb40:	e7cc      	b.n	800badc <_malloc_r+0x2c>
 800bb42:	1cc4      	adds	r4, r0, #3
 800bb44:	f024 0403 	bic.w	r4, r4, #3
 800bb48:	42a0      	cmp	r0, r4
 800bb4a:	d0e3      	beq.n	800bb14 <_malloc_r+0x64>
 800bb4c:	1a21      	subs	r1, r4, r0
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f000 fe7a 	bl	800c848 <_sbrk_r>
 800bb54:	3001      	adds	r0, #1
 800bb56:	d1dd      	bne.n	800bb14 <_malloc_r+0x64>
 800bb58:	e7cf      	b.n	800bafa <_malloc_r+0x4a>
 800bb5a:	bf00      	nop
 800bb5c:	20000240 	.word	0x20000240
 800bb60:	20000244 	.word	0x20000244

0800bb64 <__cvt>:
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb6a:	461f      	mov	r7, r3
 800bb6c:	bfbb      	ittet	lt
 800bb6e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800bb72:	461f      	movlt	r7, r3
 800bb74:	2300      	movge	r3, #0
 800bb76:	232d      	movlt	r3, #45	; 0x2d
 800bb78:	b088      	sub	sp, #32
 800bb7a:	4614      	mov	r4, r2
 800bb7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bb7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bb80:	7013      	strb	r3, [r2, #0]
 800bb82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb84:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800bb88:	f023 0820 	bic.w	r8, r3, #32
 800bb8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb90:	d005      	beq.n	800bb9e <__cvt+0x3a>
 800bb92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bb96:	d100      	bne.n	800bb9a <__cvt+0x36>
 800bb98:	3501      	adds	r5, #1
 800bb9a:	2302      	movs	r3, #2
 800bb9c:	e000      	b.n	800bba0 <__cvt+0x3c>
 800bb9e:	2303      	movs	r3, #3
 800bba0:	aa07      	add	r2, sp, #28
 800bba2:	9204      	str	r2, [sp, #16]
 800bba4:	aa06      	add	r2, sp, #24
 800bba6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800bbaa:	e9cd 3500 	strd	r3, r5, [sp]
 800bbae:	4622      	mov	r2, r4
 800bbb0:	463b      	mov	r3, r7
 800bbb2:	f001 fdf5 	bl	800d7a0 <_dtoa_r>
 800bbb6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bbba:	4606      	mov	r6, r0
 800bbbc:	d102      	bne.n	800bbc4 <__cvt+0x60>
 800bbbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbc0:	07db      	lsls	r3, r3, #31
 800bbc2:	d522      	bpl.n	800bc0a <__cvt+0xa6>
 800bbc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bbc8:	eb06 0905 	add.w	r9, r6, r5
 800bbcc:	d110      	bne.n	800bbf0 <__cvt+0x8c>
 800bbce:	7833      	ldrb	r3, [r6, #0]
 800bbd0:	2b30      	cmp	r3, #48	; 0x30
 800bbd2:	d10a      	bne.n	800bbea <__cvt+0x86>
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	4620      	mov	r0, r4
 800bbda:	4639      	mov	r1, r7
 800bbdc:	f7f4 ff50 	bl	8000a80 <__aeabi_dcmpeq>
 800bbe0:	b918      	cbnz	r0, 800bbea <__cvt+0x86>
 800bbe2:	f1c5 0501 	rsb	r5, r5, #1
 800bbe6:	f8ca 5000 	str.w	r5, [sl]
 800bbea:	f8da 3000 	ldr.w	r3, [sl]
 800bbee:	4499      	add	r9, r3
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	f7f4 ff42 	bl	8000a80 <__aeabi_dcmpeq>
 800bbfc:	b108      	cbz	r0, 800bc02 <__cvt+0x9e>
 800bbfe:	f8cd 901c 	str.w	r9, [sp, #28]
 800bc02:	2230      	movs	r2, #48	; 0x30
 800bc04:	9b07      	ldr	r3, [sp, #28]
 800bc06:	454b      	cmp	r3, r9
 800bc08:	d307      	bcc.n	800bc1a <__cvt+0xb6>
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	9b07      	ldr	r3, [sp, #28]
 800bc0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bc10:	1b9b      	subs	r3, r3, r6
 800bc12:	6013      	str	r3, [r2, #0]
 800bc14:	b008      	add	sp, #32
 800bc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc1a:	1c59      	adds	r1, r3, #1
 800bc1c:	9107      	str	r1, [sp, #28]
 800bc1e:	701a      	strb	r2, [r3, #0]
 800bc20:	e7f0      	b.n	800bc04 <__cvt+0xa0>

0800bc22 <__exponent>:
 800bc22:	4603      	mov	r3, r0
 800bc24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc26:	2900      	cmp	r1, #0
 800bc28:	f803 2b02 	strb.w	r2, [r3], #2
 800bc2c:	bfb6      	itet	lt
 800bc2e:	222d      	movlt	r2, #45	; 0x2d
 800bc30:	222b      	movge	r2, #43	; 0x2b
 800bc32:	4249      	neglt	r1, r1
 800bc34:	2909      	cmp	r1, #9
 800bc36:	7042      	strb	r2, [r0, #1]
 800bc38:	dd2b      	ble.n	800bc92 <__exponent+0x70>
 800bc3a:	f10d 0407 	add.w	r4, sp, #7
 800bc3e:	46a4      	mov	ip, r4
 800bc40:	270a      	movs	r7, #10
 800bc42:	fb91 f6f7 	sdiv	r6, r1, r7
 800bc46:	460a      	mov	r2, r1
 800bc48:	46a6      	mov	lr, r4
 800bc4a:	fb07 1516 	mls	r5, r7, r6, r1
 800bc4e:	2a63      	cmp	r2, #99	; 0x63
 800bc50:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800bc54:	4631      	mov	r1, r6
 800bc56:	f104 34ff 	add.w	r4, r4, #4294967295
 800bc5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bc5e:	dcf0      	bgt.n	800bc42 <__exponent+0x20>
 800bc60:	3130      	adds	r1, #48	; 0x30
 800bc62:	f1ae 0502 	sub.w	r5, lr, #2
 800bc66:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	1c44      	adds	r4, r0, #1
 800bc6e:	4561      	cmp	r1, ip
 800bc70:	d30a      	bcc.n	800bc88 <__exponent+0x66>
 800bc72:	f10d 0209 	add.w	r2, sp, #9
 800bc76:	eba2 020e 	sub.w	r2, r2, lr
 800bc7a:	4565      	cmp	r5, ip
 800bc7c:	bf88      	it	hi
 800bc7e:	2200      	movhi	r2, #0
 800bc80:	4413      	add	r3, r2
 800bc82:	1a18      	subs	r0, r3, r0
 800bc84:	b003      	add	sp, #12
 800bc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc88:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc8c:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bc90:	e7ed      	b.n	800bc6e <__exponent+0x4c>
 800bc92:	2330      	movs	r3, #48	; 0x30
 800bc94:	3130      	adds	r1, #48	; 0x30
 800bc96:	7083      	strb	r3, [r0, #2]
 800bc98:	70c1      	strb	r1, [r0, #3]
 800bc9a:	1d03      	adds	r3, r0, #4
 800bc9c:	e7f1      	b.n	800bc82 <__exponent+0x60>
	...

0800bca0 <_printf_float>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	b091      	sub	sp, #68	; 0x44
 800bca6:	460c      	mov	r4, r1
 800bca8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800bcac:	4616      	mov	r6, r2
 800bcae:	461f      	mov	r7, r3
 800bcb0:	4605      	mov	r5, r0
 800bcb2:	f002 fec9 	bl	800ea48 <_localeconv_r>
 800bcb6:	6803      	ldr	r3, [r0, #0]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	9309      	str	r3, [sp, #36]	; 0x24
 800bcbc:	f7f4 fab4 	bl	8000228 <strlen>
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	930e      	str	r3, [sp, #56]	; 0x38
 800bcc4:	f8d8 3000 	ldr.w	r3, [r8]
 800bcc8:	900a      	str	r0, [sp, #40]	; 0x28
 800bcca:	3307      	adds	r3, #7
 800bccc:	f023 0307 	bic.w	r3, r3, #7
 800bcd0:	f103 0208 	add.w	r2, r3, #8
 800bcd4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bcd8:	f8d4 b000 	ldr.w	fp, [r4]
 800bcdc:	f8c8 2000 	str.w	r2, [r8]
 800bce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bce8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800bcec:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800bcf0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcf2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf6:	4640      	mov	r0, r8
 800bcf8:	4b9c      	ldr	r3, [pc, #624]	; (800bf6c <_printf_float+0x2cc>)
 800bcfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bcfc:	f7f4 fef2 	bl	8000ae4 <__aeabi_dcmpun>
 800bd00:	bb70      	cbnz	r0, 800bd60 <_printf_float+0xc0>
 800bd02:	f04f 32ff 	mov.w	r2, #4294967295
 800bd06:	4640      	mov	r0, r8
 800bd08:	4b98      	ldr	r3, [pc, #608]	; (800bf6c <_printf_float+0x2cc>)
 800bd0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd0c:	f7f4 fecc 	bl	8000aa8 <__aeabi_dcmple>
 800bd10:	bb30      	cbnz	r0, 800bd60 <_printf_float+0xc0>
 800bd12:	2200      	movs	r2, #0
 800bd14:	2300      	movs	r3, #0
 800bd16:	4640      	mov	r0, r8
 800bd18:	4651      	mov	r1, sl
 800bd1a:	f7f4 febb 	bl	8000a94 <__aeabi_dcmplt>
 800bd1e:	b110      	cbz	r0, 800bd26 <_printf_float+0x86>
 800bd20:	232d      	movs	r3, #45	; 0x2d
 800bd22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd26:	4b92      	ldr	r3, [pc, #584]	; (800bf70 <_printf_float+0x2d0>)
 800bd28:	4892      	ldr	r0, [pc, #584]	; (800bf74 <_printf_float+0x2d4>)
 800bd2a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bd2e:	bf94      	ite	ls
 800bd30:	4698      	movls	r8, r3
 800bd32:	4680      	movhi	r8, r0
 800bd34:	2303      	movs	r3, #3
 800bd36:	f04f 0a00 	mov.w	sl, #0
 800bd3a:	6123      	str	r3, [r4, #16]
 800bd3c:	f02b 0304 	bic.w	r3, fp, #4
 800bd40:	6023      	str	r3, [r4, #0]
 800bd42:	4633      	mov	r3, r6
 800bd44:	4621      	mov	r1, r4
 800bd46:	4628      	mov	r0, r5
 800bd48:	9700      	str	r7, [sp, #0]
 800bd4a:	aa0f      	add	r2, sp, #60	; 0x3c
 800bd4c:	f000 f9d4 	bl	800c0f8 <_printf_common>
 800bd50:	3001      	adds	r0, #1
 800bd52:	f040 8090 	bne.w	800be76 <_printf_float+0x1d6>
 800bd56:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5a:	b011      	add	sp, #68	; 0x44
 800bd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd60:	4642      	mov	r2, r8
 800bd62:	4653      	mov	r3, sl
 800bd64:	4640      	mov	r0, r8
 800bd66:	4651      	mov	r1, sl
 800bd68:	f7f4 febc 	bl	8000ae4 <__aeabi_dcmpun>
 800bd6c:	b148      	cbz	r0, 800bd82 <_printf_float+0xe2>
 800bd6e:	f1ba 0f00 	cmp.w	sl, #0
 800bd72:	bfb8      	it	lt
 800bd74:	232d      	movlt	r3, #45	; 0x2d
 800bd76:	4880      	ldr	r0, [pc, #512]	; (800bf78 <_printf_float+0x2d8>)
 800bd78:	bfb8      	it	lt
 800bd7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bd7e:	4b7f      	ldr	r3, [pc, #508]	; (800bf7c <_printf_float+0x2dc>)
 800bd80:	e7d3      	b.n	800bd2a <_printf_float+0x8a>
 800bd82:	6863      	ldr	r3, [r4, #4]
 800bd84:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bd88:	1c5a      	adds	r2, r3, #1
 800bd8a:	d142      	bne.n	800be12 <_printf_float+0x172>
 800bd8c:	2306      	movs	r3, #6
 800bd8e:	6063      	str	r3, [r4, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	9206      	str	r2, [sp, #24]
 800bd94:	aa0e      	add	r2, sp, #56	; 0x38
 800bd96:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800bd9a:	aa0d      	add	r2, sp, #52	; 0x34
 800bd9c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800bda0:	9203      	str	r2, [sp, #12]
 800bda2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800bda6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bdaa:	6023      	str	r3, [r4, #0]
 800bdac:	6863      	ldr	r3, [r4, #4]
 800bdae:	4642      	mov	r2, r8
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	4653      	mov	r3, sl
 800bdb6:	910b      	str	r1, [sp, #44]	; 0x2c
 800bdb8:	f7ff fed4 	bl	800bb64 <__cvt>
 800bdbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdbe:	4680      	mov	r8, r0
 800bdc0:	2947      	cmp	r1, #71	; 0x47
 800bdc2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bdc4:	d108      	bne.n	800bdd8 <_printf_float+0x138>
 800bdc6:	1cc8      	adds	r0, r1, #3
 800bdc8:	db02      	blt.n	800bdd0 <_printf_float+0x130>
 800bdca:	6863      	ldr	r3, [r4, #4]
 800bdcc:	4299      	cmp	r1, r3
 800bdce:	dd40      	ble.n	800be52 <_printf_float+0x1b2>
 800bdd0:	f1a9 0902 	sub.w	r9, r9, #2
 800bdd4:	fa5f f989 	uxtb.w	r9, r9
 800bdd8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bddc:	d81f      	bhi.n	800be1e <_printf_float+0x17e>
 800bdde:	464a      	mov	r2, r9
 800bde0:	3901      	subs	r1, #1
 800bde2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bde6:	910d      	str	r1, [sp, #52]	; 0x34
 800bde8:	f7ff ff1b 	bl	800bc22 <__exponent>
 800bdec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdee:	4682      	mov	sl, r0
 800bdf0:	1813      	adds	r3, r2, r0
 800bdf2:	2a01      	cmp	r2, #1
 800bdf4:	6123      	str	r3, [r4, #16]
 800bdf6:	dc02      	bgt.n	800bdfe <_printf_float+0x15e>
 800bdf8:	6822      	ldr	r2, [r4, #0]
 800bdfa:	07d2      	lsls	r2, r2, #31
 800bdfc:	d501      	bpl.n	800be02 <_printf_float+0x162>
 800bdfe:	3301      	adds	r3, #1
 800be00:	6123      	str	r3, [r4, #16]
 800be02:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800be06:	2b00      	cmp	r3, #0
 800be08:	d09b      	beq.n	800bd42 <_printf_float+0xa2>
 800be0a:	232d      	movs	r3, #45	; 0x2d
 800be0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be10:	e797      	b.n	800bd42 <_printf_float+0xa2>
 800be12:	2947      	cmp	r1, #71	; 0x47
 800be14:	d1bc      	bne.n	800bd90 <_printf_float+0xf0>
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1ba      	bne.n	800bd90 <_printf_float+0xf0>
 800be1a:	2301      	movs	r3, #1
 800be1c:	e7b7      	b.n	800bd8e <_printf_float+0xee>
 800be1e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800be22:	d118      	bne.n	800be56 <_printf_float+0x1b6>
 800be24:	2900      	cmp	r1, #0
 800be26:	6863      	ldr	r3, [r4, #4]
 800be28:	dd0b      	ble.n	800be42 <_printf_float+0x1a2>
 800be2a:	6121      	str	r1, [r4, #16]
 800be2c:	b913      	cbnz	r3, 800be34 <_printf_float+0x194>
 800be2e:	6822      	ldr	r2, [r4, #0]
 800be30:	07d0      	lsls	r0, r2, #31
 800be32:	d502      	bpl.n	800be3a <_printf_float+0x19a>
 800be34:	3301      	adds	r3, #1
 800be36:	440b      	add	r3, r1
 800be38:	6123      	str	r3, [r4, #16]
 800be3a:	f04f 0a00 	mov.w	sl, #0
 800be3e:	65a1      	str	r1, [r4, #88]	; 0x58
 800be40:	e7df      	b.n	800be02 <_printf_float+0x162>
 800be42:	b913      	cbnz	r3, 800be4a <_printf_float+0x1aa>
 800be44:	6822      	ldr	r2, [r4, #0]
 800be46:	07d2      	lsls	r2, r2, #31
 800be48:	d501      	bpl.n	800be4e <_printf_float+0x1ae>
 800be4a:	3302      	adds	r3, #2
 800be4c:	e7f4      	b.n	800be38 <_printf_float+0x198>
 800be4e:	2301      	movs	r3, #1
 800be50:	e7f2      	b.n	800be38 <_printf_float+0x198>
 800be52:	f04f 0967 	mov.w	r9, #103	; 0x67
 800be56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be58:	4299      	cmp	r1, r3
 800be5a:	db05      	blt.n	800be68 <_printf_float+0x1c8>
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	6121      	str	r1, [r4, #16]
 800be60:	07d8      	lsls	r0, r3, #31
 800be62:	d5ea      	bpl.n	800be3a <_printf_float+0x19a>
 800be64:	1c4b      	adds	r3, r1, #1
 800be66:	e7e7      	b.n	800be38 <_printf_float+0x198>
 800be68:	2900      	cmp	r1, #0
 800be6a:	bfcc      	ite	gt
 800be6c:	2201      	movgt	r2, #1
 800be6e:	f1c1 0202 	rsble	r2, r1, #2
 800be72:	4413      	add	r3, r2
 800be74:	e7e0      	b.n	800be38 <_printf_float+0x198>
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	055a      	lsls	r2, r3, #21
 800be7a:	d407      	bmi.n	800be8c <_printf_float+0x1ec>
 800be7c:	6923      	ldr	r3, [r4, #16]
 800be7e:	4642      	mov	r2, r8
 800be80:	4631      	mov	r1, r6
 800be82:	4628      	mov	r0, r5
 800be84:	47b8      	blx	r7
 800be86:	3001      	adds	r0, #1
 800be88:	d12b      	bne.n	800bee2 <_printf_float+0x242>
 800be8a:	e764      	b.n	800bd56 <_printf_float+0xb6>
 800be8c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800be90:	f240 80dd 	bls.w	800c04e <_printf_float+0x3ae>
 800be94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be98:	2200      	movs	r2, #0
 800be9a:	2300      	movs	r3, #0
 800be9c:	f7f4 fdf0 	bl	8000a80 <__aeabi_dcmpeq>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d033      	beq.n	800bf0c <_printf_float+0x26c>
 800bea4:	2301      	movs	r3, #1
 800bea6:	4631      	mov	r1, r6
 800bea8:	4628      	mov	r0, r5
 800beaa:	4a35      	ldr	r2, [pc, #212]	; (800bf80 <_printf_float+0x2e0>)
 800beac:	47b8      	blx	r7
 800beae:	3001      	adds	r0, #1
 800beb0:	f43f af51 	beq.w	800bd56 <_printf_float+0xb6>
 800beb4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800beb8:	429a      	cmp	r2, r3
 800beba:	db02      	blt.n	800bec2 <_printf_float+0x222>
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	07d8      	lsls	r0, r3, #31
 800bec0:	d50f      	bpl.n	800bee2 <_printf_float+0x242>
 800bec2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bec6:	4631      	mov	r1, r6
 800bec8:	4628      	mov	r0, r5
 800beca:	47b8      	blx	r7
 800becc:	3001      	adds	r0, #1
 800bece:	f43f af42 	beq.w	800bd56 <_printf_float+0xb6>
 800bed2:	f04f 0800 	mov.w	r8, #0
 800bed6:	f104 091a 	add.w	r9, r4, #26
 800beda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bedc:	3b01      	subs	r3, #1
 800bede:	4543      	cmp	r3, r8
 800bee0:	dc09      	bgt.n	800bef6 <_printf_float+0x256>
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	079b      	lsls	r3, r3, #30
 800bee6:	f100 8102 	bmi.w	800c0ee <_printf_float+0x44e>
 800beea:	68e0      	ldr	r0, [r4, #12]
 800beec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800beee:	4298      	cmp	r0, r3
 800bef0:	bfb8      	it	lt
 800bef2:	4618      	movlt	r0, r3
 800bef4:	e731      	b.n	800bd5a <_printf_float+0xba>
 800bef6:	2301      	movs	r3, #1
 800bef8:	464a      	mov	r2, r9
 800befa:	4631      	mov	r1, r6
 800befc:	4628      	mov	r0, r5
 800befe:	47b8      	blx	r7
 800bf00:	3001      	adds	r0, #1
 800bf02:	f43f af28 	beq.w	800bd56 <_printf_float+0xb6>
 800bf06:	f108 0801 	add.w	r8, r8, #1
 800bf0a:	e7e6      	b.n	800beda <_printf_float+0x23a>
 800bf0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	dc38      	bgt.n	800bf84 <_printf_float+0x2e4>
 800bf12:	2301      	movs	r3, #1
 800bf14:	4631      	mov	r1, r6
 800bf16:	4628      	mov	r0, r5
 800bf18:	4a19      	ldr	r2, [pc, #100]	; (800bf80 <_printf_float+0x2e0>)
 800bf1a:	47b8      	blx	r7
 800bf1c:	3001      	adds	r0, #1
 800bf1e:	f43f af1a 	beq.w	800bd56 <_printf_float+0xb6>
 800bf22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bf26:	4313      	orrs	r3, r2
 800bf28:	d102      	bne.n	800bf30 <_printf_float+0x290>
 800bf2a:	6823      	ldr	r3, [r4, #0]
 800bf2c:	07d9      	lsls	r1, r3, #31
 800bf2e:	d5d8      	bpl.n	800bee2 <_printf_float+0x242>
 800bf30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf34:	4631      	mov	r1, r6
 800bf36:	4628      	mov	r0, r5
 800bf38:	47b8      	blx	r7
 800bf3a:	3001      	adds	r0, #1
 800bf3c:	f43f af0b 	beq.w	800bd56 <_printf_float+0xb6>
 800bf40:	f04f 0900 	mov.w	r9, #0
 800bf44:	f104 0a1a 	add.w	sl, r4, #26
 800bf48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf4a:	425b      	negs	r3, r3
 800bf4c:	454b      	cmp	r3, r9
 800bf4e:	dc01      	bgt.n	800bf54 <_printf_float+0x2b4>
 800bf50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf52:	e794      	b.n	800be7e <_printf_float+0x1de>
 800bf54:	2301      	movs	r3, #1
 800bf56:	4652      	mov	r2, sl
 800bf58:	4631      	mov	r1, r6
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	47b8      	blx	r7
 800bf5e:	3001      	adds	r0, #1
 800bf60:	f43f aef9 	beq.w	800bd56 <_printf_float+0xb6>
 800bf64:	f109 0901 	add.w	r9, r9, #1
 800bf68:	e7ee      	b.n	800bf48 <_printf_float+0x2a8>
 800bf6a:	bf00      	nop
 800bf6c:	7fefffff 	.word	0x7fefffff
 800bf70:	08010bcc 	.word	0x08010bcc
 800bf74:	08010bd0 	.word	0x08010bd0
 800bf78:	08010bd8 	.word	0x08010bd8
 800bf7c:	08010bd4 	.word	0x08010bd4
 800bf80:	08010bdc 	.word	0x08010bdc
 800bf84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	bfa8      	it	ge
 800bf8c:	461a      	movge	r2, r3
 800bf8e:	2a00      	cmp	r2, #0
 800bf90:	4691      	mov	r9, r2
 800bf92:	dc37      	bgt.n	800c004 <_printf_float+0x364>
 800bf94:	f04f 0b00 	mov.w	fp, #0
 800bf98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf9c:	f104 021a 	add.w	r2, r4, #26
 800bfa0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bfa4:	ebaa 0309 	sub.w	r3, sl, r9
 800bfa8:	455b      	cmp	r3, fp
 800bfaa:	dc33      	bgt.n	800c014 <_printf_float+0x374>
 800bfac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	db3b      	blt.n	800c02c <_printf_float+0x38c>
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	07da      	lsls	r2, r3, #31
 800bfb8:	d438      	bmi.n	800c02c <_printf_float+0x38c>
 800bfba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfbc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bfbe:	eba2 030a 	sub.w	r3, r2, sl
 800bfc2:	eba2 0901 	sub.w	r9, r2, r1
 800bfc6:	4599      	cmp	r9, r3
 800bfc8:	bfa8      	it	ge
 800bfca:	4699      	movge	r9, r3
 800bfcc:	f1b9 0f00 	cmp.w	r9, #0
 800bfd0:	dc34      	bgt.n	800c03c <_printf_float+0x39c>
 800bfd2:	f04f 0800 	mov.w	r8, #0
 800bfd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfda:	f104 0a1a 	add.w	sl, r4, #26
 800bfde:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bfe2:	1a9b      	subs	r3, r3, r2
 800bfe4:	eba3 0309 	sub.w	r3, r3, r9
 800bfe8:	4543      	cmp	r3, r8
 800bfea:	f77f af7a 	ble.w	800bee2 <_printf_float+0x242>
 800bfee:	2301      	movs	r3, #1
 800bff0:	4652      	mov	r2, sl
 800bff2:	4631      	mov	r1, r6
 800bff4:	4628      	mov	r0, r5
 800bff6:	47b8      	blx	r7
 800bff8:	3001      	adds	r0, #1
 800bffa:	f43f aeac 	beq.w	800bd56 <_printf_float+0xb6>
 800bffe:	f108 0801 	add.w	r8, r8, #1
 800c002:	e7ec      	b.n	800bfde <_printf_float+0x33e>
 800c004:	4613      	mov	r3, r2
 800c006:	4631      	mov	r1, r6
 800c008:	4642      	mov	r2, r8
 800c00a:	4628      	mov	r0, r5
 800c00c:	47b8      	blx	r7
 800c00e:	3001      	adds	r0, #1
 800c010:	d1c0      	bne.n	800bf94 <_printf_float+0x2f4>
 800c012:	e6a0      	b.n	800bd56 <_printf_float+0xb6>
 800c014:	2301      	movs	r3, #1
 800c016:	4631      	mov	r1, r6
 800c018:	4628      	mov	r0, r5
 800c01a:	920b      	str	r2, [sp, #44]	; 0x2c
 800c01c:	47b8      	blx	r7
 800c01e:	3001      	adds	r0, #1
 800c020:	f43f ae99 	beq.w	800bd56 <_printf_float+0xb6>
 800c024:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c026:	f10b 0b01 	add.w	fp, fp, #1
 800c02a:	e7b9      	b.n	800bfa0 <_printf_float+0x300>
 800c02c:	4631      	mov	r1, r6
 800c02e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c032:	4628      	mov	r0, r5
 800c034:	47b8      	blx	r7
 800c036:	3001      	adds	r0, #1
 800c038:	d1bf      	bne.n	800bfba <_printf_float+0x31a>
 800c03a:	e68c      	b.n	800bd56 <_printf_float+0xb6>
 800c03c:	464b      	mov	r3, r9
 800c03e:	4631      	mov	r1, r6
 800c040:	4628      	mov	r0, r5
 800c042:	eb08 020a 	add.w	r2, r8, sl
 800c046:	47b8      	blx	r7
 800c048:	3001      	adds	r0, #1
 800c04a:	d1c2      	bne.n	800bfd2 <_printf_float+0x332>
 800c04c:	e683      	b.n	800bd56 <_printf_float+0xb6>
 800c04e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c050:	2a01      	cmp	r2, #1
 800c052:	dc01      	bgt.n	800c058 <_printf_float+0x3b8>
 800c054:	07db      	lsls	r3, r3, #31
 800c056:	d537      	bpl.n	800c0c8 <_printf_float+0x428>
 800c058:	2301      	movs	r3, #1
 800c05a:	4642      	mov	r2, r8
 800c05c:	4631      	mov	r1, r6
 800c05e:	4628      	mov	r0, r5
 800c060:	47b8      	blx	r7
 800c062:	3001      	adds	r0, #1
 800c064:	f43f ae77 	beq.w	800bd56 <_printf_float+0xb6>
 800c068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c06c:	4631      	mov	r1, r6
 800c06e:	4628      	mov	r0, r5
 800c070:	47b8      	blx	r7
 800c072:	3001      	adds	r0, #1
 800c074:	f43f ae6f 	beq.w	800bd56 <_printf_float+0xb6>
 800c078:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c07c:	2200      	movs	r2, #0
 800c07e:	2300      	movs	r3, #0
 800c080:	f7f4 fcfe 	bl	8000a80 <__aeabi_dcmpeq>
 800c084:	b9d8      	cbnz	r0, 800c0be <_printf_float+0x41e>
 800c086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c088:	f108 0201 	add.w	r2, r8, #1
 800c08c:	3b01      	subs	r3, #1
 800c08e:	4631      	mov	r1, r6
 800c090:	4628      	mov	r0, r5
 800c092:	47b8      	blx	r7
 800c094:	3001      	adds	r0, #1
 800c096:	d10e      	bne.n	800c0b6 <_printf_float+0x416>
 800c098:	e65d      	b.n	800bd56 <_printf_float+0xb6>
 800c09a:	2301      	movs	r3, #1
 800c09c:	464a      	mov	r2, r9
 800c09e:	4631      	mov	r1, r6
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	47b8      	blx	r7
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	f43f ae56 	beq.w	800bd56 <_printf_float+0xb6>
 800c0aa:	f108 0801 	add.w	r8, r8, #1
 800c0ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	4543      	cmp	r3, r8
 800c0b4:	dcf1      	bgt.n	800c09a <_printf_float+0x3fa>
 800c0b6:	4653      	mov	r3, sl
 800c0b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c0bc:	e6e0      	b.n	800be80 <_printf_float+0x1e0>
 800c0be:	f04f 0800 	mov.w	r8, #0
 800c0c2:	f104 091a 	add.w	r9, r4, #26
 800c0c6:	e7f2      	b.n	800c0ae <_printf_float+0x40e>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	4642      	mov	r2, r8
 800c0cc:	e7df      	b.n	800c08e <_printf_float+0x3ee>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	464a      	mov	r2, r9
 800c0d2:	4631      	mov	r1, r6
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	47b8      	blx	r7
 800c0d8:	3001      	adds	r0, #1
 800c0da:	f43f ae3c 	beq.w	800bd56 <_printf_float+0xb6>
 800c0de:	f108 0801 	add.w	r8, r8, #1
 800c0e2:	68e3      	ldr	r3, [r4, #12]
 800c0e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c0e6:	1a5b      	subs	r3, r3, r1
 800c0e8:	4543      	cmp	r3, r8
 800c0ea:	dcf0      	bgt.n	800c0ce <_printf_float+0x42e>
 800c0ec:	e6fd      	b.n	800beea <_printf_float+0x24a>
 800c0ee:	f04f 0800 	mov.w	r8, #0
 800c0f2:	f104 0919 	add.w	r9, r4, #25
 800c0f6:	e7f4      	b.n	800c0e2 <_printf_float+0x442>

0800c0f8 <_printf_common>:
 800c0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0fc:	4616      	mov	r6, r2
 800c0fe:	4699      	mov	r9, r3
 800c100:	688a      	ldr	r2, [r1, #8]
 800c102:	690b      	ldr	r3, [r1, #16]
 800c104:	4607      	mov	r7, r0
 800c106:	4293      	cmp	r3, r2
 800c108:	bfb8      	it	lt
 800c10a:	4613      	movlt	r3, r2
 800c10c:	6033      	str	r3, [r6, #0]
 800c10e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c112:	460c      	mov	r4, r1
 800c114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c118:	b10a      	cbz	r2, 800c11e <_printf_common+0x26>
 800c11a:	3301      	adds	r3, #1
 800c11c:	6033      	str	r3, [r6, #0]
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	0699      	lsls	r1, r3, #26
 800c122:	bf42      	ittt	mi
 800c124:	6833      	ldrmi	r3, [r6, #0]
 800c126:	3302      	addmi	r3, #2
 800c128:	6033      	strmi	r3, [r6, #0]
 800c12a:	6825      	ldr	r5, [r4, #0]
 800c12c:	f015 0506 	ands.w	r5, r5, #6
 800c130:	d106      	bne.n	800c140 <_printf_common+0x48>
 800c132:	f104 0a19 	add.w	sl, r4, #25
 800c136:	68e3      	ldr	r3, [r4, #12]
 800c138:	6832      	ldr	r2, [r6, #0]
 800c13a:	1a9b      	subs	r3, r3, r2
 800c13c:	42ab      	cmp	r3, r5
 800c13e:	dc28      	bgt.n	800c192 <_printf_common+0x9a>
 800c140:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c144:	1e13      	subs	r3, r2, #0
 800c146:	6822      	ldr	r2, [r4, #0]
 800c148:	bf18      	it	ne
 800c14a:	2301      	movne	r3, #1
 800c14c:	0692      	lsls	r2, r2, #26
 800c14e:	d42d      	bmi.n	800c1ac <_printf_common+0xb4>
 800c150:	4649      	mov	r1, r9
 800c152:	4638      	mov	r0, r7
 800c154:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c158:	47c0      	blx	r8
 800c15a:	3001      	adds	r0, #1
 800c15c:	d020      	beq.n	800c1a0 <_printf_common+0xa8>
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	68e5      	ldr	r5, [r4, #12]
 800c162:	f003 0306 	and.w	r3, r3, #6
 800c166:	2b04      	cmp	r3, #4
 800c168:	bf18      	it	ne
 800c16a:	2500      	movne	r5, #0
 800c16c:	6832      	ldr	r2, [r6, #0]
 800c16e:	f04f 0600 	mov.w	r6, #0
 800c172:	68a3      	ldr	r3, [r4, #8]
 800c174:	bf08      	it	eq
 800c176:	1aad      	subeq	r5, r5, r2
 800c178:	6922      	ldr	r2, [r4, #16]
 800c17a:	bf08      	it	eq
 800c17c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c180:	4293      	cmp	r3, r2
 800c182:	bfc4      	itt	gt
 800c184:	1a9b      	subgt	r3, r3, r2
 800c186:	18ed      	addgt	r5, r5, r3
 800c188:	341a      	adds	r4, #26
 800c18a:	42b5      	cmp	r5, r6
 800c18c:	d11a      	bne.n	800c1c4 <_printf_common+0xcc>
 800c18e:	2000      	movs	r0, #0
 800c190:	e008      	b.n	800c1a4 <_printf_common+0xac>
 800c192:	2301      	movs	r3, #1
 800c194:	4652      	mov	r2, sl
 800c196:	4649      	mov	r1, r9
 800c198:	4638      	mov	r0, r7
 800c19a:	47c0      	blx	r8
 800c19c:	3001      	adds	r0, #1
 800c19e:	d103      	bne.n	800c1a8 <_printf_common+0xb0>
 800c1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1a8:	3501      	adds	r5, #1
 800c1aa:	e7c4      	b.n	800c136 <_printf_common+0x3e>
 800c1ac:	2030      	movs	r0, #48	; 0x30
 800c1ae:	18e1      	adds	r1, r4, r3
 800c1b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1b4:	1c5a      	adds	r2, r3, #1
 800c1b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1ba:	4422      	add	r2, r4
 800c1bc:	3302      	adds	r3, #2
 800c1be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1c2:	e7c5      	b.n	800c150 <_printf_common+0x58>
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	4622      	mov	r2, r4
 800c1c8:	4649      	mov	r1, r9
 800c1ca:	4638      	mov	r0, r7
 800c1cc:	47c0      	blx	r8
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	d0e6      	beq.n	800c1a0 <_printf_common+0xa8>
 800c1d2:	3601      	adds	r6, #1
 800c1d4:	e7d9      	b.n	800c18a <_printf_common+0x92>
	...

0800c1d8 <_printf_i>:
 800c1d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1dc:	460c      	mov	r4, r1
 800c1de:	7e27      	ldrb	r7, [r4, #24]
 800c1e0:	4691      	mov	r9, r2
 800c1e2:	2f78      	cmp	r7, #120	; 0x78
 800c1e4:	4680      	mov	r8, r0
 800c1e6:	469a      	mov	sl, r3
 800c1e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c1ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1ee:	d807      	bhi.n	800c200 <_printf_i+0x28>
 800c1f0:	2f62      	cmp	r7, #98	; 0x62
 800c1f2:	d80a      	bhi.n	800c20a <_printf_i+0x32>
 800c1f4:	2f00      	cmp	r7, #0
 800c1f6:	f000 80d9 	beq.w	800c3ac <_printf_i+0x1d4>
 800c1fa:	2f58      	cmp	r7, #88	; 0x58
 800c1fc:	f000 80a4 	beq.w	800c348 <_printf_i+0x170>
 800c200:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c208:	e03a      	b.n	800c280 <_printf_i+0xa8>
 800c20a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c20e:	2b15      	cmp	r3, #21
 800c210:	d8f6      	bhi.n	800c200 <_printf_i+0x28>
 800c212:	a001      	add	r0, pc, #4	; (adr r0, 800c218 <_printf_i+0x40>)
 800c214:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c218:	0800c271 	.word	0x0800c271
 800c21c:	0800c285 	.word	0x0800c285
 800c220:	0800c201 	.word	0x0800c201
 800c224:	0800c201 	.word	0x0800c201
 800c228:	0800c201 	.word	0x0800c201
 800c22c:	0800c201 	.word	0x0800c201
 800c230:	0800c285 	.word	0x0800c285
 800c234:	0800c201 	.word	0x0800c201
 800c238:	0800c201 	.word	0x0800c201
 800c23c:	0800c201 	.word	0x0800c201
 800c240:	0800c201 	.word	0x0800c201
 800c244:	0800c393 	.word	0x0800c393
 800c248:	0800c2b5 	.word	0x0800c2b5
 800c24c:	0800c375 	.word	0x0800c375
 800c250:	0800c201 	.word	0x0800c201
 800c254:	0800c201 	.word	0x0800c201
 800c258:	0800c3b5 	.word	0x0800c3b5
 800c25c:	0800c201 	.word	0x0800c201
 800c260:	0800c2b5 	.word	0x0800c2b5
 800c264:	0800c201 	.word	0x0800c201
 800c268:	0800c201 	.word	0x0800c201
 800c26c:	0800c37d 	.word	0x0800c37d
 800c270:	680b      	ldr	r3, [r1, #0]
 800c272:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c276:	1d1a      	adds	r2, r3, #4
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	600a      	str	r2, [r1, #0]
 800c27c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c280:	2301      	movs	r3, #1
 800c282:	e0a4      	b.n	800c3ce <_printf_i+0x1f6>
 800c284:	6825      	ldr	r5, [r4, #0]
 800c286:	6808      	ldr	r0, [r1, #0]
 800c288:	062e      	lsls	r6, r5, #24
 800c28a:	f100 0304 	add.w	r3, r0, #4
 800c28e:	d50a      	bpl.n	800c2a6 <_printf_i+0xce>
 800c290:	6805      	ldr	r5, [r0, #0]
 800c292:	600b      	str	r3, [r1, #0]
 800c294:	2d00      	cmp	r5, #0
 800c296:	da03      	bge.n	800c2a0 <_printf_i+0xc8>
 800c298:	232d      	movs	r3, #45	; 0x2d
 800c29a:	426d      	negs	r5, r5
 800c29c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2a0:	230a      	movs	r3, #10
 800c2a2:	485e      	ldr	r0, [pc, #376]	; (800c41c <_printf_i+0x244>)
 800c2a4:	e019      	b.n	800c2da <_printf_i+0x102>
 800c2a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c2aa:	6805      	ldr	r5, [r0, #0]
 800c2ac:	600b      	str	r3, [r1, #0]
 800c2ae:	bf18      	it	ne
 800c2b0:	b22d      	sxthne	r5, r5
 800c2b2:	e7ef      	b.n	800c294 <_printf_i+0xbc>
 800c2b4:	680b      	ldr	r3, [r1, #0]
 800c2b6:	6825      	ldr	r5, [r4, #0]
 800c2b8:	1d18      	adds	r0, r3, #4
 800c2ba:	6008      	str	r0, [r1, #0]
 800c2bc:	0628      	lsls	r0, r5, #24
 800c2be:	d501      	bpl.n	800c2c4 <_printf_i+0xec>
 800c2c0:	681d      	ldr	r5, [r3, #0]
 800c2c2:	e002      	b.n	800c2ca <_printf_i+0xf2>
 800c2c4:	0669      	lsls	r1, r5, #25
 800c2c6:	d5fb      	bpl.n	800c2c0 <_printf_i+0xe8>
 800c2c8:	881d      	ldrh	r5, [r3, #0]
 800c2ca:	2f6f      	cmp	r7, #111	; 0x6f
 800c2cc:	bf0c      	ite	eq
 800c2ce:	2308      	moveq	r3, #8
 800c2d0:	230a      	movne	r3, #10
 800c2d2:	4852      	ldr	r0, [pc, #328]	; (800c41c <_printf_i+0x244>)
 800c2d4:	2100      	movs	r1, #0
 800c2d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2da:	6866      	ldr	r6, [r4, #4]
 800c2dc:	2e00      	cmp	r6, #0
 800c2de:	bfa8      	it	ge
 800c2e0:	6821      	ldrge	r1, [r4, #0]
 800c2e2:	60a6      	str	r6, [r4, #8]
 800c2e4:	bfa4      	itt	ge
 800c2e6:	f021 0104 	bicge.w	r1, r1, #4
 800c2ea:	6021      	strge	r1, [r4, #0]
 800c2ec:	b90d      	cbnz	r5, 800c2f2 <_printf_i+0x11a>
 800c2ee:	2e00      	cmp	r6, #0
 800c2f0:	d04d      	beq.n	800c38e <_printf_i+0x1b6>
 800c2f2:	4616      	mov	r6, r2
 800c2f4:	fbb5 f1f3 	udiv	r1, r5, r3
 800c2f8:	fb03 5711 	mls	r7, r3, r1, r5
 800c2fc:	5dc7      	ldrb	r7, [r0, r7]
 800c2fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c302:	462f      	mov	r7, r5
 800c304:	42bb      	cmp	r3, r7
 800c306:	460d      	mov	r5, r1
 800c308:	d9f4      	bls.n	800c2f4 <_printf_i+0x11c>
 800c30a:	2b08      	cmp	r3, #8
 800c30c:	d10b      	bne.n	800c326 <_printf_i+0x14e>
 800c30e:	6823      	ldr	r3, [r4, #0]
 800c310:	07df      	lsls	r7, r3, #31
 800c312:	d508      	bpl.n	800c326 <_printf_i+0x14e>
 800c314:	6923      	ldr	r3, [r4, #16]
 800c316:	6861      	ldr	r1, [r4, #4]
 800c318:	4299      	cmp	r1, r3
 800c31a:	bfde      	ittt	le
 800c31c:	2330      	movle	r3, #48	; 0x30
 800c31e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c322:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c326:	1b92      	subs	r2, r2, r6
 800c328:	6122      	str	r2, [r4, #16]
 800c32a:	464b      	mov	r3, r9
 800c32c:	4621      	mov	r1, r4
 800c32e:	4640      	mov	r0, r8
 800c330:	f8cd a000 	str.w	sl, [sp]
 800c334:	aa03      	add	r2, sp, #12
 800c336:	f7ff fedf 	bl	800c0f8 <_printf_common>
 800c33a:	3001      	adds	r0, #1
 800c33c:	d14c      	bne.n	800c3d8 <_printf_i+0x200>
 800c33e:	f04f 30ff 	mov.w	r0, #4294967295
 800c342:	b004      	add	sp, #16
 800c344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c348:	4834      	ldr	r0, [pc, #208]	; (800c41c <_printf_i+0x244>)
 800c34a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c34e:	680e      	ldr	r6, [r1, #0]
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	f856 5b04 	ldr.w	r5, [r6], #4
 800c356:	061f      	lsls	r7, r3, #24
 800c358:	600e      	str	r6, [r1, #0]
 800c35a:	d514      	bpl.n	800c386 <_printf_i+0x1ae>
 800c35c:	07d9      	lsls	r1, r3, #31
 800c35e:	bf44      	itt	mi
 800c360:	f043 0320 	orrmi.w	r3, r3, #32
 800c364:	6023      	strmi	r3, [r4, #0]
 800c366:	b91d      	cbnz	r5, 800c370 <_printf_i+0x198>
 800c368:	6823      	ldr	r3, [r4, #0]
 800c36a:	f023 0320 	bic.w	r3, r3, #32
 800c36e:	6023      	str	r3, [r4, #0]
 800c370:	2310      	movs	r3, #16
 800c372:	e7af      	b.n	800c2d4 <_printf_i+0xfc>
 800c374:	6823      	ldr	r3, [r4, #0]
 800c376:	f043 0320 	orr.w	r3, r3, #32
 800c37a:	6023      	str	r3, [r4, #0]
 800c37c:	2378      	movs	r3, #120	; 0x78
 800c37e:	4828      	ldr	r0, [pc, #160]	; (800c420 <_printf_i+0x248>)
 800c380:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c384:	e7e3      	b.n	800c34e <_printf_i+0x176>
 800c386:	065e      	lsls	r6, r3, #25
 800c388:	bf48      	it	mi
 800c38a:	b2ad      	uxthmi	r5, r5
 800c38c:	e7e6      	b.n	800c35c <_printf_i+0x184>
 800c38e:	4616      	mov	r6, r2
 800c390:	e7bb      	b.n	800c30a <_printf_i+0x132>
 800c392:	680b      	ldr	r3, [r1, #0]
 800c394:	6826      	ldr	r6, [r4, #0]
 800c396:	1d1d      	adds	r5, r3, #4
 800c398:	6960      	ldr	r0, [r4, #20]
 800c39a:	600d      	str	r5, [r1, #0]
 800c39c:	0635      	lsls	r5, r6, #24
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	d501      	bpl.n	800c3a6 <_printf_i+0x1ce>
 800c3a2:	6018      	str	r0, [r3, #0]
 800c3a4:	e002      	b.n	800c3ac <_printf_i+0x1d4>
 800c3a6:	0671      	lsls	r1, r6, #25
 800c3a8:	d5fb      	bpl.n	800c3a2 <_printf_i+0x1ca>
 800c3aa:	8018      	strh	r0, [r3, #0]
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	4616      	mov	r6, r2
 800c3b0:	6123      	str	r3, [r4, #16]
 800c3b2:	e7ba      	b.n	800c32a <_printf_i+0x152>
 800c3b4:	680b      	ldr	r3, [r1, #0]
 800c3b6:	1d1a      	adds	r2, r3, #4
 800c3b8:	600a      	str	r2, [r1, #0]
 800c3ba:	681e      	ldr	r6, [r3, #0]
 800c3bc:	2100      	movs	r1, #0
 800c3be:	4630      	mov	r0, r6
 800c3c0:	6862      	ldr	r2, [r4, #4]
 800c3c2:	f002 fb57 	bl	800ea74 <memchr>
 800c3c6:	b108      	cbz	r0, 800c3cc <_printf_i+0x1f4>
 800c3c8:	1b80      	subs	r0, r0, r6
 800c3ca:	6060      	str	r0, [r4, #4]
 800c3cc:	6863      	ldr	r3, [r4, #4]
 800c3ce:	6123      	str	r3, [r4, #16]
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3d6:	e7a8      	b.n	800c32a <_printf_i+0x152>
 800c3d8:	4632      	mov	r2, r6
 800c3da:	4649      	mov	r1, r9
 800c3dc:	4640      	mov	r0, r8
 800c3de:	6923      	ldr	r3, [r4, #16]
 800c3e0:	47d0      	blx	sl
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	d0ab      	beq.n	800c33e <_printf_i+0x166>
 800c3e6:	6823      	ldr	r3, [r4, #0]
 800c3e8:	079b      	lsls	r3, r3, #30
 800c3ea:	d413      	bmi.n	800c414 <_printf_i+0x23c>
 800c3ec:	68e0      	ldr	r0, [r4, #12]
 800c3ee:	9b03      	ldr	r3, [sp, #12]
 800c3f0:	4298      	cmp	r0, r3
 800c3f2:	bfb8      	it	lt
 800c3f4:	4618      	movlt	r0, r3
 800c3f6:	e7a4      	b.n	800c342 <_printf_i+0x16a>
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	4632      	mov	r2, r6
 800c3fc:	4649      	mov	r1, r9
 800c3fe:	4640      	mov	r0, r8
 800c400:	47d0      	blx	sl
 800c402:	3001      	adds	r0, #1
 800c404:	d09b      	beq.n	800c33e <_printf_i+0x166>
 800c406:	3501      	adds	r5, #1
 800c408:	68e3      	ldr	r3, [r4, #12]
 800c40a:	9903      	ldr	r1, [sp, #12]
 800c40c:	1a5b      	subs	r3, r3, r1
 800c40e:	42ab      	cmp	r3, r5
 800c410:	dcf2      	bgt.n	800c3f8 <_printf_i+0x220>
 800c412:	e7eb      	b.n	800c3ec <_printf_i+0x214>
 800c414:	2500      	movs	r5, #0
 800c416:	f104 0619 	add.w	r6, r4, #25
 800c41a:	e7f5      	b.n	800c408 <_printf_i+0x230>
 800c41c:	08010bde 	.word	0x08010bde
 800c420:	08010bef 	.word	0x08010bef

0800c424 <_scanf_float>:
 800c424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c428:	b087      	sub	sp, #28
 800c42a:	9303      	str	r3, [sp, #12]
 800c42c:	688b      	ldr	r3, [r1, #8]
 800c42e:	4617      	mov	r7, r2
 800c430:	1e5a      	subs	r2, r3, #1
 800c432:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c436:	bf85      	ittet	hi
 800c438:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c43c:	195b      	addhi	r3, r3, r5
 800c43e:	2300      	movls	r3, #0
 800c440:	9302      	strhi	r3, [sp, #8]
 800c442:	bf88      	it	hi
 800c444:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c448:	468b      	mov	fp, r1
 800c44a:	f04f 0500 	mov.w	r5, #0
 800c44e:	bf8c      	ite	hi
 800c450:	608b      	strhi	r3, [r1, #8]
 800c452:	9302      	strls	r3, [sp, #8]
 800c454:	680b      	ldr	r3, [r1, #0]
 800c456:	4680      	mov	r8, r0
 800c458:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c45c:	f84b 3b1c 	str.w	r3, [fp], #28
 800c460:	460c      	mov	r4, r1
 800c462:	465e      	mov	r6, fp
 800c464:	46aa      	mov	sl, r5
 800c466:	46a9      	mov	r9, r5
 800c468:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c46c:	9501      	str	r5, [sp, #4]
 800c46e:	68a2      	ldr	r2, [r4, #8]
 800c470:	b152      	cbz	r2, 800c488 <_scanf_float+0x64>
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	2b4e      	cmp	r3, #78	; 0x4e
 800c478:	d864      	bhi.n	800c544 <_scanf_float+0x120>
 800c47a:	2b40      	cmp	r3, #64	; 0x40
 800c47c:	d83c      	bhi.n	800c4f8 <_scanf_float+0xd4>
 800c47e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c482:	b2c8      	uxtb	r0, r1
 800c484:	280e      	cmp	r0, #14
 800c486:	d93a      	bls.n	800c4fe <_scanf_float+0xda>
 800c488:	f1b9 0f00 	cmp.w	r9, #0
 800c48c:	d003      	beq.n	800c496 <_scanf_float+0x72>
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c49a:	f1ba 0f01 	cmp.w	sl, #1
 800c49e:	f200 8113 	bhi.w	800c6c8 <_scanf_float+0x2a4>
 800c4a2:	455e      	cmp	r6, fp
 800c4a4:	f200 8105 	bhi.w	800c6b2 <_scanf_float+0x28e>
 800c4a8:	2501      	movs	r5, #1
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	b007      	add	sp, #28
 800c4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c4b6:	2a0d      	cmp	r2, #13
 800c4b8:	d8e6      	bhi.n	800c488 <_scanf_float+0x64>
 800c4ba:	a101      	add	r1, pc, #4	; (adr r1, 800c4c0 <_scanf_float+0x9c>)
 800c4bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c4c0:	0800c5ff 	.word	0x0800c5ff
 800c4c4:	0800c489 	.word	0x0800c489
 800c4c8:	0800c489 	.word	0x0800c489
 800c4cc:	0800c489 	.word	0x0800c489
 800c4d0:	0800c65f 	.word	0x0800c65f
 800c4d4:	0800c637 	.word	0x0800c637
 800c4d8:	0800c489 	.word	0x0800c489
 800c4dc:	0800c489 	.word	0x0800c489
 800c4e0:	0800c60d 	.word	0x0800c60d
 800c4e4:	0800c489 	.word	0x0800c489
 800c4e8:	0800c489 	.word	0x0800c489
 800c4ec:	0800c489 	.word	0x0800c489
 800c4f0:	0800c489 	.word	0x0800c489
 800c4f4:	0800c5c5 	.word	0x0800c5c5
 800c4f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c4fc:	e7db      	b.n	800c4b6 <_scanf_float+0x92>
 800c4fe:	290e      	cmp	r1, #14
 800c500:	d8c2      	bhi.n	800c488 <_scanf_float+0x64>
 800c502:	a001      	add	r0, pc, #4	; (adr r0, 800c508 <_scanf_float+0xe4>)
 800c504:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c508:	0800c5b7 	.word	0x0800c5b7
 800c50c:	0800c489 	.word	0x0800c489
 800c510:	0800c5b7 	.word	0x0800c5b7
 800c514:	0800c64b 	.word	0x0800c64b
 800c518:	0800c489 	.word	0x0800c489
 800c51c:	0800c565 	.word	0x0800c565
 800c520:	0800c5a1 	.word	0x0800c5a1
 800c524:	0800c5a1 	.word	0x0800c5a1
 800c528:	0800c5a1 	.word	0x0800c5a1
 800c52c:	0800c5a1 	.word	0x0800c5a1
 800c530:	0800c5a1 	.word	0x0800c5a1
 800c534:	0800c5a1 	.word	0x0800c5a1
 800c538:	0800c5a1 	.word	0x0800c5a1
 800c53c:	0800c5a1 	.word	0x0800c5a1
 800c540:	0800c5a1 	.word	0x0800c5a1
 800c544:	2b6e      	cmp	r3, #110	; 0x6e
 800c546:	d809      	bhi.n	800c55c <_scanf_float+0x138>
 800c548:	2b60      	cmp	r3, #96	; 0x60
 800c54a:	d8b2      	bhi.n	800c4b2 <_scanf_float+0x8e>
 800c54c:	2b54      	cmp	r3, #84	; 0x54
 800c54e:	d077      	beq.n	800c640 <_scanf_float+0x21c>
 800c550:	2b59      	cmp	r3, #89	; 0x59
 800c552:	d199      	bne.n	800c488 <_scanf_float+0x64>
 800c554:	2d07      	cmp	r5, #7
 800c556:	d197      	bne.n	800c488 <_scanf_float+0x64>
 800c558:	2508      	movs	r5, #8
 800c55a:	e029      	b.n	800c5b0 <_scanf_float+0x18c>
 800c55c:	2b74      	cmp	r3, #116	; 0x74
 800c55e:	d06f      	beq.n	800c640 <_scanf_float+0x21c>
 800c560:	2b79      	cmp	r3, #121	; 0x79
 800c562:	e7f6      	b.n	800c552 <_scanf_float+0x12e>
 800c564:	6821      	ldr	r1, [r4, #0]
 800c566:	05c8      	lsls	r0, r1, #23
 800c568:	d51a      	bpl.n	800c5a0 <_scanf_float+0x17c>
 800c56a:	9b02      	ldr	r3, [sp, #8]
 800c56c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c570:	6021      	str	r1, [r4, #0]
 800c572:	f109 0901 	add.w	r9, r9, #1
 800c576:	b11b      	cbz	r3, 800c580 <_scanf_float+0x15c>
 800c578:	3b01      	subs	r3, #1
 800c57a:	3201      	adds	r2, #1
 800c57c:	9302      	str	r3, [sp, #8]
 800c57e:	60a2      	str	r2, [r4, #8]
 800c580:	68a3      	ldr	r3, [r4, #8]
 800c582:	3b01      	subs	r3, #1
 800c584:	60a3      	str	r3, [r4, #8]
 800c586:	6923      	ldr	r3, [r4, #16]
 800c588:	3301      	adds	r3, #1
 800c58a:	6123      	str	r3, [r4, #16]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	3b01      	subs	r3, #1
 800c590:	2b00      	cmp	r3, #0
 800c592:	607b      	str	r3, [r7, #4]
 800c594:	f340 8084 	ble.w	800c6a0 <_scanf_float+0x27c>
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	3301      	adds	r3, #1
 800c59c:	603b      	str	r3, [r7, #0]
 800c59e:	e766      	b.n	800c46e <_scanf_float+0x4a>
 800c5a0:	eb1a 0f05 	cmn.w	sl, r5
 800c5a4:	f47f af70 	bne.w	800c488 <_scanf_float+0x64>
 800c5a8:	6822      	ldr	r2, [r4, #0]
 800c5aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c5ae:	6022      	str	r2, [r4, #0]
 800c5b0:	f806 3b01 	strb.w	r3, [r6], #1
 800c5b4:	e7e4      	b.n	800c580 <_scanf_float+0x15c>
 800c5b6:	6822      	ldr	r2, [r4, #0]
 800c5b8:	0610      	lsls	r0, r2, #24
 800c5ba:	f57f af65 	bpl.w	800c488 <_scanf_float+0x64>
 800c5be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5c2:	e7f4      	b.n	800c5ae <_scanf_float+0x18a>
 800c5c4:	f1ba 0f00 	cmp.w	sl, #0
 800c5c8:	d10e      	bne.n	800c5e8 <_scanf_float+0x1c4>
 800c5ca:	f1b9 0f00 	cmp.w	r9, #0
 800c5ce:	d10e      	bne.n	800c5ee <_scanf_float+0x1ca>
 800c5d0:	6822      	ldr	r2, [r4, #0]
 800c5d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c5d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c5da:	d108      	bne.n	800c5ee <_scanf_float+0x1ca>
 800c5dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c5e0:	f04f 0a01 	mov.w	sl, #1
 800c5e4:	6022      	str	r2, [r4, #0]
 800c5e6:	e7e3      	b.n	800c5b0 <_scanf_float+0x18c>
 800c5e8:	f1ba 0f02 	cmp.w	sl, #2
 800c5ec:	d055      	beq.n	800c69a <_scanf_float+0x276>
 800c5ee:	2d01      	cmp	r5, #1
 800c5f0:	d002      	beq.n	800c5f8 <_scanf_float+0x1d4>
 800c5f2:	2d04      	cmp	r5, #4
 800c5f4:	f47f af48 	bne.w	800c488 <_scanf_float+0x64>
 800c5f8:	3501      	adds	r5, #1
 800c5fa:	b2ed      	uxtb	r5, r5
 800c5fc:	e7d8      	b.n	800c5b0 <_scanf_float+0x18c>
 800c5fe:	f1ba 0f01 	cmp.w	sl, #1
 800c602:	f47f af41 	bne.w	800c488 <_scanf_float+0x64>
 800c606:	f04f 0a02 	mov.w	sl, #2
 800c60a:	e7d1      	b.n	800c5b0 <_scanf_float+0x18c>
 800c60c:	b97d      	cbnz	r5, 800c62e <_scanf_float+0x20a>
 800c60e:	f1b9 0f00 	cmp.w	r9, #0
 800c612:	f47f af3c 	bne.w	800c48e <_scanf_float+0x6a>
 800c616:	6822      	ldr	r2, [r4, #0]
 800c618:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c61c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c620:	f47f af39 	bne.w	800c496 <_scanf_float+0x72>
 800c624:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c628:	2501      	movs	r5, #1
 800c62a:	6022      	str	r2, [r4, #0]
 800c62c:	e7c0      	b.n	800c5b0 <_scanf_float+0x18c>
 800c62e:	2d03      	cmp	r5, #3
 800c630:	d0e2      	beq.n	800c5f8 <_scanf_float+0x1d4>
 800c632:	2d05      	cmp	r5, #5
 800c634:	e7de      	b.n	800c5f4 <_scanf_float+0x1d0>
 800c636:	2d02      	cmp	r5, #2
 800c638:	f47f af26 	bne.w	800c488 <_scanf_float+0x64>
 800c63c:	2503      	movs	r5, #3
 800c63e:	e7b7      	b.n	800c5b0 <_scanf_float+0x18c>
 800c640:	2d06      	cmp	r5, #6
 800c642:	f47f af21 	bne.w	800c488 <_scanf_float+0x64>
 800c646:	2507      	movs	r5, #7
 800c648:	e7b2      	b.n	800c5b0 <_scanf_float+0x18c>
 800c64a:	6822      	ldr	r2, [r4, #0]
 800c64c:	0591      	lsls	r1, r2, #22
 800c64e:	f57f af1b 	bpl.w	800c488 <_scanf_float+0x64>
 800c652:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c656:	6022      	str	r2, [r4, #0]
 800c658:	f8cd 9004 	str.w	r9, [sp, #4]
 800c65c:	e7a8      	b.n	800c5b0 <_scanf_float+0x18c>
 800c65e:	6822      	ldr	r2, [r4, #0]
 800c660:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c664:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c668:	d006      	beq.n	800c678 <_scanf_float+0x254>
 800c66a:	0550      	lsls	r0, r2, #21
 800c66c:	f57f af0c 	bpl.w	800c488 <_scanf_float+0x64>
 800c670:	f1b9 0f00 	cmp.w	r9, #0
 800c674:	f43f af0f 	beq.w	800c496 <_scanf_float+0x72>
 800c678:	0591      	lsls	r1, r2, #22
 800c67a:	bf58      	it	pl
 800c67c:	9901      	ldrpl	r1, [sp, #4]
 800c67e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c682:	bf58      	it	pl
 800c684:	eba9 0101 	subpl.w	r1, r9, r1
 800c688:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c68c:	f04f 0900 	mov.w	r9, #0
 800c690:	bf58      	it	pl
 800c692:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c696:	6022      	str	r2, [r4, #0]
 800c698:	e78a      	b.n	800c5b0 <_scanf_float+0x18c>
 800c69a:	f04f 0a03 	mov.w	sl, #3
 800c69e:	e787      	b.n	800c5b0 <_scanf_float+0x18c>
 800c6a0:	4639      	mov	r1, r7
 800c6a2:	4640      	mov	r0, r8
 800c6a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c6a8:	4798      	blx	r3
 800c6aa:	2800      	cmp	r0, #0
 800c6ac:	f43f aedf 	beq.w	800c46e <_scanf_float+0x4a>
 800c6b0:	e6ea      	b.n	800c488 <_scanf_float+0x64>
 800c6b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c6b6:	463a      	mov	r2, r7
 800c6b8:	4640      	mov	r0, r8
 800c6ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c6be:	4798      	blx	r3
 800c6c0:	6923      	ldr	r3, [r4, #16]
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	6123      	str	r3, [r4, #16]
 800c6c6:	e6ec      	b.n	800c4a2 <_scanf_float+0x7e>
 800c6c8:	1e6b      	subs	r3, r5, #1
 800c6ca:	2b06      	cmp	r3, #6
 800c6cc:	d825      	bhi.n	800c71a <_scanf_float+0x2f6>
 800c6ce:	2d02      	cmp	r5, #2
 800c6d0:	d836      	bhi.n	800c740 <_scanf_float+0x31c>
 800c6d2:	455e      	cmp	r6, fp
 800c6d4:	f67f aee8 	bls.w	800c4a8 <_scanf_float+0x84>
 800c6d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c6dc:	463a      	mov	r2, r7
 800c6de:	4640      	mov	r0, r8
 800c6e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c6e4:	4798      	blx	r3
 800c6e6:	6923      	ldr	r3, [r4, #16]
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	6123      	str	r3, [r4, #16]
 800c6ec:	e7f1      	b.n	800c6d2 <_scanf_float+0x2ae>
 800c6ee:	9802      	ldr	r0, [sp, #8]
 800c6f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c6f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c6f8:	463a      	mov	r2, r7
 800c6fa:	9002      	str	r0, [sp, #8]
 800c6fc:	4640      	mov	r0, r8
 800c6fe:	4798      	blx	r3
 800c700:	6923      	ldr	r3, [r4, #16]
 800c702:	3b01      	subs	r3, #1
 800c704:	6123      	str	r3, [r4, #16]
 800c706:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c70a:	fa5f fa8a 	uxtb.w	sl, sl
 800c70e:	f1ba 0f02 	cmp.w	sl, #2
 800c712:	d1ec      	bne.n	800c6ee <_scanf_float+0x2ca>
 800c714:	3d03      	subs	r5, #3
 800c716:	b2ed      	uxtb	r5, r5
 800c718:	1b76      	subs	r6, r6, r5
 800c71a:	6823      	ldr	r3, [r4, #0]
 800c71c:	05da      	lsls	r2, r3, #23
 800c71e:	d52f      	bpl.n	800c780 <_scanf_float+0x35c>
 800c720:	055b      	lsls	r3, r3, #21
 800c722:	d510      	bpl.n	800c746 <_scanf_float+0x322>
 800c724:	455e      	cmp	r6, fp
 800c726:	f67f aebf 	bls.w	800c4a8 <_scanf_float+0x84>
 800c72a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c72e:	463a      	mov	r2, r7
 800c730:	4640      	mov	r0, r8
 800c732:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c736:	4798      	blx	r3
 800c738:	6923      	ldr	r3, [r4, #16]
 800c73a:	3b01      	subs	r3, #1
 800c73c:	6123      	str	r3, [r4, #16]
 800c73e:	e7f1      	b.n	800c724 <_scanf_float+0x300>
 800c740:	46aa      	mov	sl, r5
 800c742:	9602      	str	r6, [sp, #8]
 800c744:	e7df      	b.n	800c706 <_scanf_float+0x2e2>
 800c746:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c74a:	6923      	ldr	r3, [r4, #16]
 800c74c:	2965      	cmp	r1, #101	; 0x65
 800c74e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c752:	f106 35ff 	add.w	r5, r6, #4294967295
 800c756:	6123      	str	r3, [r4, #16]
 800c758:	d00c      	beq.n	800c774 <_scanf_float+0x350>
 800c75a:	2945      	cmp	r1, #69	; 0x45
 800c75c:	d00a      	beq.n	800c774 <_scanf_float+0x350>
 800c75e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c762:	463a      	mov	r2, r7
 800c764:	4640      	mov	r0, r8
 800c766:	4798      	blx	r3
 800c768:	6923      	ldr	r3, [r4, #16]
 800c76a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c76e:	3b01      	subs	r3, #1
 800c770:	1eb5      	subs	r5, r6, #2
 800c772:	6123      	str	r3, [r4, #16]
 800c774:	463a      	mov	r2, r7
 800c776:	4640      	mov	r0, r8
 800c778:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c77c:	4798      	blx	r3
 800c77e:	462e      	mov	r6, r5
 800c780:	6825      	ldr	r5, [r4, #0]
 800c782:	f015 0510 	ands.w	r5, r5, #16
 800c786:	d159      	bne.n	800c83c <_scanf_float+0x418>
 800c788:	7035      	strb	r5, [r6, #0]
 800c78a:	6823      	ldr	r3, [r4, #0]
 800c78c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c794:	d11c      	bne.n	800c7d0 <_scanf_float+0x3ac>
 800c796:	9b01      	ldr	r3, [sp, #4]
 800c798:	454b      	cmp	r3, r9
 800c79a:	eba3 0209 	sub.w	r2, r3, r9
 800c79e:	d124      	bne.n	800c7ea <_scanf_float+0x3c6>
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	4659      	mov	r1, fp
 800c7a4:	4640      	mov	r0, r8
 800c7a6:	f000 fe9b 	bl	800d4e0 <_strtod_r>
 800c7aa:	f8d4 c000 	ldr.w	ip, [r4]
 800c7ae:	9b03      	ldr	r3, [sp, #12]
 800c7b0:	f01c 0f02 	tst.w	ip, #2
 800c7b4:	4606      	mov	r6, r0
 800c7b6:	460f      	mov	r7, r1
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	d021      	beq.n	800c800 <_scanf_float+0x3dc>
 800c7bc:	9903      	ldr	r1, [sp, #12]
 800c7be:	1d1a      	adds	r2, r3, #4
 800c7c0:	600a      	str	r2, [r1, #0]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	e9c3 6700 	strd	r6, r7, [r3]
 800c7c8:	68e3      	ldr	r3, [r4, #12]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	60e3      	str	r3, [r4, #12]
 800c7ce:	e66c      	b.n	800c4aa <_scanf_float+0x86>
 800c7d0:	9b04      	ldr	r3, [sp, #16]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d0e4      	beq.n	800c7a0 <_scanf_float+0x37c>
 800c7d6:	9905      	ldr	r1, [sp, #20]
 800c7d8:	230a      	movs	r3, #10
 800c7da:	462a      	mov	r2, r5
 800c7dc:	4640      	mov	r0, r8
 800c7de:	3101      	adds	r1, #1
 800c7e0:	f000 ff0a 	bl	800d5f8 <_strtol_r>
 800c7e4:	9b04      	ldr	r3, [sp, #16]
 800c7e6:	9e05      	ldr	r6, [sp, #20]
 800c7e8:	1ac2      	subs	r2, r0, r3
 800c7ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c7ee:	429e      	cmp	r6, r3
 800c7f0:	bf28      	it	cs
 800c7f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	4911      	ldr	r1, [pc, #68]	; (800c840 <_scanf_float+0x41c>)
 800c7fa:	f000 f839 	bl	800c870 <siprintf>
 800c7fe:	e7cf      	b.n	800c7a0 <_scanf_float+0x37c>
 800c800:	f01c 0f04 	tst.w	ip, #4
 800c804:	f103 0e04 	add.w	lr, r3, #4
 800c808:	d003      	beq.n	800c812 <_scanf_float+0x3ee>
 800c80a:	9903      	ldr	r1, [sp, #12]
 800c80c:	f8c1 e000 	str.w	lr, [r1]
 800c810:	e7d7      	b.n	800c7c2 <_scanf_float+0x39e>
 800c812:	9a03      	ldr	r2, [sp, #12]
 800c814:	f8c2 e000 	str.w	lr, [r2]
 800c818:	f8d3 8000 	ldr.w	r8, [r3]
 800c81c:	4602      	mov	r2, r0
 800c81e:	460b      	mov	r3, r1
 800c820:	f7f4 f960 	bl	8000ae4 <__aeabi_dcmpun>
 800c824:	b128      	cbz	r0, 800c832 <_scanf_float+0x40e>
 800c826:	4807      	ldr	r0, [pc, #28]	; (800c844 <_scanf_float+0x420>)
 800c828:	f000 f81e 	bl	800c868 <nanf>
 800c82c:	f8c8 0000 	str.w	r0, [r8]
 800c830:	e7ca      	b.n	800c7c8 <_scanf_float+0x3a4>
 800c832:	4630      	mov	r0, r6
 800c834:	4639      	mov	r1, r7
 800c836:	f7f4 f9b3 	bl	8000ba0 <__aeabi_d2f>
 800c83a:	e7f7      	b.n	800c82c <_scanf_float+0x408>
 800c83c:	2500      	movs	r5, #0
 800c83e:	e634      	b.n	800c4aa <_scanf_float+0x86>
 800c840:	08010c00 	.word	0x08010c00
 800c844:	08010f38 	.word	0x08010f38

0800c848 <_sbrk_r>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	2300      	movs	r3, #0
 800c84c:	4d05      	ldr	r5, [pc, #20]	; (800c864 <_sbrk_r+0x1c>)
 800c84e:	4604      	mov	r4, r0
 800c850:	4608      	mov	r0, r1
 800c852:	602b      	str	r3, [r5, #0]
 800c854:	f7fa fb52 	bl	8006efc <_sbrk>
 800c858:	1c43      	adds	r3, r0, #1
 800c85a:	d102      	bne.n	800c862 <_sbrk_r+0x1a>
 800c85c:	682b      	ldr	r3, [r5, #0]
 800c85e:	b103      	cbz	r3, 800c862 <_sbrk_r+0x1a>
 800c860:	6023      	str	r3, [r4, #0]
 800c862:	bd38      	pop	{r3, r4, r5, pc}
 800c864:	20000928 	.word	0x20000928

0800c868 <nanf>:
 800c868:	4800      	ldr	r0, [pc, #0]	; (800c86c <nanf+0x4>)
 800c86a:	4770      	bx	lr
 800c86c:	7fc00000 	.word	0x7fc00000

0800c870 <siprintf>:
 800c870:	b40e      	push	{r1, r2, r3}
 800c872:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c876:	b500      	push	{lr}
 800c878:	b09c      	sub	sp, #112	; 0x70
 800c87a:	ab1d      	add	r3, sp, #116	; 0x74
 800c87c:	9002      	str	r0, [sp, #8]
 800c87e:	9006      	str	r0, [sp, #24]
 800c880:	9107      	str	r1, [sp, #28]
 800c882:	9104      	str	r1, [sp, #16]
 800c884:	4808      	ldr	r0, [pc, #32]	; (800c8a8 <siprintf+0x38>)
 800c886:	4909      	ldr	r1, [pc, #36]	; (800c8ac <siprintf+0x3c>)
 800c888:	f853 2b04 	ldr.w	r2, [r3], #4
 800c88c:	9105      	str	r1, [sp, #20]
 800c88e:	6800      	ldr	r0, [r0, #0]
 800c890:	a902      	add	r1, sp, #8
 800c892:	9301      	str	r3, [sp, #4]
 800c894:	f002 fe38 	bl	800f508 <_svfiprintf_r>
 800c898:	2200      	movs	r2, #0
 800c89a:	9b02      	ldr	r3, [sp, #8]
 800c89c:	701a      	strb	r2, [r3, #0]
 800c89e:	b01c      	add	sp, #112	; 0x70
 800c8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8a4:	b003      	add	sp, #12
 800c8a6:	4770      	bx	lr
 800c8a8:	20000040 	.word	0x20000040
 800c8ac:	ffff0208 	.word	0xffff0208

0800c8b0 <sulp>:
 800c8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b4:	460f      	mov	r7, r1
 800c8b6:	4690      	mov	r8, r2
 800c8b8:	f002 fc74 	bl	800f1a4 <__ulp>
 800c8bc:	4604      	mov	r4, r0
 800c8be:	460d      	mov	r5, r1
 800c8c0:	f1b8 0f00 	cmp.w	r8, #0
 800c8c4:	d011      	beq.n	800c8ea <sulp+0x3a>
 800c8c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c8ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	dd0b      	ble.n	800c8ea <sulp+0x3a>
 800c8d2:	2400      	movs	r4, #0
 800c8d4:	051b      	lsls	r3, r3, #20
 800c8d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c8da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c8de:	4622      	mov	r2, r4
 800c8e0:	462b      	mov	r3, r5
 800c8e2:	f7f3 fe65 	bl	80005b0 <__aeabi_dmul>
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	460d      	mov	r5, r1
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	4629      	mov	r1, r5
 800c8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f2:	0000      	movs	r0, r0
 800c8f4:	0000      	movs	r0, r0
	...

0800c8f8 <_strtod_l>:
 800c8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fc:	469b      	mov	fp, r3
 800c8fe:	2300      	movs	r3, #0
 800c900:	b0a1      	sub	sp, #132	; 0x84
 800c902:	931c      	str	r3, [sp, #112]	; 0x70
 800c904:	4ba1      	ldr	r3, [pc, #644]	; (800cb8c <_strtod_l+0x294>)
 800c906:	4682      	mov	sl, r0
 800c908:	681f      	ldr	r7, [r3, #0]
 800c90a:	460e      	mov	r6, r1
 800c90c:	4638      	mov	r0, r7
 800c90e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c910:	f7f3 fc8a 	bl	8000228 <strlen>
 800c914:	f04f 0800 	mov.w	r8, #0
 800c918:	4604      	mov	r4, r0
 800c91a:	f04f 0900 	mov.w	r9, #0
 800c91e:	961b      	str	r6, [sp, #108]	; 0x6c
 800c920:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c922:	781a      	ldrb	r2, [r3, #0]
 800c924:	2a2b      	cmp	r2, #43	; 0x2b
 800c926:	d04c      	beq.n	800c9c2 <_strtod_l+0xca>
 800c928:	d83a      	bhi.n	800c9a0 <_strtod_l+0xa8>
 800c92a:	2a0d      	cmp	r2, #13
 800c92c:	d833      	bhi.n	800c996 <_strtod_l+0x9e>
 800c92e:	2a08      	cmp	r2, #8
 800c930:	d833      	bhi.n	800c99a <_strtod_l+0xa2>
 800c932:	2a00      	cmp	r2, #0
 800c934:	d03d      	beq.n	800c9b2 <_strtod_l+0xba>
 800c936:	2300      	movs	r3, #0
 800c938:	930c      	str	r3, [sp, #48]	; 0x30
 800c93a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c93c:	782b      	ldrb	r3, [r5, #0]
 800c93e:	2b30      	cmp	r3, #48	; 0x30
 800c940:	f040 80af 	bne.w	800caa2 <_strtod_l+0x1aa>
 800c944:	786b      	ldrb	r3, [r5, #1]
 800c946:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c94a:	2b58      	cmp	r3, #88	; 0x58
 800c94c:	d16c      	bne.n	800ca28 <_strtod_l+0x130>
 800c94e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c950:	4650      	mov	r0, sl
 800c952:	9301      	str	r3, [sp, #4]
 800c954:	ab1c      	add	r3, sp, #112	; 0x70
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	4a8d      	ldr	r2, [pc, #564]	; (800cb90 <_strtod_l+0x298>)
 800c95a:	f8cd b008 	str.w	fp, [sp, #8]
 800c95e:	ab1d      	add	r3, sp, #116	; 0x74
 800c960:	a91b      	add	r1, sp, #108	; 0x6c
 800c962:	f001 fd73 	bl	800e44c <__gethex>
 800c966:	f010 0607 	ands.w	r6, r0, #7
 800c96a:	4604      	mov	r4, r0
 800c96c:	d005      	beq.n	800c97a <_strtod_l+0x82>
 800c96e:	2e06      	cmp	r6, #6
 800c970:	d129      	bne.n	800c9c6 <_strtod_l+0xce>
 800c972:	2300      	movs	r3, #0
 800c974:	3501      	adds	r5, #1
 800c976:	951b      	str	r5, [sp, #108]	; 0x6c
 800c978:	930c      	str	r3, [sp, #48]	; 0x30
 800c97a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f040 8596 	bne.w	800d4ae <_strtod_l+0xbb6>
 800c982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c984:	b1d3      	cbz	r3, 800c9bc <_strtod_l+0xc4>
 800c986:	4642      	mov	r2, r8
 800c988:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c98c:	4610      	mov	r0, r2
 800c98e:	4619      	mov	r1, r3
 800c990:	b021      	add	sp, #132	; 0x84
 800c992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c996:	2a20      	cmp	r2, #32
 800c998:	d1cd      	bne.n	800c936 <_strtod_l+0x3e>
 800c99a:	3301      	adds	r3, #1
 800c99c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c99e:	e7bf      	b.n	800c920 <_strtod_l+0x28>
 800c9a0:	2a2d      	cmp	r2, #45	; 0x2d
 800c9a2:	d1c8      	bne.n	800c936 <_strtod_l+0x3e>
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	920c      	str	r2, [sp, #48]	; 0x30
 800c9a8:	1c5a      	adds	r2, r3, #1
 800c9aa:	921b      	str	r2, [sp, #108]	; 0x6c
 800c9ac:	785b      	ldrb	r3, [r3, #1]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1c3      	bne.n	800c93a <_strtod_l+0x42>
 800c9b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9b4:	961b      	str	r6, [sp, #108]	; 0x6c
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f040 8577 	bne.w	800d4aa <_strtod_l+0xbb2>
 800c9bc:	4642      	mov	r2, r8
 800c9be:	464b      	mov	r3, r9
 800c9c0:	e7e4      	b.n	800c98c <_strtod_l+0x94>
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	e7ef      	b.n	800c9a6 <_strtod_l+0xae>
 800c9c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c9c8:	b13a      	cbz	r2, 800c9da <_strtod_l+0xe2>
 800c9ca:	2135      	movs	r1, #53	; 0x35
 800c9cc:	a81e      	add	r0, sp, #120	; 0x78
 800c9ce:	f002 fced 	bl	800f3ac <__copybits>
 800c9d2:	4650      	mov	r0, sl
 800c9d4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9d6:	f002 f8b5 	bl	800eb44 <_Bfree>
 800c9da:	3e01      	subs	r6, #1
 800c9dc:	2e05      	cmp	r6, #5
 800c9de:	d807      	bhi.n	800c9f0 <_strtod_l+0xf8>
 800c9e0:	e8df f006 	tbb	[pc, r6]
 800c9e4:	1d180b0e 	.word	0x1d180b0e
 800c9e8:	030e      	.short	0x030e
 800c9ea:	f04f 0900 	mov.w	r9, #0
 800c9ee:	46c8      	mov	r8, r9
 800c9f0:	0721      	lsls	r1, r4, #28
 800c9f2:	d5c2      	bpl.n	800c97a <_strtod_l+0x82>
 800c9f4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800c9f8:	e7bf      	b.n	800c97a <_strtod_l+0x82>
 800c9fa:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800c9fe:	e7f7      	b.n	800c9f0 <_strtod_l+0xf8>
 800ca00:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ca02:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800ca06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ca0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ca0e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ca12:	e7ed      	b.n	800c9f0 <_strtod_l+0xf8>
 800ca14:	f04f 0800 	mov.w	r8, #0
 800ca18:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800cb94 <_strtod_l+0x29c>
 800ca1c:	e7e8      	b.n	800c9f0 <_strtod_l+0xf8>
 800ca1e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ca22:	f04f 38ff 	mov.w	r8, #4294967295
 800ca26:	e7e3      	b.n	800c9f0 <_strtod_l+0xf8>
 800ca28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca2a:	1c5a      	adds	r2, r3, #1
 800ca2c:	921b      	str	r2, [sp, #108]	; 0x6c
 800ca2e:	785b      	ldrb	r3, [r3, #1]
 800ca30:	2b30      	cmp	r3, #48	; 0x30
 800ca32:	d0f9      	beq.n	800ca28 <_strtod_l+0x130>
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d0a0      	beq.n	800c97a <_strtod_l+0x82>
 800ca38:	2301      	movs	r3, #1
 800ca3a:	9307      	str	r3, [sp, #28]
 800ca3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca3e:	220a      	movs	r2, #10
 800ca40:	9308      	str	r3, [sp, #32]
 800ca42:	2300      	movs	r3, #0
 800ca44:	469b      	mov	fp, r3
 800ca46:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ca4a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ca4c:	7805      	ldrb	r5, [r0, #0]
 800ca4e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ca52:	b2d9      	uxtb	r1, r3
 800ca54:	2909      	cmp	r1, #9
 800ca56:	d926      	bls.n	800caa6 <_strtod_l+0x1ae>
 800ca58:	4622      	mov	r2, r4
 800ca5a:	4639      	mov	r1, r7
 800ca5c:	f002 fe5a 	bl	800f714 <strncmp>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	d032      	beq.n	800caca <_strtod_l+0x1d2>
 800ca64:	2000      	movs	r0, #0
 800ca66:	462b      	mov	r3, r5
 800ca68:	465c      	mov	r4, fp
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	9004      	str	r0, [sp, #16]
 800ca6e:	2b65      	cmp	r3, #101	; 0x65
 800ca70:	d001      	beq.n	800ca76 <_strtod_l+0x17e>
 800ca72:	2b45      	cmp	r3, #69	; 0x45
 800ca74:	d113      	bne.n	800ca9e <_strtod_l+0x1a6>
 800ca76:	b91c      	cbnz	r4, 800ca80 <_strtod_l+0x188>
 800ca78:	9b07      	ldr	r3, [sp, #28]
 800ca7a:	4303      	orrs	r3, r0
 800ca7c:	d099      	beq.n	800c9b2 <_strtod_l+0xba>
 800ca7e:	2400      	movs	r4, #0
 800ca80:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ca82:	1c73      	adds	r3, r6, #1
 800ca84:	931b      	str	r3, [sp, #108]	; 0x6c
 800ca86:	7873      	ldrb	r3, [r6, #1]
 800ca88:	2b2b      	cmp	r3, #43	; 0x2b
 800ca8a:	d078      	beq.n	800cb7e <_strtod_l+0x286>
 800ca8c:	2b2d      	cmp	r3, #45	; 0x2d
 800ca8e:	d07b      	beq.n	800cb88 <_strtod_l+0x290>
 800ca90:	2700      	movs	r7, #0
 800ca92:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ca96:	2909      	cmp	r1, #9
 800ca98:	f240 8082 	bls.w	800cba0 <_strtod_l+0x2a8>
 800ca9c:	961b      	str	r6, [sp, #108]	; 0x6c
 800ca9e:	2500      	movs	r5, #0
 800caa0:	e09e      	b.n	800cbe0 <_strtod_l+0x2e8>
 800caa2:	2300      	movs	r3, #0
 800caa4:	e7c9      	b.n	800ca3a <_strtod_l+0x142>
 800caa6:	f1bb 0f08 	cmp.w	fp, #8
 800caaa:	bfd5      	itete	le
 800caac:	9906      	ldrle	r1, [sp, #24]
 800caae:	9905      	ldrgt	r1, [sp, #20]
 800cab0:	fb02 3301 	mlale	r3, r2, r1, r3
 800cab4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cab8:	f100 0001 	add.w	r0, r0, #1
 800cabc:	bfd4      	ite	le
 800cabe:	9306      	strle	r3, [sp, #24]
 800cac0:	9305      	strgt	r3, [sp, #20]
 800cac2:	f10b 0b01 	add.w	fp, fp, #1
 800cac6:	901b      	str	r0, [sp, #108]	; 0x6c
 800cac8:	e7bf      	b.n	800ca4a <_strtod_l+0x152>
 800caca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cacc:	191a      	adds	r2, r3, r4
 800cace:	921b      	str	r2, [sp, #108]	; 0x6c
 800cad0:	5d1b      	ldrb	r3, [r3, r4]
 800cad2:	f1bb 0f00 	cmp.w	fp, #0
 800cad6:	d036      	beq.n	800cb46 <_strtod_l+0x24e>
 800cad8:	465c      	mov	r4, fp
 800cada:	9004      	str	r0, [sp, #16]
 800cadc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800cae0:	2a09      	cmp	r2, #9
 800cae2:	d912      	bls.n	800cb0a <_strtod_l+0x212>
 800cae4:	2201      	movs	r2, #1
 800cae6:	e7c2      	b.n	800ca6e <_strtod_l+0x176>
 800cae8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800caea:	3001      	adds	r0, #1
 800caec:	1c5a      	adds	r2, r3, #1
 800caee:	921b      	str	r2, [sp, #108]	; 0x6c
 800caf0:	785b      	ldrb	r3, [r3, #1]
 800caf2:	2b30      	cmp	r3, #48	; 0x30
 800caf4:	d0f8      	beq.n	800cae8 <_strtod_l+0x1f0>
 800caf6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800cafa:	2a08      	cmp	r2, #8
 800cafc:	f200 84dc 	bhi.w	800d4b8 <_strtod_l+0xbc0>
 800cb00:	9004      	str	r0, [sp, #16]
 800cb02:	2000      	movs	r0, #0
 800cb04:	4604      	mov	r4, r0
 800cb06:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cb08:	9208      	str	r2, [sp, #32]
 800cb0a:	3b30      	subs	r3, #48	; 0x30
 800cb0c:	f100 0201 	add.w	r2, r0, #1
 800cb10:	d013      	beq.n	800cb3a <_strtod_l+0x242>
 800cb12:	9904      	ldr	r1, [sp, #16]
 800cb14:	1905      	adds	r5, r0, r4
 800cb16:	4411      	add	r1, r2
 800cb18:	9104      	str	r1, [sp, #16]
 800cb1a:	4622      	mov	r2, r4
 800cb1c:	210a      	movs	r1, #10
 800cb1e:	42aa      	cmp	r2, r5
 800cb20:	d113      	bne.n	800cb4a <_strtod_l+0x252>
 800cb22:	1822      	adds	r2, r4, r0
 800cb24:	2a08      	cmp	r2, #8
 800cb26:	f104 0401 	add.w	r4, r4, #1
 800cb2a:	4404      	add	r4, r0
 800cb2c:	dc1b      	bgt.n	800cb66 <_strtod_l+0x26e>
 800cb2e:	220a      	movs	r2, #10
 800cb30:	9906      	ldr	r1, [sp, #24]
 800cb32:	fb02 3301 	mla	r3, r2, r1, r3
 800cb36:	9306      	str	r3, [sp, #24]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb3c:	4610      	mov	r0, r2
 800cb3e:	1c59      	adds	r1, r3, #1
 800cb40:	911b      	str	r1, [sp, #108]	; 0x6c
 800cb42:	785b      	ldrb	r3, [r3, #1]
 800cb44:	e7ca      	b.n	800cadc <_strtod_l+0x1e4>
 800cb46:	4658      	mov	r0, fp
 800cb48:	e7d3      	b.n	800caf2 <_strtod_l+0x1fa>
 800cb4a:	2a08      	cmp	r2, #8
 800cb4c:	dc04      	bgt.n	800cb58 <_strtod_l+0x260>
 800cb4e:	9f06      	ldr	r7, [sp, #24]
 800cb50:	434f      	muls	r7, r1
 800cb52:	9706      	str	r7, [sp, #24]
 800cb54:	3201      	adds	r2, #1
 800cb56:	e7e2      	b.n	800cb1e <_strtod_l+0x226>
 800cb58:	1c57      	adds	r7, r2, #1
 800cb5a:	2f10      	cmp	r7, #16
 800cb5c:	bfde      	ittt	le
 800cb5e:	9f05      	ldrle	r7, [sp, #20]
 800cb60:	434f      	mulle	r7, r1
 800cb62:	9705      	strle	r7, [sp, #20]
 800cb64:	e7f6      	b.n	800cb54 <_strtod_l+0x25c>
 800cb66:	2c10      	cmp	r4, #16
 800cb68:	bfdf      	itttt	le
 800cb6a:	220a      	movle	r2, #10
 800cb6c:	9905      	ldrle	r1, [sp, #20]
 800cb6e:	fb02 3301 	mlale	r3, r2, r1, r3
 800cb72:	9305      	strle	r3, [sp, #20]
 800cb74:	e7e0      	b.n	800cb38 <_strtod_l+0x240>
 800cb76:	2300      	movs	r3, #0
 800cb78:	2201      	movs	r2, #1
 800cb7a:	9304      	str	r3, [sp, #16]
 800cb7c:	e77c      	b.n	800ca78 <_strtod_l+0x180>
 800cb7e:	2700      	movs	r7, #0
 800cb80:	1cb3      	adds	r3, r6, #2
 800cb82:	931b      	str	r3, [sp, #108]	; 0x6c
 800cb84:	78b3      	ldrb	r3, [r6, #2]
 800cb86:	e784      	b.n	800ca92 <_strtod_l+0x19a>
 800cb88:	2701      	movs	r7, #1
 800cb8a:	e7f9      	b.n	800cb80 <_strtod_l+0x288>
 800cb8c:	08010d7c 	.word	0x08010d7c
 800cb90:	08010c08 	.word	0x08010c08
 800cb94:	7ff00000 	.word	0x7ff00000
 800cb98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb9a:	1c59      	adds	r1, r3, #1
 800cb9c:	911b      	str	r1, [sp, #108]	; 0x6c
 800cb9e:	785b      	ldrb	r3, [r3, #1]
 800cba0:	2b30      	cmp	r3, #48	; 0x30
 800cba2:	d0f9      	beq.n	800cb98 <_strtod_l+0x2a0>
 800cba4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800cba8:	2908      	cmp	r1, #8
 800cbaa:	f63f af78 	bhi.w	800ca9e <_strtod_l+0x1a6>
 800cbae:	f04f 0e0a 	mov.w	lr, #10
 800cbb2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800cbb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cbb8:	9309      	str	r3, [sp, #36]	; 0x24
 800cbba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cbbc:	1c59      	adds	r1, r3, #1
 800cbbe:	911b      	str	r1, [sp, #108]	; 0x6c
 800cbc0:	785b      	ldrb	r3, [r3, #1]
 800cbc2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800cbc6:	2d09      	cmp	r5, #9
 800cbc8:	d935      	bls.n	800cc36 <_strtod_l+0x33e>
 800cbca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cbcc:	1b49      	subs	r1, r1, r5
 800cbce:	2908      	cmp	r1, #8
 800cbd0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800cbd4:	dc02      	bgt.n	800cbdc <_strtod_l+0x2e4>
 800cbd6:	4565      	cmp	r5, ip
 800cbd8:	bfa8      	it	ge
 800cbda:	4665      	movge	r5, ip
 800cbdc:	b107      	cbz	r7, 800cbe0 <_strtod_l+0x2e8>
 800cbde:	426d      	negs	r5, r5
 800cbe0:	2c00      	cmp	r4, #0
 800cbe2:	d14c      	bne.n	800cc7e <_strtod_l+0x386>
 800cbe4:	9907      	ldr	r1, [sp, #28]
 800cbe6:	4301      	orrs	r1, r0
 800cbe8:	f47f aec7 	bne.w	800c97a <_strtod_l+0x82>
 800cbec:	2a00      	cmp	r2, #0
 800cbee:	f47f aee0 	bne.w	800c9b2 <_strtod_l+0xba>
 800cbf2:	2b69      	cmp	r3, #105	; 0x69
 800cbf4:	d026      	beq.n	800cc44 <_strtod_l+0x34c>
 800cbf6:	dc23      	bgt.n	800cc40 <_strtod_l+0x348>
 800cbf8:	2b49      	cmp	r3, #73	; 0x49
 800cbfa:	d023      	beq.n	800cc44 <_strtod_l+0x34c>
 800cbfc:	2b4e      	cmp	r3, #78	; 0x4e
 800cbfe:	f47f aed8 	bne.w	800c9b2 <_strtod_l+0xba>
 800cc02:	499c      	ldr	r1, [pc, #624]	; (800ce74 <_strtod_l+0x57c>)
 800cc04:	a81b      	add	r0, sp, #108	; 0x6c
 800cc06:	f001 fe6f 	bl	800e8e8 <__match>
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	f43f aed1 	beq.w	800c9b2 <_strtod_l+0xba>
 800cc10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	2b28      	cmp	r3, #40	; 0x28
 800cc16:	d12c      	bne.n	800cc72 <_strtod_l+0x37a>
 800cc18:	4997      	ldr	r1, [pc, #604]	; (800ce78 <_strtod_l+0x580>)
 800cc1a:	aa1e      	add	r2, sp, #120	; 0x78
 800cc1c:	a81b      	add	r0, sp, #108	; 0x6c
 800cc1e:	f001 fe77 	bl	800e910 <__hexnan>
 800cc22:	2805      	cmp	r0, #5
 800cc24:	d125      	bne.n	800cc72 <_strtod_l+0x37a>
 800cc26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cc28:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800cc2c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800cc30:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800cc34:	e6a1      	b.n	800c97a <_strtod_l+0x82>
 800cc36:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800cc3a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800cc3e:	e7bc      	b.n	800cbba <_strtod_l+0x2c2>
 800cc40:	2b6e      	cmp	r3, #110	; 0x6e
 800cc42:	e7dc      	b.n	800cbfe <_strtod_l+0x306>
 800cc44:	498d      	ldr	r1, [pc, #564]	; (800ce7c <_strtod_l+0x584>)
 800cc46:	a81b      	add	r0, sp, #108	; 0x6c
 800cc48:	f001 fe4e 	bl	800e8e8 <__match>
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	f43f aeb0 	beq.w	800c9b2 <_strtod_l+0xba>
 800cc52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc54:	498a      	ldr	r1, [pc, #552]	; (800ce80 <_strtod_l+0x588>)
 800cc56:	3b01      	subs	r3, #1
 800cc58:	a81b      	add	r0, sp, #108	; 0x6c
 800cc5a:	931b      	str	r3, [sp, #108]	; 0x6c
 800cc5c:	f001 fe44 	bl	800e8e8 <__match>
 800cc60:	b910      	cbnz	r0, 800cc68 <_strtod_l+0x370>
 800cc62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc64:	3301      	adds	r3, #1
 800cc66:	931b      	str	r3, [sp, #108]	; 0x6c
 800cc68:	f04f 0800 	mov.w	r8, #0
 800cc6c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800ce90 <_strtod_l+0x598>
 800cc70:	e683      	b.n	800c97a <_strtod_l+0x82>
 800cc72:	4884      	ldr	r0, [pc, #528]	; (800ce84 <_strtod_l+0x58c>)
 800cc74:	f002 fd48 	bl	800f708 <nan>
 800cc78:	4680      	mov	r8, r0
 800cc7a:	4689      	mov	r9, r1
 800cc7c:	e67d      	b.n	800c97a <_strtod_l+0x82>
 800cc7e:	9b04      	ldr	r3, [sp, #16]
 800cc80:	f1bb 0f00 	cmp.w	fp, #0
 800cc84:	bf08      	it	eq
 800cc86:	46a3      	moveq	fp, r4
 800cc88:	1aeb      	subs	r3, r5, r3
 800cc8a:	2c10      	cmp	r4, #16
 800cc8c:	9806      	ldr	r0, [sp, #24]
 800cc8e:	4626      	mov	r6, r4
 800cc90:	9307      	str	r3, [sp, #28]
 800cc92:	bfa8      	it	ge
 800cc94:	2610      	movge	r6, #16
 800cc96:	f7f3 fc11 	bl	80004bc <__aeabi_ui2d>
 800cc9a:	2c09      	cmp	r4, #9
 800cc9c:	4680      	mov	r8, r0
 800cc9e:	4689      	mov	r9, r1
 800cca0:	dd13      	ble.n	800ccca <_strtod_l+0x3d2>
 800cca2:	4b79      	ldr	r3, [pc, #484]	; (800ce88 <_strtod_l+0x590>)
 800cca4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cca8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ccac:	f7f3 fc80 	bl	80005b0 <__aeabi_dmul>
 800ccb0:	4680      	mov	r8, r0
 800ccb2:	9805      	ldr	r0, [sp, #20]
 800ccb4:	4689      	mov	r9, r1
 800ccb6:	f7f3 fc01 	bl	80004bc <__aeabi_ui2d>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	4640      	mov	r0, r8
 800ccc0:	4649      	mov	r1, r9
 800ccc2:	f7f3 fabf 	bl	8000244 <__adddf3>
 800ccc6:	4680      	mov	r8, r0
 800ccc8:	4689      	mov	r9, r1
 800ccca:	2c0f      	cmp	r4, #15
 800cccc:	dc36      	bgt.n	800cd3c <_strtod_l+0x444>
 800ccce:	9b07      	ldr	r3, [sp, #28]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f43f ae52 	beq.w	800c97a <_strtod_l+0x82>
 800ccd6:	dd22      	ble.n	800cd1e <_strtod_l+0x426>
 800ccd8:	2b16      	cmp	r3, #22
 800ccda:	dc09      	bgt.n	800ccf0 <_strtod_l+0x3f8>
 800ccdc:	4c6a      	ldr	r4, [pc, #424]	; (800ce88 <_strtod_l+0x590>)
 800ccde:	4642      	mov	r2, r8
 800cce0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800cce4:	464b      	mov	r3, r9
 800cce6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ccea:	f7f3 fc61 	bl	80005b0 <__aeabi_dmul>
 800ccee:	e7c3      	b.n	800cc78 <_strtod_l+0x380>
 800ccf0:	9a07      	ldr	r2, [sp, #28]
 800ccf2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	db20      	blt.n	800cd3c <_strtod_l+0x444>
 800ccfa:	4d63      	ldr	r5, [pc, #396]	; (800ce88 <_strtod_l+0x590>)
 800ccfc:	f1c4 040f 	rsb	r4, r4, #15
 800cd00:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800cd04:	4642      	mov	r2, r8
 800cd06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd0a:	464b      	mov	r3, r9
 800cd0c:	f7f3 fc50 	bl	80005b0 <__aeabi_dmul>
 800cd10:	9b07      	ldr	r3, [sp, #28]
 800cd12:	1b1c      	subs	r4, r3, r4
 800cd14:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800cd18:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd1c:	e7e5      	b.n	800ccea <_strtod_l+0x3f2>
 800cd1e:	9b07      	ldr	r3, [sp, #28]
 800cd20:	3316      	adds	r3, #22
 800cd22:	db0b      	blt.n	800cd3c <_strtod_l+0x444>
 800cd24:	9b04      	ldr	r3, [sp, #16]
 800cd26:	4a58      	ldr	r2, [pc, #352]	; (800ce88 <_strtod_l+0x590>)
 800cd28:	1b5d      	subs	r5, r3, r5
 800cd2a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800cd2e:	4640      	mov	r0, r8
 800cd30:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd34:	4649      	mov	r1, r9
 800cd36:	f7f3 fd65 	bl	8000804 <__aeabi_ddiv>
 800cd3a:	e79d      	b.n	800cc78 <_strtod_l+0x380>
 800cd3c:	9b07      	ldr	r3, [sp, #28]
 800cd3e:	1ba6      	subs	r6, r4, r6
 800cd40:	441e      	add	r6, r3
 800cd42:	2e00      	cmp	r6, #0
 800cd44:	dd71      	ble.n	800ce2a <_strtod_l+0x532>
 800cd46:	f016 030f 	ands.w	r3, r6, #15
 800cd4a:	d00a      	beq.n	800cd62 <_strtod_l+0x46a>
 800cd4c:	494e      	ldr	r1, [pc, #312]	; (800ce88 <_strtod_l+0x590>)
 800cd4e:	4642      	mov	r2, r8
 800cd50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd58:	464b      	mov	r3, r9
 800cd5a:	f7f3 fc29 	bl	80005b0 <__aeabi_dmul>
 800cd5e:	4680      	mov	r8, r0
 800cd60:	4689      	mov	r9, r1
 800cd62:	f036 060f 	bics.w	r6, r6, #15
 800cd66:	d050      	beq.n	800ce0a <_strtod_l+0x512>
 800cd68:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800cd6c:	dd27      	ble.n	800cdbe <_strtod_l+0x4c6>
 800cd6e:	f04f 0b00 	mov.w	fp, #0
 800cd72:	f8cd b010 	str.w	fp, [sp, #16]
 800cd76:	f8cd b020 	str.w	fp, [sp, #32]
 800cd7a:	f8cd b018 	str.w	fp, [sp, #24]
 800cd7e:	2322      	movs	r3, #34	; 0x22
 800cd80:	f04f 0800 	mov.w	r8, #0
 800cd84:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ce90 <_strtod_l+0x598>
 800cd88:	f8ca 3000 	str.w	r3, [sl]
 800cd8c:	9b08      	ldr	r3, [sp, #32]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f43f adf3 	beq.w	800c97a <_strtod_l+0x82>
 800cd94:	4650      	mov	r0, sl
 800cd96:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cd98:	f001 fed4 	bl	800eb44 <_Bfree>
 800cd9c:	4650      	mov	r0, sl
 800cd9e:	9906      	ldr	r1, [sp, #24]
 800cda0:	f001 fed0 	bl	800eb44 <_Bfree>
 800cda4:	4650      	mov	r0, sl
 800cda6:	9904      	ldr	r1, [sp, #16]
 800cda8:	f001 fecc 	bl	800eb44 <_Bfree>
 800cdac:	4650      	mov	r0, sl
 800cdae:	9908      	ldr	r1, [sp, #32]
 800cdb0:	f001 fec8 	bl	800eb44 <_Bfree>
 800cdb4:	4659      	mov	r1, fp
 800cdb6:	4650      	mov	r0, sl
 800cdb8:	f001 fec4 	bl	800eb44 <_Bfree>
 800cdbc:	e5dd      	b.n	800c97a <_strtod_l+0x82>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	4640      	mov	r0, r8
 800cdc2:	4649      	mov	r1, r9
 800cdc4:	461f      	mov	r7, r3
 800cdc6:	1136      	asrs	r6, r6, #4
 800cdc8:	2e01      	cmp	r6, #1
 800cdca:	dc21      	bgt.n	800ce10 <_strtod_l+0x518>
 800cdcc:	b10b      	cbz	r3, 800cdd2 <_strtod_l+0x4da>
 800cdce:	4680      	mov	r8, r0
 800cdd0:	4689      	mov	r9, r1
 800cdd2:	4b2e      	ldr	r3, [pc, #184]	; (800ce8c <_strtod_l+0x594>)
 800cdd4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800cdd8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cddc:	4642      	mov	r2, r8
 800cdde:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cde2:	464b      	mov	r3, r9
 800cde4:	f7f3 fbe4 	bl	80005b0 <__aeabi_dmul>
 800cde8:	4b29      	ldr	r3, [pc, #164]	; (800ce90 <_strtod_l+0x598>)
 800cdea:	460a      	mov	r2, r1
 800cdec:	400b      	ands	r3, r1
 800cdee:	4929      	ldr	r1, [pc, #164]	; (800ce94 <_strtod_l+0x59c>)
 800cdf0:	4680      	mov	r8, r0
 800cdf2:	428b      	cmp	r3, r1
 800cdf4:	d8bb      	bhi.n	800cd6e <_strtod_l+0x476>
 800cdf6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cdfa:	428b      	cmp	r3, r1
 800cdfc:	bf86      	itte	hi
 800cdfe:	f04f 38ff 	movhi.w	r8, #4294967295
 800ce02:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800ce98 <_strtod_l+0x5a0>
 800ce06:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	9305      	str	r3, [sp, #20]
 800ce0e:	e07e      	b.n	800cf0e <_strtod_l+0x616>
 800ce10:	07f2      	lsls	r2, r6, #31
 800ce12:	d507      	bpl.n	800ce24 <_strtod_l+0x52c>
 800ce14:	4b1d      	ldr	r3, [pc, #116]	; (800ce8c <_strtod_l+0x594>)
 800ce16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1e:	f7f3 fbc7 	bl	80005b0 <__aeabi_dmul>
 800ce22:	2301      	movs	r3, #1
 800ce24:	3701      	adds	r7, #1
 800ce26:	1076      	asrs	r6, r6, #1
 800ce28:	e7ce      	b.n	800cdc8 <_strtod_l+0x4d0>
 800ce2a:	d0ee      	beq.n	800ce0a <_strtod_l+0x512>
 800ce2c:	4276      	negs	r6, r6
 800ce2e:	f016 020f 	ands.w	r2, r6, #15
 800ce32:	d00a      	beq.n	800ce4a <_strtod_l+0x552>
 800ce34:	4b14      	ldr	r3, [pc, #80]	; (800ce88 <_strtod_l+0x590>)
 800ce36:	4640      	mov	r0, r8
 800ce38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce3c:	4649      	mov	r1, r9
 800ce3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce42:	f7f3 fcdf 	bl	8000804 <__aeabi_ddiv>
 800ce46:	4680      	mov	r8, r0
 800ce48:	4689      	mov	r9, r1
 800ce4a:	1136      	asrs	r6, r6, #4
 800ce4c:	d0dd      	beq.n	800ce0a <_strtod_l+0x512>
 800ce4e:	2e1f      	cmp	r6, #31
 800ce50:	dd24      	ble.n	800ce9c <_strtod_l+0x5a4>
 800ce52:	f04f 0b00 	mov.w	fp, #0
 800ce56:	f8cd b010 	str.w	fp, [sp, #16]
 800ce5a:	f8cd b020 	str.w	fp, [sp, #32]
 800ce5e:	f8cd b018 	str.w	fp, [sp, #24]
 800ce62:	2322      	movs	r3, #34	; 0x22
 800ce64:	f04f 0800 	mov.w	r8, #0
 800ce68:	f04f 0900 	mov.w	r9, #0
 800ce6c:	f8ca 3000 	str.w	r3, [sl]
 800ce70:	e78c      	b.n	800cd8c <_strtod_l+0x494>
 800ce72:	bf00      	nop
 800ce74:	08010bd9 	.word	0x08010bd9
 800ce78:	08010c1c 	.word	0x08010c1c
 800ce7c:	08010bd1 	.word	0x08010bd1
 800ce80:	08010c80 	.word	0x08010c80
 800ce84:	08010f38 	.word	0x08010f38
 800ce88:	08010e18 	.word	0x08010e18
 800ce8c:	08010df0 	.word	0x08010df0
 800ce90:	7ff00000 	.word	0x7ff00000
 800ce94:	7ca00000 	.word	0x7ca00000
 800ce98:	7fefffff 	.word	0x7fefffff
 800ce9c:	f016 0310 	ands.w	r3, r6, #16
 800cea0:	bf18      	it	ne
 800cea2:	236a      	movne	r3, #106	; 0x6a
 800cea4:	4640      	mov	r0, r8
 800cea6:	9305      	str	r3, [sp, #20]
 800cea8:	4649      	mov	r1, r9
 800ceaa:	2300      	movs	r3, #0
 800ceac:	4fb2      	ldr	r7, [pc, #712]	; (800d178 <_strtod_l+0x880>)
 800ceae:	07f2      	lsls	r2, r6, #31
 800ceb0:	d504      	bpl.n	800cebc <_strtod_l+0x5c4>
 800ceb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ceb6:	f7f3 fb7b 	bl	80005b0 <__aeabi_dmul>
 800ceba:	2301      	movs	r3, #1
 800cebc:	1076      	asrs	r6, r6, #1
 800cebe:	f107 0708 	add.w	r7, r7, #8
 800cec2:	d1f4      	bne.n	800ceae <_strtod_l+0x5b6>
 800cec4:	b10b      	cbz	r3, 800ceca <_strtod_l+0x5d2>
 800cec6:	4680      	mov	r8, r0
 800cec8:	4689      	mov	r9, r1
 800ceca:	9b05      	ldr	r3, [sp, #20]
 800cecc:	b1bb      	cbz	r3, 800cefe <_strtod_l+0x606>
 800cece:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800ced2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	4649      	mov	r1, r9
 800ceda:	dd10      	ble.n	800cefe <_strtod_l+0x606>
 800cedc:	2b1f      	cmp	r3, #31
 800cede:	f340 812b 	ble.w	800d138 <_strtod_l+0x840>
 800cee2:	2b34      	cmp	r3, #52	; 0x34
 800cee4:	bfd8      	it	le
 800cee6:	f04f 32ff 	movle.w	r2, #4294967295
 800ceea:	f04f 0800 	mov.w	r8, #0
 800ceee:	bfcf      	iteee	gt
 800cef0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800cef4:	3b20      	suble	r3, #32
 800cef6:	fa02 f303 	lslle.w	r3, r2, r3
 800cefa:	ea03 0901 	andle.w	r9, r3, r1
 800cefe:	2200      	movs	r2, #0
 800cf00:	2300      	movs	r3, #0
 800cf02:	4640      	mov	r0, r8
 800cf04:	4649      	mov	r1, r9
 800cf06:	f7f3 fdbb 	bl	8000a80 <__aeabi_dcmpeq>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d1a1      	bne.n	800ce52 <_strtod_l+0x55a>
 800cf0e:	9b06      	ldr	r3, [sp, #24]
 800cf10:	465a      	mov	r2, fp
 800cf12:	9300      	str	r3, [sp, #0]
 800cf14:	4650      	mov	r0, sl
 800cf16:	4623      	mov	r3, r4
 800cf18:	9908      	ldr	r1, [sp, #32]
 800cf1a:	f001 fe7f 	bl	800ec1c <__s2b>
 800cf1e:	9008      	str	r0, [sp, #32]
 800cf20:	2800      	cmp	r0, #0
 800cf22:	f43f af24 	beq.w	800cd6e <_strtod_l+0x476>
 800cf26:	9b04      	ldr	r3, [sp, #16]
 800cf28:	f04f 0b00 	mov.w	fp, #0
 800cf2c:	1b5d      	subs	r5, r3, r5
 800cf2e:	9b07      	ldr	r3, [sp, #28]
 800cf30:	f8cd b010 	str.w	fp, [sp, #16]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	bfb4      	ite	lt
 800cf38:	462b      	movlt	r3, r5
 800cf3a:	2300      	movge	r3, #0
 800cf3c:	930e      	str	r3, [sp, #56]	; 0x38
 800cf3e:	9b07      	ldr	r3, [sp, #28]
 800cf40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cf44:	9316      	str	r3, [sp, #88]	; 0x58
 800cf46:	9b08      	ldr	r3, [sp, #32]
 800cf48:	4650      	mov	r0, sl
 800cf4a:	6859      	ldr	r1, [r3, #4]
 800cf4c:	f001 fdba 	bl	800eac4 <_Balloc>
 800cf50:	9006      	str	r0, [sp, #24]
 800cf52:	2800      	cmp	r0, #0
 800cf54:	f43f af13 	beq.w	800cd7e <_strtod_l+0x486>
 800cf58:	9b08      	ldr	r3, [sp, #32]
 800cf5a:	300c      	adds	r0, #12
 800cf5c:	691a      	ldr	r2, [r3, #16]
 800cf5e:	f103 010c 	add.w	r1, r3, #12
 800cf62:	3202      	adds	r2, #2
 800cf64:	0092      	lsls	r2, r2, #2
 800cf66:	f001 fd93 	bl	800ea90 <memcpy>
 800cf6a:	ab1e      	add	r3, sp, #120	; 0x78
 800cf6c:	9301      	str	r3, [sp, #4]
 800cf6e:	ab1d      	add	r3, sp, #116	; 0x74
 800cf70:	9300      	str	r3, [sp, #0]
 800cf72:	4642      	mov	r2, r8
 800cf74:	464b      	mov	r3, r9
 800cf76:	4650      	mov	r0, sl
 800cf78:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800cf7c:	f002 f98c 	bl	800f298 <__d2b>
 800cf80:	901c      	str	r0, [sp, #112]	; 0x70
 800cf82:	2800      	cmp	r0, #0
 800cf84:	f43f aefb 	beq.w	800cd7e <_strtod_l+0x486>
 800cf88:	2101      	movs	r1, #1
 800cf8a:	4650      	mov	r0, sl
 800cf8c:	f001 fede 	bl	800ed4c <__i2b>
 800cf90:	4603      	mov	r3, r0
 800cf92:	9004      	str	r0, [sp, #16]
 800cf94:	2800      	cmp	r0, #0
 800cf96:	f43f aef2 	beq.w	800cd7e <_strtod_l+0x486>
 800cf9a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800cf9c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cf9e:	2d00      	cmp	r5, #0
 800cfa0:	bfab      	itete	ge
 800cfa2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800cfa4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800cfa6:	18ee      	addge	r6, r5, r3
 800cfa8:	1b5c      	sublt	r4, r3, r5
 800cfaa:	9b05      	ldr	r3, [sp, #20]
 800cfac:	bfa8      	it	ge
 800cfae:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800cfb0:	eba5 0503 	sub.w	r5, r5, r3
 800cfb4:	4415      	add	r5, r2
 800cfb6:	4b71      	ldr	r3, [pc, #452]	; (800d17c <_strtod_l+0x884>)
 800cfb8:	f105 35ff 	add.w	r5, r5, #4294967295
 800cfbc:	bfb8      	it	lt
 800cfbe:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800cfc0:	429d      	cmp	r5, r3
 800cfc2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cfc6:	f280 80c9 	bge.w	800d15c <_strtod_l+0x864>
 800cfca:	1b5b      	subs	r3, r3, r5
 800cfcc:	2b1f      	cmp	r3, #31
 800cfce:	f04f 0701 	mov.w	r7, #1
 800cfd2:	eba2 0203 	sub.w	r2, r2, r3
 800cfd6:	f300 80b6 	bgt.w	800d146 <_strtod_l+0x84e>
 800cfda:	2500      	movs	r5, #0
 800cfdc:	fa07 f303 	lsl.w	r3, r7, r3
 800cfe0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cfe2:	18b7      	adds	r7, r6, r2
 800cfe4:	9b05      	ldr	r3, [sp, #20]
 800cfe6:	42be      	cmp	r6, r7
 800cfe8:	4414      	add	r4, r2
 800cfea:	441c      	add	r4, r3
 800cfec:	4633      	mov	r3, r6
 800cfee:	bfa8      	it	ge
 800cff0:	463b      	movge	r3, r7
 800cff2:	42a3      	cmp	r3, r4
 800cff4:	bfa8      	it	ge
 800cff6:	4623      	movge	r3, r4
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	bfc2      	ittt	gt
 800cffc:	1aff      	subgt	r7, r7, r3
 800cffe:	1ae4      	subgt	r4, r4, r3
 800d000:	1af6      	subgt	r6, r6, r3
 800d002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d004:	2b00      	cmp	r3, #0
 800d006:	dd17      	ble.n	800d038 <_strtod_l+0x740>
 800d008:	461a      	mov	r2, r3
 800d00a:	4650      	mov	r0, sl
 800d00c:	9904      	ldr	r1, [sp, #16]
 800d00e:	f001 ff57 	bl	800eec0 <__pow5mult>
 800d012:	9004      	str	r0, [sp, #16]
 800d014:	2800      	cmp	r0, #0
 800d016:	f43f aeb2 	beq.w	800cd7e <_strtod_l+0x486>
 800d01a:	4601      	mov	r1, r0
 800d01c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d01e:	4650      	mov	r0, sl
 800d020:	f001 feaa 	bl	800ed78 <__multiply>
 800d024:	9009      	str	r0, [sp, #36]	; 0x24
 800d026:	2800      	cmp	r0, #0
 800d028:	f43f aea9 	beq.w	800cd7e <_strtod_l+0x486>
 800d02c:	4650      	mov	r0, sl
 800d02e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d030:	f001 fd88 	bl	800eb44 <_Bfree>
 800d034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d036:	931c      	str	r3, [sp, #112]	; 0x70
 800d038:	2f00      	cmp	r7, #0
 800d03a:	f300 8093 	bgt.w	800d164 <_strtod_l+0x86c>
 800d03e:	9b07      	ldr	r3, [sp, #28]
 800d040:	2b00      	cmp	r3, #0
 800d042:	dd08      	ble.n	800d056 <_strtod_l+0x75e>
 800d044:	4650      	mov	r0, sl
 800d046:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d048:	9906      	ldr	r1, [sp, #24]
 800d04a:	f001 ff39 	bl	800eec0 <__pow5mult>
 800d04e:	9006      	str	r0, [sp, #24]
 800d050:	2800      	cmp	r0, #0
 800d052:	f43f ae94 	beq.w	800cd7e <_strtod_l+0x486>
 800d056:	2c00      	cmp	r4, #0
 800d058:	dd08      	ble.n	800d06c <_strtod_l+0x774>
 800d05a:	4622      	mov	r2, r4
 800d05c:	4650      	mov	r0, sl
 800d05e:	9906      	ldr	r1, [sp, #24]
 800d060:	f001 ff88 	bl	800ef74 <__lshift>
 800d064:	9006      	str	r0, [sp, #24]
 800d066:	2800      	cmp	r0, #0
 800d068:	f43f ae89 	beq.w	800cd7e <_strtod_l+0x486>
 800d06c:	2e00      	cmp	r6, #0
 800d06e:	dd08      	ble.n	800d082 <_strtod_l+0x78a>
 800d070:	4632      	mov	r2, r6
 800d072:	4650      	mov	r0, sl
 800d074:	9904      	ldr	r1, [sp, #16]
 800d076:	f001 ff7d 	bl	800ef74 <__lshift>
 800d07a:	9004      	str	r0, [sp, #16]
 800d07c:	2800      	cmp	r0, #0
 800d07e:	f43f ae7e 	beq.w	800cd7e <_strtod_l+0x486>
 800d082:	4650      	mov	r0, sl
 800d084:	9a06      	ldr	r2, [sp, #24]
 800d086:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d088:	f001 fffc 	bl	800f084 <__mdiff>
 800d08c:	4683      	mov	fp, r0
 800d08e:	2800      	cmp	r0, #0
 800d090:	f43f ae75 	beq.w	800cd7e <_strtod_l+0x486>
 800d094:	2400      	movs	r4, #0
 800d096:	68c3      	ldr	r3, [r0, #12]
 800d098:	9904      	ldr	r1, [sp, #16]
 800d09a:	60c4      	str	r4, [r0, #12]
 800d09c:	930d      	str	r3, [sp, #52]	; 0x34
 800d09e:	f001 ffd5 	bl	800f04c <__mcmp>
 800d0a2:	42a0      	cmp	r0, r4
 800d0a4:	da70      	bge.n	800d188 <_strtod_l+0x890>
 800d0a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0a8:	ea53 0308 	orrs.w	r3, r3, r8
 800d0ac:	f040 8096 	bne.w	800d1dc <_strtod_l+0x8e4>
 800d0b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f040 8091 	bne.w	800d1dc <_strtod_l+0x8e4>
 800d0ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d0be:	0d1b      	lsrs	r3, r3, #20
 800d0c0:	051b      	lsls	r3, r3, #20
 800d0c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d0c6:	f240 8089 	bls.w	800d1dc <_strtod_l+0x8e4>
 800d0ca:	f8db 3014 	ldr.w	r3, [fp, #20]
 800d0ce:	b923      	cbnz	r3, 800d0da <_strtod_l+0x7e2>
 800d0d0:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	f340 8081 	ble.w	800d1dc <_strtod_l+0x8e4>
 800d0da:	4659      	mov	r1, fp
 800d0dc:	2201      	movs	r2, #1
 800d0de:	4650      	mov	r0, sl
 800d0e0:	f001 ff48 	bl	800ef74 <__lshift>
 800d0e4:	9904      	ldr	r1, [sp, #16]
 800d0e6:	4683      	mov	fp, r0
 800d0e8:	f001 ffb0 	bl	800f04c <__mcmp>
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	dd75      	ble.n	800d1dc <_strtod_l+0x8e4>
 800d0f0:	9905      	ldr	r1, [sp, #20]
 800d0f2:	464b      	mov	r3, r9
 800d0f4:	4a22      	ldr	r2, [pc, #136]	; (800d180 <_strtod_l+0x888>)
 800d0f6:	2900      	cmp	r1, #0
 800d0f8:	f000 8091 	beq.w	800d21e <_strtod_l+0x926>
 800d0fc:	ea02 0109 	and.w	r1, r2, r9
 800d100:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d104:	f300 808b 	bgt.w	800d21e <_strtod_l+0x926>
 800d108:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d10c:	f77f aea9 	ble.w	800ce62 <_strtod_l+0x56a>
 800d110:	2300      	movs	r3, #0
 800d112:	4a1c      	ldr	r2, [pc, #112]	; (800d184 <_strtod_l+0x88c>)
 800d114:	4640      	mov	r0, r8
 800d116:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800d11a:	4649      	mov	r1, r9
 800d11c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d120:	f7f3 fa46 	bl	80005b0 <__aeabi_dmul>
 800d124:	460b      	mov	r3, r1
 800d126:	4303      	orrs	r3, r0
 800d128:	bf08      	it	eq
 800d12a:	2322      	moveq	r3, #34	; 0x22
 800d12c:	4680      	mov	r8, r0
 800d12e:	4689      	mov	r9, r1
 800d130:	bf08      	it	eq
 800d132:	f8ca 3000 	streq.w	r3, [sl]
 800d136:	e62d      	b.n	800cd94 <_strtod_l+0x49c>
 800d138:	f04f 32ff 	mov.w	r2, #4294967295
 800d13c:	fa02 f303 	lsl.w	r3, r2, r3
 800d140:	ea03 0808 	and.w	r8, r3, r8
 800d144:	e6db      	b.n	800cefe <_strtod_l+0x606>
 800d146:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800d14a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800d14e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800d152:	35e2      	adds	r5, #226	; 0xe2
 800d154:	fa07 f505 	lsl.w	r5, r7, r5
 800d158:	970f      	str	r7, [sp, #60]	; 0x3c
 800d15a:	e742      	b.n	800cfe2 <_strtod_l+0x6ea>
 800d15c:	2301      	movs	r3, #1
 800d15e:	2500      	movs	r5, #0
 800d160:	930f      	str	r3, [sp, #60]	; 0x3c
 800d162:	e73e      	b.n	800cfe2 <_strtod_l+0x6ea>
 800d164:	463a      	mov	r2, r7
 800d166:	4650      	mov	r0, sl
 800d168:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d16a:	f001 ff03 	bl	800ef74 <__lshift>
 800d16e:	901c      	str	r0, [sp, #112]	; 0x70
 800d170:	2800      	cmp	r0, #0
 800d172:	f47f af64 	bne.w	800d03e <_strtod_l+0x746>
 800d176:	e602      	b.n	800cd7e <_strtod_l+0x486>
 800d178:	08010c30 	.word	0x08010c30
 800d17c:	fffffc02 	.word	0xfffffc02
 800d180:	7ff00000 	.word	0x7ff00000
 800d184:	39500000 	.word	0x39500000
 800d188:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d18c:	d166      	bne.n	800d25c <_strtod_l+0x964>
 800d18e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d190:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d194:	b35a      	cbz	r2, 800d1ee <_strtod_l+0x8f6>
 800d196:	4a9c      	ldr	r2, [pc, #624]	; (800d408 <_strtod_l+0xb10>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d12c      	bne.n	800d1f6 <_strtod_l+0x8fe>
 800d19c:	9b05      	ldr	r3, [sp, #20]
 800d19e:	4640      	mov	r0, r8
 800d1a0:	b303      	cbz	r3, 800d1e4 <_strtod_l+0x8ec>
 800d1a2:	464b      	mov	r3, r9
 800d1a4:	4a99      	ldr	r2, [pc, #612]	; (800d40c <_strtod_l+0xb14>)
 800d1a6:	f04f 31ff 	mov.w	r1, #4294967295
 800d1aa:	401a      	ands	r2, r3
 800d1ac:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d1b0:	d81b      	bhi.n	800d1ea <_strtod_l+0x8f2>
 800d1b2:	0d12      	lsrs	r2, r2, #20
 800d1b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d1b8:	fa01 f303 	lsl.w	r3, r1, r3
 800d1bc:	4298      	cmp	r0, r3
 800d1be:	d11a      	bne.n	800d1f6 <_strtod_l+0x8fe>
 800d1c0:	4b93      	ldr	r3, [pc, #588]	; (800d410 <_strtod_l+0xb18>)
 800d1c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d102      	bne.n	800d1ce <_strtod_l+0x8d6>
 800d1c8:	3001      	adds	r0, #1
 800d1ca:	f43f add8 	beq.w	800cd7e <_strtod_l+0x486>
 800d1ce:	f04f 0800 	mov.w	r8, #0
 800d1d2:	4b8e      	ldr	r3, [pc, #568]	; (800d40c <_strtod_l+0xb14>)
 800d1d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1d6:	401a      	ands	r2, r3
 800d1d8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800d1dc:	9b05      	ldr	r3, [sp, #20]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d196      	bne.n	800d110 <_strtod_l+0x818>
 800d1e2:	e5d7      	b.n	800cd94 <_strtod_l+0x49c>
 800d1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d1e8:	e7e8      	b.n	800d1bc <_strtod_l+0x8c4>
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	e7e6      	b.n	800d1bc <_strtod_l+0x8c4>
 800d1ee:	ea53 0308 	orrs.w	r3, r3, r8
 800d1f2:	f43f af7d 	beq.w	800d0f0 <_strtod_l+0x7f8>
 800d1f6:	b1e5      	cbz	r5, 800d232 <_strtod_l+0x93a>
 800d1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1fa:	421d      	tst	r5, r3
 800d1fc:	d0ee      	beq.n	800d1dc <_strtod_l+0x8e4>
 800d1fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d200:	4640      	mov	r0, r8
 800d202:	4649      	mov	r1, r9
 800d204:	9a05      	ldr	r2, [sp, #20]
 800d206:	b1c3      	cbz	r3, 800d23a <_strtod_l+0x942>
 800d208:	f7ff fb52 	bl	800c8b0 <sulp>
 800d20c:	4602      	mov	r2, r0
 800d20e:	460b      	mov	r3, r1
 800d210:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d214:	f7f3 f816 	bl	8000244 <__adddf3>
 800d218:	4680      	mov	r8, r0
 800d21a:	4689      	mov	r9, r1
 800d21c:	e7de      	b.n	800d1dc <_strtod_l+0x8e4>
 800d21e:	4013      	ands	r3, r2
 800d220:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d224:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d228:	f04f 38ff 	mov.w	r8, #4294967295
 800d22c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d230:	e7d4      	b.n	800d1dc <_strtod_l+0x8e4>
 800d232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d234:	ea13 0f08 	tst.w	r3, r8
 800d238:	e7e0      	b.n	800d1fc <_strtod_l+0x904>
 800d23a:	f7ff fb39 	bl	800c8b0 <sulp>
 800d23e:	4602      	mov	r2, r0
 800d240:	460b      	mov	r3, r1
 800d242:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d246:	f7f2 fffb 	bl	8000240 <__aeabi_dsub>
 800d24a:	2200      	movs	r2, #0
 800d24c:	2300      	movs	r3, #0
 800d24e:	4680      	mov	r8, r0
 800d250:	4689      	mov	r9, r1
 800d252:	f7f3 fc15 	bl	8000a80 <__aeabi_dcmpeq>
 800d256:	2800      	cmp	r0, #0
 800d258:	d0c0      	beq.n	800d1dc <_strtod_l+0x8e4>
 800d25a:	e602      	b.n	800ce62 <_strtod_l+0x56a>
 800d25c:	4658      	mov	r0, fp
 800d25e:	9904      	ldr	r1, [sp, #16]
 800d260:	f002 f876 	bl	800f350 <__ratio>
 800d264:	2200      	movs	r2, #0
 800d266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d26a:	4606      	mov	r6, r0
 800d26c:	460f      	mov	r7, r1
 800d26e:	f7f3 fc1b 	bl	8000aa8 <__aeabi_dcmple>
 800d272:	2800      	cmp	r0, #0
 800d274:	d075      	beq.n	800d362 <_strtod_l+0xa6a>
 800d276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d047      	beq.n	800d30c <_strtod_l+0xa14>
 800d27c:	2600      	movs	r6, #0
 800d27e:	4f65      	ldr	r7, [pc, #404]	; (800d414 <_strtod_l+0xb1c>)
 800d280:	4d64      	ldr	r5, [pc, #400]	; (800d414 <_strtod_l+0xb1c>)
 800d282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d288:	0d1b      	lsrs	r3, r3, #20
 800d28a:	051b      	lsls	r3, r3, #20
 800d28c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d28e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d290:	4b61      	ldr	r3, [pc, #388]	; (800d418 <_strtod_l+0xb20>)
 800d292:	429a      	cmp	r2, r3
 800d294:	f040 80c8 	bne.w	800d428 <_strtod_l+0xb30>
 800d298:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d29c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800d2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2a2:	4640      	mov	r0, r8
 800d2a4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800d2a8:	4649      	mov	r1, r9
 800d2aa:	f001 ff7b 	bl	800f1a4 <__ulp>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	4630      	mov	r0, r6
 800d2b4:	4639      	mov	r1, r7
 800d2b6:	f7f3 f97b 	bl	80005b0 <__aeabi_dmul>
 800d2ba:	4642      	mov	r2, r8
 800d2bc:	464b      	mov	r3, r9
 800d2be:	f7f2 ffc1 	bl	8000244 <__adddf3>
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	4951      	ldr	r1, [pc, #324]	; (800d40c <_strtod_l+0xb14>)
 800d2c6:	4a55      	ldr	r2, [pc, #340]	; (800d41c <_strtod_l+0xb24>)
 800d2c8:	4019      	ands	r1, r3
 800d2ca:	4291      	cmp	r1, r2
 800d2cc:	4680      	mov	r8, r0
 800d2ce:	d95e      	bls.n	800d38e <_strtod_l+0xa96>
 800d2d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d103      	bne.n	800d2e2 <_strtod_l+0x9ea>
 800d2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2dc:	3301      	adds	r3, #1
 800d2de:	f43f ad4e 	beq.w	800cd7e <_strtod_l+0x486>
 800d2e2:	f04f 38ff 	mov.w	r8, #4294967295
 800d2e6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800d410 <_strtod_l+0xb18>
 800d2ea:	4650      	mov	r0, sl
 800d2ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d2ee:	f001 fc29 	bl	800eb44 <_Bfree>
 800d2f2:	4650      	mov	r0, sl
 800d2f4:	9906      	ldr	r1, [sp, #24]
 800d2f6:	f001 fc25 	bl	800eb44 <_Bfree>
 800d2fa:	4650      	mov	r0, sl
 800d2fc:	9904      	ldr	r1, [sp, #16]
 800d2fe:	f001 fc21 	bl	800eb44 <_Bfree>
 800d302:	4659      	mov	r1, fp
 800d304:	4650      	mov	r0, sl
 800d306:	f001 fc1d 	bl	800eb44 <_Bfree>
 800d30a:	e61c      	b.n	800cf46 <_strtod_l+0x64e>
 800d30c:	f1b8 0f00 	cmp.w	r8, #0
 800d310:	d119      	bne.n	800d346 <_strtod_l+0xa4e>
 800d312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d318:	b9e3      	cbnz	r3, 800d354 <_strtod_l+0xa5c>
 800d31a:	2200      	movs	r2, #0
 800d31c:	4630      	mov	r0, r6
 800d31e:	4639      	mov	r1, r7
 800d320:	4b3c      	ldr	r3, [pc, #240]	; (800d414 <_strtod_l+0xb1c>)
 800d322:	f7f3 fbb7 	bl	8000a94 <__aeabi_dcmplt>
 800d326:	b9c8      	cbnz	r0, 800d35c <_strtod_l+0xa64>
 800d328:	2200      	movs	r2, #0
 800d32a:	4630      	mov	r0, r6
 800d32c:	4639      	mov	r1, r7
 800d32e:	4b3c      	ldr	r3, [pc, #240]	; (800d420 <_strtod_l+0xb28>)
 800d330:	f7f3 f93e 	bl	80005b0 <__aeabi_dmul>
 800d334:	4604      	mov	r4, r0
 800d336:	460d      	mov	r5, r1
 800d338:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800d33c:	9418      	str	r4, [sp, #96]	; 0x60
 800d33e:	9319      	str	r3, [sp, #100]	; 0x64
 800d340:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800d344:	e79d      	b.n	800d282 <_strtod_l+0x98a>
 800d346:	f1b8 0f01 	cmp.w	r8, #1
 800d34a:	d103      	bne.n	800d354 <_strtod_l+0xa5c>
 800d34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f43f ad87 	beq.w	800ce62 <_strtod_l+0x56a>
 800d354:	2600      	movs	r6, #0
 800d356:	2400      	movs	r4, #0
 800d358:	4f32      	ldr	r7, [pc, #200]	; (800d424 <_strtod_l+0xb2c>)
 800d35a:	e791      	b.n	800d280 <_strtod_l+0x988>
 800d35c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d35e:	4d30      	ldr	r5, [pc, #192]	; (800d420 <_strtod_l+0xb28>)
 800d360:	e7ea      	b.n	800d338 <_strtod_l+0xa40>
 800d362:	4b2f      	ldr	r3, [pc, #188]	; (800d420 <_strtod_l+0xb28>)
 800d364:	2200      	movs	r2, #0
 800d366:	4630      	mov	r0, r6
 800d368:	4639      	mov	r1, r7
 800d36a:	f7f3 f921 	bl	80005b0 <__aeabi_dmul>
 800d36e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d370:	4604      	mov	r4, r0
 800d372:	460d      	mov	r5, r1
 800d374:	b933      	cbnz	r3, 800d384 <_strtod_l+0xa8c>
 800d376:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d37a:	9010      	str	r0, [sp, #64]	; 0x40
 800d37c:	9311      	str	r3, [sp, #68]	; 0x44
 800d37e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d382:	e77e      	b.n	800d282 <_strtod_l+0x98a>
 800d384:	4602      	mov	r2, r0
 800d386:	460b      	mov	r3, r1
 800d388:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800d38c:	e7f7      	b.n	800d37e <_strtod_l+0xa86>
 800d38e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d392:	9b05      	ldr	r3, [sp, #20]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1a8      	bne.n	800d2ea <_strtod_l+0x9f2>
 800d398:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d39c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d39e:	0d1b      	lsrs	r3, r3, #20
 800d3a0:	051b      	lsls	r3, r3, #20
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d1a1      	bne.n	800d2ea <_strtod_l+0x9f2>
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	4629      	mov	r1, r5
 800d3aa:	f7f3 ff63 	bl	8001274 <__aeabi_d2lz>
 800d3ae:	f7f3 f8d1 	bl	8000554 <__aeabi_l2d>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	4629      	mov	r1, r5
 800d3ba:	f7f2 ff41 	bl	8000240 <__aeabi_dsub>
 800d3be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d3c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d3c4:	ea43 0308 	orr.w	r3, r3, r8
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	460d      	mov	r5, r1
 800d3ce:	d066      	beq.n	800d49e <_strtod_l+0xba6>
 800d3d0:	a309      	add	r3, pc, #36	; (adr r3, 800d3f8 <_strtod_l+0xb00>)
 800d3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d6:	f7f3 fb5d 	bl	8000a94 <__aeabi_dcmplt>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	f47f acda 	bne.w	800cd94 <_strtod_l+0x49c>
 800d3e0:	a307      	add	r3, pc, #28	; (adr r3, 800d400 <_strtod_l+0xb08>)
 800d3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	4629      	mov	r1, r5
 800d3ea:	f7f3 fb71 	bl	8000ad0 <__aeabi_dcmpgt>
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	f43f af7b 	beq.w	800d2ea <_strtod_l+0x9f2>
 800d3f4:	e4ce      	b.n	800cd94 <_strtod_l+0x49c>
 800d3f6:	bf00      	nop
 800d3f8:	94a03595 	.word	0x94a03595
 800d3fc:	3fdfffff 	.word	0x3fdfffff
 800d400:	35afe535 	.word	0x35afe535
 800d404:	3fe00000 	.word	0x3fe00000
 800d408:	000fffff 	.word	0x000fffff
 800d40c:	7ff00000 	.word	0x7ff00000
 800d410:	7fefffff 	.word	0x7fefffff
 800d414:	3ff00000 	.word	0x3ff00000
 800d418:	7fe00000 	.word	0x7fe00000
 800d41c:	7c9fffff 	.word	0x7c9fffff
 800d420:	3fe00000 	.word	0x3fe00000
 800d424:	bff00000 	.word	0xbff00000
 800d428:	9b05      	ldr	r3, [sp, #20]
 800d42a:	b313      	cbz	r3, 800d472 <_strtod_l+0xb7a>
 800d42c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d42e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d432:	d81e      	bhi.n	800d472 <_strtod_l+0xb7a>
 800d434:	a326      	add	r3, pc, #152	; (adr r3, 800d4d0 <_strtod_l+0xbd8>)
 800d436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43a:	4620      	mov	r0, r4
 800d43c:	4629      	mov	r1, r5
 800d43e:	f7f3 fb33 	bl	8000aa8 <__aeabi_dcmple>
 800d442:	b190      	cbz	r0, 800d46a <_strtod_l+0xb72>
 800d444:	4629      	mov	r1, r5
 800d446:	4620      	mov	r0, r4
 800d448:	f7f3 fb8a 	bl	8000b60 <__aeabi_d2uiz>
 800d44c:	2801      	cmp	r0, #1
 800d44e:	bf38      	it	cc
 800d450:	2001      	movcc	r0, #1
 800d452:	f7f3 f833 	bl	80004bc <__aeabi_ui2d>
 800d456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d458:	4604      	mov	r4, r0
 800d45a:	460d      	mov	r5, r1
 800d45c:	b9d3      	cbnz	r3, 800d494 <_strtod_l+0xb9c>
 800d45e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d462:	9012      	str	r0, [sp, #72]	; 0x48
 800d464:	9313      	str	r3, [sp, #76]	; 0x4c
 800d466:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800d46a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d46c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800d470:	1a9f      	subs	r7, r3, r2
 800d472:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d476:	f001 fe95 	bl	800f1a4 <__ulp>
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	4630      	mov	r0, r6
 800d480:	4639      	mov	r1, r7
 800d482:	f7f3 f895 	bl	80005b0 <__aeabi_dmul>
 800d486:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d48a:	f7f2 fedb 	bl	8000244 <__adddf3>
 800d48e:	4680      	mov	r8, r0
 800d490:	4689      	mov	r9, r1
 800d492:	e77e      	b.n	800d392 <_strtod_l+0xa9a>
 800d494:	4602      	mov	r2, r0
 800d496:	460b      	mov	r3, r1
 800d498:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800d49c:	e7e3      	b.n	800d466 <_strtod_l+0xb6e>
 800d49e:	a30e      	add	r3, pc, #56	; (adr r3, 800d4d8 <_strtod_l+0xbe0>)
 800d4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a4:	f7f3 faf6 	bl	8000a94 <__aeabi_dcmplt>
 800d4a8:	e7a1      	b.n	800d3ee <_strtod_l+0xaf6>
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	930c      	str	r3, [sp, #48]	; 0x30
 800d4ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d4b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d4b2:	6013      	str	r3, [r2, #0]
 800d4b4:	f7ff ba65 	b.w	800c982 <_strtod_l+0x8a>
 800d4b8:	2b65      	cmp	r3, #101	; 0x65
 800d4ba:	f43f ab5c 	beq.w	800cb76 <_strtod_l+0x27e>
 800d4be:	2b45      	cmp	r3, #69	; 0x45
 800d4c0:	f43f ab59 	beq.w	800cb76 <_strtod_l+0x27e>
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	f7ff bb8d 	b.w	800cbe4 <_strtod_l+0x2ec>
 800d4ca:	bf00      	nop
 800d4cc:	f3af 8000 	nop.w
 800d4d0:	ffc00000 	.word	0xffc00000
 800d4d4:	41dfffff 	.word	0x41dfffff
 800d4d8:	94a03595 	.word	0x94a03595
 800d4dc:	3fcfffff 	.word	0x3fcfffff

0800d4e0 <_strtod_r>:
 800d4e0:	4b01      	ldr	r3, [pc, #4]	; (800d4e8 <_strtod_r+0x8>)
 800d4e2:	f7ff ba09 	b.w	800c8f8 <_strtod_l>
 800d4e6:	bf00      	nop
 800d4e8:	200000a8 	.word	0x200000a8

0800d4ec <_strtol_l.isra.0>:
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4f2:	4686      	mov	lr, r0
 800d4f4:	d001      	beq.n	800d4fa <_strtol_l.isra.0+0xe>
 800d4f6:	2b24      	cmp	r3, #36	; 0x24
 800d4f8:	d906      	bls.n	800d508 <_strtol_l.isra.0+0x1c>
 800d4fa:	f7fe fa31 	bl	800b960 <__errno>
 800d4fe:	2316      	movs	r3, #22
 800d500:	6003      	str	r3, [r0, #0]
 800d502:	2000      	movs	r0, #0
 800d504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d508:	468c      	mov	ip, r1
 800d50a:	4e3a      	ldr	r6, [pc, #232]	; (800d5f4 <_strtol_l.isra.0+0x108>)
 800d50c:	4660      	mov	r0, ip
 800d50e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d512:	5da5      	ldrb	r5, [r4, r6]
 800d514:	f015 0508 	ands.w	r5, r5, #8
 800d518:	d1f8      	bne.n	800d50c <_strtol_l.isra.0+0x20>
 800d51a:	2c2d      	cmp	r4, #45	; 0x2d
 800d51c:	d133      	bne.n	800d586 <_strtol_l.isra.0+0x9a>
 800d51e:	f04f 0801 	mov.w	r8, #1
 800d522:	f89c 4000 	ldrb.w	r4, [ip]
 800d526:	f100 0c02 	add.w	ip, r0, #2
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d05d      	beq.n	800d5ea <_strtol_l.isra.0+0xfe>
 800d52e:	2b10      	cmp	r3, #16
 800d530:	d10c      	bne.n	800d54c <_strtol_l.isra.0+0x60>
 800d532:	2c30      	cmp	r4, #48	; 0x30
 800d534:	d10a      	bne.n	800d54c <_strtol_l.isra.0+0x60>
 800d536:	f89c 0000 	ldrb.w	r0, [ip]
 800d53a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d53e:	2858      	cmp	r0, #88	; 0x58
 800d540:	d14e      	bne.n	800d5e0 <_strtol_l.isra.0+0xf4>
 800d542:	2310      	movs	r3, #16
 800d544:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800d548:	f10c 0c02 	add.w	ip, ip, #2
 800d54c:	2500      	movs	r5, #0
 800d54e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800d552:	3f01      	subs	r7, #1
 800d554:	fbb7 f9f3 	udiv	r9, r7, r3
 800d558:	4628      	mov	r0, r5
 800d55a:	fb03 7a19 	mls	sl, r3, r9, r7
 800d55e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800d562:	2e09      	cmp	r6, #9
 800d564:	d818      	bhi.n	800d598 <_strtol_l.isra.0+0xac>
 800d566:	4634      	mov	r4, r6
 800d568:	42a3      	cmp	r3, r4
 800d56a:	dd24      	ble.n	800d5b6 <_strtol_l.isra.0+0xca>
 800d56c:	2d00      	cmp	r5, #0
 800d56e:	db1f      	blt.n	800d5b0 <_strtol_l.isra.0+0xc4>
 800d570:	4581      	cmp	r9, r0
 800d572:	d31d      	bcc.n	800d5b0 <_strtol_l.isra.0+0xc4>
 800d574:	d101      	bne.n	800d57a <_strtol_l.isra.0+0x8e>
 800d576:	45a2      	cmp	sl, r4
 800d578:	db1a      	blt.n	800d5b0 <_strtol_l.isra.0+0xc4>
 800d57a:	2501      	movs	r5, #1
 800d57c:	fb00 4003 	mla	r0, r0, r3, r4
 800d580:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d584:	e7eb      	b.n	800d55e <_strtol_l.isra.0+0x72>
 800d586:	2c2b      	cmp	r4, #43	; 0x2b
 800d588:	bf08      	it	eq
 800d58a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800d58e:	46a8      	mov	r8, r5
 800d590:	bf08      	it	eq
 800d592:	f100 0c02 	addeq.w	ip, r0, #2
 800d596:	e7c8      	b.n	800d52a <_strtol_l.isra.0+0x3e>
 800d598:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800d59c:	2e19      	cmp	r6, #25
 800d59e:	d801      	bhi.n	800d5a4 <_strtol_l.isra.0+0xb8>
 800d5a0:	3c37      	subs	r4, #55	; 0x37
 800d5a2:	e7e1      	b.n	800d568 <_strtol_l.isra.0+0x7c>
 800d5a4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800d5a8:	2e19      	cmp	r6, #25
 800d5aa:	d804      	bhi.n	800d5b6 <_strtol_l.isra.0+0xca>
 800d5ac:	3c57      	subs	r4, #87	; 0x57
 800d5ae:	e7db      	b.n	800d568 <_strtol_l.isra.0+0x7c>
 800d5b0:	f04f 35ff 	mov.w	r5, #4294967295
 800d5b4:	e7e4      	b.n	800d580 <_strtol_l.isra.0+0x94>
 800d5b6:	2d00      	cmp	r5, #0
 800d5b8:	da08      	bge.n	800d5cc <_strtol_l.isra.0+0xe0>
 800d5ba:	2322      	movs	r3, #34	; 0x22
 800d5bc:	4638      	mov	r0, r7
 800d5be:	f8ce 3000 	str.w	r3, [lr]
 800d5c2:	2a00      	cmp	r2, #0
 800d5c4:	d09e      	beq.n	800d504 <_strtol_l.isra.0+0x18>
 800d5c6:	f10c 31ff 	add.w	r1, ip, #4294967295
 800d5ca:	e007      	b.n	800d5dc <_strtol_l.isra.0+0xf0>
 800d5cc:	f1b8 0f00 	cmp.w	r8, #0
 800d5d0:	d000      	beq.n	800d5d4 <_strtol_l.isra.0+0xe8>
 800d5d2:	4240      	negs	r0, r0
 800d5d4:	2a00      	cmp	r2, #0
 800d5d6:	d095      	beq.n	800d504 <_strtol_l.isra.0+0x18>
 800d5d8:	2d00      	cmp	r5, #0
 800d5da:	d1f4      	bne.n	800d5c6 <_strtol_l.isra.0+0xda>
 800d5dc:	6011      	str	r1, [r2, #0]
 800d5de:	e791      	b.n	800d504 <_strtol_l.isra.0+0x18>
 800d5e0:	2430      	movs	r4, #48	; 0x30
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d1b2      	bne.n	800d54c <_strtol_l.isra.0+0x60>
 800d5e6:	2308      	movs	r3, #8
 800d5e8:	e7b0      	b.n	800d54c <_strtol_l.isra.0+0x60>
 800d5ea:	2c30      	cmp	r4, #48	; 0x30
 800d5ec:	d0a3      	beq.n	800d536 <_strtol_l.isra.0+0x4a>
 800d5ee:	230a      	movs	r3, #10
 800d5f0:	e7ac      	b.n	800d54c <_strtol_l.isra.0+0x60>
 800d5f2:	bf00      	nop
 800d5f4:	08010ac5 	.word	0x08010ac5

0800d5f8 <_strtol_r>:
 800d5f8:	f7ff bf78 	b.w	800d4ec <_strtol_l.isra.0>

0800d5fc <__utoa>:
 800d5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5fe:	b08b      	sub	sp, #44	; 0x2c
 800d600:	4605      	mov	r5, r0
 800d602:	460b      	mov	r3, r1
 800d604:	466e      	mov	r6, sp
 800d606:	4c1d      	ldr	r4, [pc, #116]	; (800d67c <__utoa+0x80>)
 800d608:	f104 0c20 	add.w	ip, r4, #32
 800d60c:	4637      	mov	r7, r6
 800d60e:	6820      	ldr	r0, [r4, #0]
 800d610:	6861      	ldr	r1, [r4, #4]
 800d612:	3408      	adds	r4, #8
 800d614:	c703      	stmia	r7!, {r0, r1}
 800d616:	4564      	cmp	r4, ip
 800d618:	463e      	mov	r6, r7
 800d61a:	d1f7      	bne.n	800d60c <__utoa+0x10>
 800d61c:	7921      	ldrb	r1, [r4, #4]
 800d61e:	6820      	ldr	r0, [r4, #0]
 800d620:	7139      	strb	r1, [r7, #4]
 800d622:	1e91      	subs	r1, r2, #2
 800d624:	2922      	cmp	r1, #34	; 0x22
 800d626:	6038      	str	r0, [r7, #0]
 800d628:	f04f 0100 	mov.w	r1, #0
 800d62c:	d904      	bls.n	800d638 <__utoa+0x3c>
 800d62e:	7019      	strb	r1, [r3, #0]
 800d630:	460b      	mov	r3, r1
 800d632:	4618      	mov	r0, r3
 800d634:	b00b      	add	sp, #44	; 0x2c
 800d636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d638:	1e58      	subs	r0, r3, #1
 800d63a:	4684      	mov	ip, r0
 800d63c:	fbb5 f7f2 	udiv	r7, r5, r2
 800d640:	fb02 5617 	mls	r6, r2, r7, r5
 800d644:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800d648:	4476      	add	r6, lr
 800d64a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d64e:	460c      	mov	r4, r1
 800d650:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d654:	462e      	mov	r6, r5
 800d656:	42b2      	cmp	r2, r6
 800d658:	463d      	mov	r5, r7
 800d65a:	f101 0101 	add.w	r1, r1, #1
 800d65e:	d9ed      	bls.n	800d63c <__utoa+0x40>
 800d660:	2200      	movs	r2, #0
 800d662:	545a      	strb	r2, [r3, r1]
 800d664:	1919      	adds	r1, r3, r4
 800d666:	1aa5      	subs	r5, r4, r2
 800d668:	42aa      	cmp	r2, r5
 800d66a:	dae2      	bge.n	800d632 <__utoa+0x36>
 800d66c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d670:	780e      	ldrb	r6, [r1, #0]
 800d672:	3201      	adds	r2, #1
 800d674:	7006      	strb	r6, [r0, #0]
 800d676:	f801 5901 	strb.w	r5, [r1], #-1
 800d67a:	e7f4      	b.n	800d666 <__utoa+0x6a>
 800d67c:	08010c58 	.word	0x08010c58

0800d680 <quorem>:
 800d680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d684:	6903      	ldr	r3, [r0, #16]
 800d686:	690c      	ldr	r4, [r1, #16]
 800d688:	4607      	mov	r7, r0
 800d68a:	42a3      	cmp	r3, r4
 800d68c:	f2c0 8083 	blt.w	800d796 <quorem+0x116>
 800d690:	3c01      	subs	r4, #1
 800d692:	f100 0514 	add.w	r5, r0, #20
 800d696:	f101 0814 	add.w	r8, r1, #20
 800d69a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d69e:	9301      	str	r3, [sp, #4]
 800d6a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d6a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800d6b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d6b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d6b8:	d332      	bcc.n	800d720 <quorem+0xa0>
 800d6ba:	f04f 0e00 	mov.w	lr, #0
 800d6be:	4640      	mov	r0, r8
 800d6c0:	46ac      	mov	ip, r5
 800d6c2:	46f2      	mov	sl, lr
 800d6c4:	f850 2b04 	ldr.w	r2, [r0], #4
 800d6c8:	b293      	uxth	r3, r2
 800d6ca:	fb06 e303 	mla	r3, r6, r3, lr
 800d6ce:	0c12      	lsrs	r2, r2, #16
 800d6d0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d6d4:	fb06 e202 	mla	r2, r6, r2, lr
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	ebaa 0303 	sub.w	r3, sl, r3
 800d6de:	f8dc a000 	ldr.w	sl, [ip]
 800d6e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d6e6:	fa1f fa8a 	uxth.w	sl, sl
 800d6ea:	4453      	add	r3, sl
 800d6ec:	fa1f fa82 	uxth.w	sl, r2
 800d6f0:	f8dc 2000 	ldr.w	r2, [ip]
 800d6f4:	4581      	cmp	r9, r0
 800d6f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d6fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d704:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d708:	f84c 3b04 	str.w	r3, [ip], #4
 800d70c:	d2da      	bcs.n	800d6c4 <quorem+0x44>
 800d70e:	f855 300b 	ldr.w	r3, [r5, fp]
 800d712:	b92b      	cbnz	r3, 800d720 <quorem+0xa0>
 800d714:	9b01      	ldr	r3, [sp, #4]
 800d716:	3b04      	subs	r3, #4
 800d718:	429d      	cmp	r5, r3
 800d71a:	461a      	mov	r2, r3
 800d71c:	d32f      	bcc.n	800d77e <quorem+0xfe>
 800d71e:	613c      	str	r4, [r7, #16]
 800d720:	4638      	mov	r0, r7
 800d722:	f001 fc93 	bl	800f04c <__mcmp>
 800d726:	2800      	cmp	r0, #0
 800d728:	db25      	blt.n	800d776 <quorem+0xf6>
 800d72a:	4628      	mov	r0, r5
 800d72c:	f04f 0c00 	mov.w	ip, #0
 800d730:	3601      	adds	r6, #1
 800d732:	f858 1b04 	ldr.w	r1, [r8], #4
 800d736:	f8d0 e000 	ldr.w	lr, [r0]
 800d73a:	b28b      	uxth	r3, r1
 800d73c:	ebac 0303 	sub.w	r3, ip, r3
 800d740:	fa1f f28e 	uxth.w	r2, lr
 800d744:	4413      	add	r3, r2
 800d746:	0c0a      	lsrs	r2, r1, #16
 800d748:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d74c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d750:	b29b      	uxth	r3, r3
 800d752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d756:	45c1      	cmp	r9, r8
 800d758:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d75c:	f840 3b04 	str.w	r3, [r0], #4
 800d760:	d2e7      	bcs.n	800d732 <quorem+0xb2>
 800d762:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d766:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d76a:	b922      	cbnz	r2, 800d776 <quorem+0xf6>
 800d76c:	3b04      	subs	r3, #4
 800d76e:	429d      	cmp	r5, r3
 800d770:	461a      	mov	r2, r3
 800d772:	d30a      	bcc.n	800d78a <quorem+0x10a>
 800d774:	613c      	str	r4, [r7, #16]
 800d776:	4630      	mov	r0, r6
 800d778:	b003      	add	sp, #12
 800d77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d77e:	6812      	ldr	r2, [r2, #0]
 800d780:	3b04      	subs	r3, #4
 800d782:	2a00      	cmp	r2, #0
 800d784:	d1cb      	bne.n	800d71e <quorem+0x9e>
 800d786:	3c01      	subs	r4, #1
 800d788:	e7c6      	b.n	800d718 <quorem+0x98>
 800d78a:	6812      	ldr	r2, [r2, #0]
 800d78c:	3b04      	subs	r3, #4
 800d78e:	2a00      	cmp	r2, #0
 800d790:	d1f0      	bne.n	800d774 <quorem+0xf4>
 800d792:	3c01      	subs	r4, #1
 800d794:	e7eb      	b.n	800d76e <quorem+0xee>
 800d796:	2000      	movs	r0, #0
 800d798:	e7ee      	b.n	800d778 <quorem+0xf8>
 800d79a:	0000      	movs	r0, r0
 800d79c:	0000      	movs	r0, r0
	...

0800d7a0 <_dtoa_r>:
 800d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a4:	4616      	mov	r6, r2
 800d7a6:	461f      	mov	r7, r3
 800d7a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d7aa:	b099      	sub	sp, #100	; 0x64
 800d7ac:	4605      	mov	r5, r0
 800d7ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d7b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800d7b6:	b974      	cbnz	r4, 800d7d6 <_dtoa_r+0x36>
 800d7b8:	2010      	movs	r0, #16
 800d7ba:	f7fe f915 	bl	800b9e8 <malloc>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	6268      	str	r0, [r5, #36]	; 0x24
 800d7c2:	b920      	cbnz	r0, 800d7ce <_dtoa_r+0x2e>
 800d7c4:	21ea      	movs	r1, #234	; 0xea
 800d7c6:	4bae      	ldr	r3, [pc, #696]	; (800da80 <_dtoa_r+0x2e0>)
 800d7c8:	48ae      	ldr	r0, [pc, #696]	; (800da84 <_dtoa_r+0x2e4>)
 800d7ca:	f001 ffc3 	bl	800f754 <__assert_func>
 800d7ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7d2:	6004      	str	r4, [r0, #0]
 800d7d4:	60c4      	str	r4, [r0, #12]
 800d7d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d7d8:	6819      	ldr	r1, [r3, #0]
 800d7da:	b151      	cbz	r1, 800d7f2 <_dtoa_r+0x52>
 800d7dc:	685a      	ldr	r2, [r3, #4]
 800d7de:	2301      	movs	r3, #1
 800d7e0:	4093      	lsls	r3, r2
 800d7e2:	604a      	str	r2, [r1, #4]
 800d7e4:	608b      	str	r3, [r1, #8]
 800d7e6:	4628      	mov	r0, r5
 800d7e8:	f001 f9ac 	bl	800eb44 <_Bfree>
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d7f0:	601a      	str	r2, [r3, #0]
 800d7f2:	1e3b      	subs	r3, r7, #0
 800d7f4:	bfaf      	iteee	ge
 800d7f6:	2300      	movge	r3, #0
 800d7f8:	2201      	movlt	r2, #1
 800d7fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d7fe:	9305      	strlt	r3, [sp, #20]
 800d800:	bfa8      	it	ge
 800d802:	f8c8 3000 	strge.w	r3, [r8]
 800d806:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800d80a:	4b9f      	ldr	r3, [pc, #636]	; (800da88 <_dtoa_r+0x2e8>)
 800d80c:	bfb8      	it	lt
 800d80e:	f8c8 2000 	strlt.w	r2, [r8]
 800d812:	ea33 0309 	bics.w	r3, r3, r9
 800d816:	d119      	bne.n	800d84c <_dtoa_r+0xac>
 800d818:	f242 730f 	movw	r3, #9999	; 0x270f
 800d81c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d81e:	6013      	str	r3, [r2, #0]
 800d820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d824:	4333      	orrs	r3, r6
 800d826:	f000 8580 	beq.w	800e32a <_dtoa_r+0xb8a>
 800d82a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d82c:	b953      	cbnz	r3, 800d844 <_dtoa_r+0xa4>
 800d82e:	4b97      	ldr	r3, [pc, #604]	; (800da8c <_dtoa_r+0x2ec>)
 800d830:	e022      	b.n	800d878 <_dtoa_r+0xd8>
 800d832:	4b97      	ldr	r3, [pc, #604]	; (800da90 <_dtoa_r+0x2f0>)
 800d834:	9308      	str	r3, [sp, #32]
 800d836:	3308      	adds	r3, #8
 800d838:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d83a:	6013      	str	r3, [r2, #0]
 800d83c:	9808      	ldr	r0, [sp, #32]
 800d83e:	b019      	add	sp, #100	; 0x64
 800d840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d844:	4b91      	ldr	r3, [pc, #580]	; (800da8c <_dtoa_r+0x2ec>)
 800d846:	9308      	str	r3, [sp, #32]
 800d848:	3303      	adds	r3, #3
 800d84a:	e7f5      	b.n	800d838 <_dtoa_r+0x98>
 800d84c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d850:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800d854:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d858:	2200      	movs	r2, #0
 800d85a:	2300      	movs	r3, #0
 800d85c:	f7f3 f910 	bl	8000a80 <__aeabi_dcmpeq>
 800d860:	4680      	mov	r8, r0
 800d862:	b158      	cbz	r0, 800d87c <_dtoa_r+0xdc>
 800d864:	2301      	movs	r3, #1
 800d866:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d868:	6013      	str	r3, [r2, #0]
 800d86a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f000 8559 	beq.w	800e324 <_dtoa_r+0xb84>
 800d872:	4888      	ldr	r0, [pc, #544]	; (800da94 <_dtoa_r+0x2f4>)
 800d874:	6018      	str	r0, [r3, #0]
 800d876:	1e43      	subs	r3, r0, #1
 800d878:	9308      	str	r3, [sp, #32]
 800d87a:	e7df      	b.n	800d83c <_dtoa_r+0x9c>
 800d87c:	ab16      	add	r3, sp, #88	; 0x58
 800d87e:	9301      	str	r3, [sp, #4]
 800d880:	ab17      	add	r3, sp, #92	; 0x5c
 800d882:	9300      	str	r3, [sp, #0]
 800d884:	4628      	mov	r0, r5
 800d886:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d88a:	f001 fd05 	bl	800f298 <__d2b>
 800d88e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d892:	4682      	mov	sl, r0
 800d894:	2c00      	cmp	r4, #0
 800d896:	d07e      	beq.n	800d996 <_dtoa_r+0x1f6>
 800d898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d89c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d89e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d8a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800d8aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d8ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	4b78      	ldr	r3, [pc, #480]	; (800da98 <_dtoa_r+0x2f8>)
 800d8b6:	f7f2 fcc3 	bl	8000240 <__aeabi_dsub>
 800d8ba:	a36b      	add	r3, pc, #428	; (adr r3, 800da68 <_dtoa_r+0x2c8>)
 800d8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c0:	f7f2 fe76 	bl	80005b0 <__aeabi_dmul>
 800d8c4:	a36a      	add	r3, pc, #424	; (adr r3, 800da70 <_dtoa_r+0x2d0>)
 800d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ca:	f7f2 fcbb 	bl	8000244 <__adddf3>
 800d8ce:	4606      	mov	r6, r0
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	460f      	mov	r7, r1
 800d8d4:	f7f2 fe02 	bl	80004dc <__aeabi_i2d>
 800d8d8:	a367      	add	r3, pc, #412	; (adr r3, 800da78 <_dtoa_r+0x2d8>)
 800d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8de:	f7f2 fe67 	bl	80005b0 <__aeabi_dmul>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	4639      	mov	r1, r7
 800d8ea:	f7f2 fcab 	bl	8000244 <__adddf3>
 800d8ee:	4606      	mov	r6, r0
 800d8f0:	460f      	mov	r7, r1
 800d8f2:	f7f3 f90d 	bl	8000b10 <__aeabi_d2iz>
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	4681      	mov	r9, r0
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	4639      	mov	r1, r7
 800d900:	f7f3 f8c8 	bl	8000a94 <__aeabi_dcmplt>
 800d904:	b148      	cbz	r0, 800d91a <_dtoa_r+0x17a>
 800d906:	4648      	mov	r0, r9
 800d908:	f7f2 fde8 	bl	80004dc <__aeabi_i2d>
 800d90c:	4632      	mov	r2, r6
 800d90e:	463b      	mov	r3, r7
 800d910:	f7f3 f8b6 	bl	8000a80 <__aeabi_dcmpeq>
 800d914:	b908      	cbnz	r0, 800d91a <_dtoa_r+0x17a>
 800d916:	f109 39ff 	add.w	r9, r9, #4294967295
 800d91a:	f1b9 0f16 	cmp.w	r9, #22
 800d91e:	d857      	bhi.n	800d9d0 <_dtoa_r+0x230>
 800d920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d924:	4b5d      	ldr	r3, [pc, #372]	; (800da9c <_dtoa_r+0x2fc>)
 800d926:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92e:	f7f3 f8b1 	bl	8000a94 <__aeabi_dcmplt>
 800d932:	2800      	cmp	r0, #0
 800d934:	d04e      	beq.n	800d9d4 <_dtoa_r+0x234>
 800d936:	2300      	movs	r3, #0
 800d938:	f109 39ff 	add.w	r9, r9, #4294967295
 800d93c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d93e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d940:	1b1c      	subs	r4, r3, r4
 800d942:	1e63      	subs	r3, r4, #1
 800d944:	9309      	str	r3, [sp, #36]	; 0x24
 800d946:	bf49      	itett	mi
 800d948:	f1c4 0301 	rsbmi	r3, r4, #1
 800d94c:	2300      	movpl	r3, #0
 800d94e:	9306      	strmi	r3, [sp, #24]
 800d950:	2300      	movmi	r3, #0
 800d952:	bf54      	ite	pl
 800d954:	9306      	strpl	r3, [sp, #24]
 800d956:	9309      	strmi	r3, [sp, #36]	; 0x24
 800d958:	f1b9 0f00 	cmp.w	r9, #0
 800d95c:	db3c      	blt.n	800d9d8 <_dtoa_r+0x238>
 800d95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d960:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d964:	444b      	add	r3, r9
 800d966:	9309      	str	r3, [sp, #36]	; 0x24
 800d968:	2300      	movs	r3, #0
 800d96a:	930a      	str	r3, [sp, #40]	; 0x28
 800d96c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d96e:	2b09      	cmp	r3, #9
 800d970:	d86c      	bhi.n	800da4c <_dtoa_r+0x2ac>
 800d972:	2b05      	cmp	r3, #5
 800d974:	bfc4      	itt	gt
 800d976:	3b04      	subgt	r3, #4
 800d978:	9322      	strgt	r3, [sp, #136]	; 0x88
 800d97a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d97c:	bfc8      	it	gt
 800d97e:	2400      	movgt	r4, #0
 800d980:	f1a3 0302 	sub.w	r3, r3, #2
 800d984:	bfd8      	it	le
 800d986:	2401      	movle	r4, #1
 800d988:	2b03      	cmp	r3, #3
 800d98a:	f200 808b 	bhi.w	800daa4 <_dtoa_r+0x304>
 800d98e:	e8df f003 	tbb	[pc, r3]
 800d992:	4f2d      	.short	0x4f2d
 800d994:	5b4d      	.short	0x5b4d
 800d996:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800d99a:	441c      	add	r4, r3
 800d99c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800d9a0:	2b20      	cmp	r3, #32
 800d9a2:	bfc3      	ittte	gt
 800d9a4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d9a8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800d9ac:	fa09 f303 	lslgt.w	r3, r9, r3
 800d9b0:	f1c3 0320 	rsble	r3, r3, #32
 800d9b4:	bfc6      	itte	gt
 800d9b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d9ba:	4318      	orrgt	r0, r3
 800d9bc:	fa06 f003 	lslle.w	r0, r6, r3
 800d9c0:	f7f2 fd7c 	bl	80004bc <__aeabi_ui2d>
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d9ca:	3c01      	subs	r4, #1
 800d9cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d9ce:	e770      	b.n	800d8b2 <_dtoa_r+0x112>
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	e7b3      	b.n	800d93c <_dtoa_r+0x19c>
 800d9d4:	900f      	str	r0, [sp, #60]	; 0x3c
 800d9d6:	e7b2      	b.n	800d93e <_dtoa_r+0x19e>
 800d9d8:	9b06      	ldr	r3, [sp, #24]
 800d9da:	eba3 0309 	sub.w	r3, r3, r9
 800d9de:	9306      	str	r3, [sp, #24]
 800d9e0:	f1c9 0300 	rsb	r3, r9, #0
 800d9e4:	930a      	str	r3, [sp, #40]	; 0x28
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	930e      	str	r3, [sp, #56]	; 0x38
 800d9ea:	e7bf      	b.n	800d96c <_dtoa_r+0x1cc>
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800d9f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	dc59      	bgt.n	800daaa <_dtoa_r+0x30a>
 800d9f6:	f04f 0b01 	mov.w	fp, #1
 800d9fa:	465b      	mov	r3, fp
 800d9fc:	f8cd b008 	str.w	fp, [sp, #8]
 800da00:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800da04:	2200      	movs	r2, #0
 800da06:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800da08:	6042      	str	r2, [r0, #4]
 800da0a:	2204      	movs	r2, #4
 800da0c:	f102 0614 	add.w	r6, r2, #20
 800da10:	429e      	cmp	r6, r3
 800da12:	6841      	ldr	r1, [r0, #4]
 800da14:	d94f      	bls.n	800dab6 <_dtoa_r+0x316>
 800da16:	4628      	mov	r0, r5
 800da18:	f001 f854 	bl	800eac4 <_Balloc>
 800da1c:	9008      	str	r0, [sp, #32]
 800da1e:	2800      	cmp	r0, #0
 800da20:	d14d      	bne.n	800dabe <_dtoa_r+0x31e>
 800da22:	4602      	mov	r2, r0
 800da24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800da28:	4b1d      	ldr	r3, [pc, #116]	; (800daa0 <_dtoa_r+0x300>)
 800da2a:	e6cd      	b.n	800d7c8 <_dtoa_r+0x28>
 800da2c:	2301      	movs	r3, #1
 800da2e:	e7de      	b.n	800d9ee <_dtoa_r+0x24e>
 800da30:	2300      	movs	r3, #0
 800da32:	930b      	str	r3, [sp, #44]	; 0x2c
 800da34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800da36:	eb09 0b03 	add.w	fp, r9, r3
 800da3a:	f10b 0301 	add.w	r3, fp, #1
 800da3e:	2b01      	cmp	r3, #1
 800da40:	9302      	str	r3, [sp, #8]
 800da42:	bfb8      	it	lt
 800da44:	2301      	movlt	r3, #1
 800da46:	e7dd      	b.n	800da04 <_dtoa_r+0x264>
 800da48:	2301      	movs	r3, #1
 800da4a:	e7f2      	b.n	800da32 <_dtoa_r+0x292>
 800da4c:	2401      	movs	r4, #1
 800da4e:	2300      	movs	r3, #0
 800da50:	940b      	str	r4, [sp, #44]	; 0x2c
 800da52:	9322      	str	r3, [sp, #136]	; 0x88
 800da54:	f04f 3bff 	mov.w	fp, #4294967295
 800da58:	2200      	movs	r2, #0
 800da5a:	2312      	movs	r3, #18
 800da5c:	f8cd b008 	str.w	fp, [sp, #8]
 800da60:	9223      	str	r2, [sp, #140]	; 0x8c
 800da62:	e7cf      	b.n	800da04 <_dtoa_r+0x264>
 800da64:	f3af 8000 	nop.w
 800da68:	636f4361 	.word	0x636f4361
 800da6c:	3fd287a7 	.word	0x3fd287a7
 800da70:	8b60c8b3 	.word	0x8b60c8b3
 800da74:	3fc68a28 	.word	0x3fc68a28
 800da78:	509f79fb 	.word	0x509f79fb
 800da7c:	3fd34413 	.word	0x3fd34413
 800da80:	08010c8a 	.word	0x08010c8a
 800da84:	08010ca1 	.word	0x08010ca1
 800da88:	7ff00000 	.word	0x7ff00000
 800da8c:	08010c86 	.word	0x08010c86
 800da90:	08010c7d 	.word	0x08010c7d
 800da94:	08010bdd 	.word	0x08010bdd
 800da98:	3ff80000 	.word	0x3ff80000
 800da9c:	08010e18 	.word	0x08010e18
 800daa0:	08010d00 	.word	0x08010d00
 800daa4:	2301      	movs	r3, #1
 800daa6:	930b      	str	r3, [sp, #44]	; 0x2c
 800daa8:	e7d4      	b.n	800da54 <_dtoa_r+0x2b4>
 800daaa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800daae:	465b      	mov	r3, fp
 800dab0:	f8cd b008 	str.w	fp, [sp, #8]
 800dab4:	e7a6      	b.n	800da04 <_dtoa_r+0x264>
 800dab6:	3101      	adds	r1, #1
 800dab8:	6041      	str	r1, [r0, #4]
 800daba:	0052      	lsls	r2, r2, #1
 800dabc:	e7a6      	b.n	800da0c <_dtoa_r+0x26c>
 800dabe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dac0:	9a08      	ldr	r2, [sp, #32]
 800dac2:	601a      	str	r2, [r3, #0]
 800dac4:	9b02      	ldr	r3, [sp, #8]
 800dac6:	2b0e      	cmp	r3, #14
 800dac8:	f200 80a8 	bhi.w	800dc1c <_dtoa_r+0x47c>
 800dacc:	2c00      	cmp	r4, #0
 800dace:	f000 80a5 	beq.w	800dc1c <_dtoa_r+0x47c>
 800dad2:	f1b9 0f00 	cmp.w	r9, #0
 800dad6:	dd34      	ble.n	800db42 <_dtoa_r+0x3a2>
 800dad8:	4a9a      	ldr	r2, [pc, #616]	; (800dd44 <_dtoa_r+0x5a4>)
 800dada:	f009 030f 	and.w	r3, r9, #15
 800dade:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dae2:	f419 7f80 	tst.w	r9, #256	; 0x100
 800dae6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800daea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800daee:	ea4f 1429 	mov.w	r4, r9, asr #4
 800daf2:	d016      	beq.n	800db22 <_dtoa_r+0x382>
 800daf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800daf8:	4b93      	ldr	r3, [pc, #588]	; (800dd48 <_dtoa_r+0x5a8>)
 800dafa:	2703      	movs	r7, #3
 800dafc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800db00:	f7f2 fe80 	bl	8000804 <__aeabi_ddiv>
 800db04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db08:	f004 040f 	and.w	r4, r4, #15
 800db0c:	4e8e      	ldr	r6, [pc, #568]	; (800dd48 <_dtoa_r+0x5a8>)
 800db0e:	b954      	cbnz	r4, 800db26 <_dtoa_r+0x386>
 800db10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800db14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db18:	f7f2 fe74 	bl	8000804 <__aeabi_ddiv>
 800db1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db20:	e029      	b.n	800db76 <_dtoa_r+0x3d6>
 800db22:	2702      	movs	r7, #2
 800db24:	e7f2      	b.n	800db0c <_dtoa_r+0x36c>
 800db26:	07e1      	lsls	r1, r4, #31
 800db28:	d508      	bpl.n	800db3c <_dtoa_r+0x39c>
 800db2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800db2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800db32:	f7f2 fd3d 	bl	80005b0 <__aeabi_dmul>
 800db36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800db3a:	3701      	adds	r7, #1
 800db3c:	1064      	asrs	r4, r4, #1
 800db3e:	3608      	adds	r6, #8
 800db40:	e7e5      	b.n	800db0e <_dtoa_r+0x36e>
 800db42:	f000 80a5 	beq.w	800dc90 <_dtoa_r+0x4f0>
 800db46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db4a:	f1c9 0400 	rsb	r4, r9, #0
 800db4e:	4b7d      	ldr	r3, [pc, #500]	; (800dd44 <_dtoa_r+0x5a4>)
 800db50:	f004 020f 	and.w	r2, r4, #15
 800db54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5c:	f7f2 fd28 	bl	80005b0 <__aeabi_dmul>
 800db60:	2702      	movs	r7, #2
 800db62:	2300      	movs	r3, #0
 800db64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db68:	4e77      	ldr	r6, [pc, #476]	; (800dd48 <_dtoa_r+0x5a8>)
 800db6a:	1124      	asrs	r4, r4, #4
 800db6c:	2c00      	cmp	r4, #0
 800db6e:	f040 8084 	bne.w	800dc7a <_dtoa_r+0x4da>
 800db72:	2b00      	cmp	r3, #0
 800db74:	d1d2      	bne.n	800db1c <_dtoa_r+0x37c>
 800db76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f000 808b 	beq.w	800dc94 <_dtoa_r+0x4f4>
 800db7e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800db82:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800db86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800db8a:	2200      	movs	r2, #0
 800db8c:	4b6f      	ldr	r3, [pc, #444]	; (800dd4c <_dtoa_r+0x5ac>)
 800db8e:	f7f2 ff81 	bl	8000a94 <__aeabi_dcmplt>
 800db92:	2800      	cmp	r0, #0
 800db94:	d07e      	beq.n	800dc94 <_dtoa_r+0x4f4>
 800db96:	9b02      	ldr	r3, [sp, #8]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d07b      	beq.n	800dc94 <_dtoa_r+0x4f4>
 800db9c:	f1bb 0f00 	cmp.w	fp, #0
 800dba0:	dd38      	ble.n	800dc14 <_dtoa_r+0x474>
 800dba2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dba6:	2200      	movs	r2, #0
 800dba8:	4b69      	ldr	r3, [pc, #420]	; (800dd50 <_dtoa_r+0x5b0>)
 800dbaa:	f7f2 fd01 	bl	80005b0 <__aeabi_dmul>
 800dbae:	465c      	mov	r4, fp
 800dbb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dbb4:	f109 38ff 	add.w	r8, r9, #4294967295
 800dbb8:	3701      	adds	r7, #1
 800dbba:	4638      	mov	r0, r7
 800dbbc:	f7f2 fc8e 	bl	80004dc <__aeabi_i2d>
 800dbc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbc4:	f7f2 fcf4 	bl	80005b0 <__aeabi_dmul>
 800dbc8:	2200      	movs	r2, #0
 800dbca:	4b62      	ldr	r3, [pc, #392]	; (800dd54 <_dtoa_r+0x5b4>)
 800dbcc:	f7f2 fb3a 	bl	8000244 <__adddf3>
 800dbd0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800dbd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dbd8:	9611      	str	r6, [sp, #68]	; 0x44
 800dbda:	2c00      	cmp	r4, #0
 800dbdc:	d15d      	bne.n	800dc9a <_dtoa_r+0x4fa>
 800dbde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	4b5c      	ldr	r3, [pc, #368]	; (800dd58 <_dtoa_r+0x5b8>)
 800dbe6:	f7f2 fb2b 	bl	8000240 <__aeabi_dsub>
 800dbea:	4602      	mov	r2, r0
 800dbec:	460b      	mov	r3, r1
 800dbee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dbf2:	4633      	mov	r3, r6
 800dbf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dbf6:	f7f2 ff6b 	bl	8000ad0 <__aeabi_dcmpgt>
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	f040 829e 	bne.w	800e13c <_dtoa_r+0x99c>
 800dc00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dc06:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800dc0a:	f7f2 ff43 	bl	8000a94 <__aeabi_dcmplt>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	f040 8292 	bne.w	800e138 <_dtoa_r+0x998>
 800dc14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800dc18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dc1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	f2c0 8153 	blt.w	800deca <_dtoa_r+0x72a>
 800dc24:	f1b9 0f0e 	cmp.w	r9, #14
 800dc28:	f300 814f 	bgt.w	800deca <_dtoa_r+0x72a>
 800dc2c:	4b45      	ldr	r3, [pc, #276]	; (800dd44 <_dtoa_r+0x5a4>)
 800dc2e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800dc32:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dc36:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800dc3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	f280 80db 	bge.w	800ddf8 <_dtoa_r+0x658>
 800dc42:	9b02      	ldr	r3, [sp, #8]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	f300 80d7 	bgt.w	800ddf8 <_dtoa_r+0x658>
 800dc4a:	f040 8274 	bne.w	800e136 <_dtoa_r+0x996>
 800dc4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc52:	2200      	movs	r2, #0
 800dc54:	4b40      	ldr	r3, [pc, #256]	; (800dd58 <_dtoa_r+0x5b8>)
 800dc56:	f7f2 fcab 	bl	80005b0 <__aeabi_dmul>
 800dc5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc5e:	f7f2 ff2d 	bl	8000abc <__aeabi_dcmpge>
 800dc62:	9c02      	ldr	r4, [sp, #8]
 800dc64:	4626      	mov	r6, r4
 800dc66:	2800      	cmp	r0, #0
 800dc68:	f040 824a 	bne.w	800e100 <_dtoa_r+0x960>
 800dc6c:	2331      	movs	r3, #49	; 0x31
 800dc6e:	9f08      	ldr	r7, [sp, #32]
 800dc70:	f109 0901 	add.w	r9, r9, #1
 800dc74:	f807 3b01 	strb.w	r3, [r7], #1
 800dc78:	e246      	b.n	800e108 <_dtoa_r+0x968>
 800dc7a:	07e2      	lsls	r2, r4, #31
 800dc7c:	d505      	bpl.n	800dc8a <_dtoa_r+0x4ea>
 800dc7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dc82:	f7f2 fc95 	bl	80005b0 <__aeabi_dmul>
 800dc86:	2301      	movs	r3, #1
 800dc88:	3701      	adds	r7, #1
 800dc8a:	1064      	asrs	r4, r4, #1
 800dc8c:	3608      	adds	r6, #8
 800dc8e:	e76d      	b.n	800db6c <_dtoa_r+0x3cc>
 800dc90:	2702      	movs	r7, #2
 800dc92:	e770      	b.n	800db76 <_dtoa_r+0x3d6>
 800dc94:	46c8      	mov	r8, r9
 800dc96:	9c02      	ldr	r4, [sp, #8]
 800dc98:	e78f      	b.n	800dbba <_dtoa_r+0x41a>
 800dc9a:	9908      	ldr	r1, [sp, #32]
 800dc9c:	4b29      	ldr	r3, [pc, #164]	; (800dd44 <_dtoa_r+0x5a4>)
 800dc9e:	4421      	add	r1, r4
 800dca0:	9112      	str	r1, [sp, #72]	; 0x48
 800dca2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dca4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dca8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800dcac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dcb0:	2900      	cmp	r1, #0
 800dcb2:	d055      	beq.n	800dd60 <_dtoa_r+0x5c0>
 800dcb4:	2000      	movs	r0, #0
 800dcb6:	4929      	ldr	r1, [pc, #164]	; (800dd5c <_dtoa_r+0x5bc>)
 800dcb8:	f7f2 fda4 	bl	8000804 <__aeabi_ddiv>
 800dcbc:	463b      	mov	r3, r7
 800dcbe:	4632      	mov	r2, r6
 800dcc0:	f7f2 fabe 	bl	8000240 <__aeabi_dsub>
 800dcc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dcc8:	9f08      	ldr	r7, [sp, #32]
 800dcca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcce:	f7f2 ff1f 	bl	8000b10 <__aeabi_d2iz>
 800dcd2:	4604      	mov	r4, r0
 800dcd4:	f7f2 fc02 	bl	80004dc <__aeabi_i2d>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	460b      	mov	r3, r1
 800dcdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dce0:	f7f2 faae 	bl	8000240 <__aeabi_dsub>
 800dce4:	4602      	mov	r2, r0
 800dce6:	460b      	mov	r3, r1
 800dce8:	3430      	adds	r4, #48	; 0x30
 800dcea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dcee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dcf2:	f807 4b01 	strb.w	r4, [r7], #1
 800dcf6:	f7f2 fecd 	bl	8000a94 <__aeabi_dcmplt>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d174      	bne.n	800dde8 <_dtoa_r+0x648>
 800dcfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd02:	2000      	movs	r0, #0
 800dd04:	4911      	ldr	r1, [pc, #68]	; (800dd4c <_dtoa_r+0x5ac>)
 800dd06:	f7f2 fa9b 	bl	8000240 <__aeabi_dsub>
 800dd0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dd0e:	f7f2 fec1 	bl	8000a94 <__aeabi_dcmplt>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	f040 80b6 	bne.w	800de84 <_dtoa_r+0x6e4>
 800dd18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd1a:	429f      	cmp	r7, r3
 800dd1c:	f43f af7a 	beq.w	800dc14 <_dtoa_r+0x474>
 800dd20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dd24:	2200      	movs	r2, #0
 800dd26:	4b0a      	ldr	r3, [pc, #40]	; (800dd50 <_dtoa_r+0x5b0>)
 800dd28:	f7f2 fc42 	bl	80005b0 <__aeabi_dmul>
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dd32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd36:	4b06      	ldr	r3, [pc, #24]	; (800dd50 <_dtoa_r+0x5b0>)
 800dd38:	f7f2 fc3a 	bl	80005b0 <__aeabi_dmul>
 800dd3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd40:	e7c3      	b.n	800dcca <_dtoa_r+0x52a>
 800dd42:	bf00      	nop
 800dd44:	08010e18 	.word	0x08010e18
 800dd48:	08010df0 	.word	0x08010df0
 800dd4c:	3ff00000 	.word	0x3ff00000
 800dd50:	40240000 	.word	0x40240000
 800dd54:	401c0000 	.word	0x401c0000
 800dd58:	40140000 	.word	0x40140000
 800dd5c:	3fe00000 	.word	0x3fe00000
 800dd60:	4630      	mov	r0, r6
 800dd62:	4639      	mov	r1, r7
 800dd64:	f7f2 fc24 	bl	80005b0 <__aeabi_dmul>
 800dd68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dd6e:	9c08      	ldr	r4, [sp, #32]
 800dd70:	9314      	str	r3, [sp, #80]	; 0x50
 800dd72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd76:	f7f2 fecb 	bl	8000b10 <__aeabi_d2iz>
 800dd7a:	9015      	str	r0, [sp, #84]	; 0x54
 800dd7c:	f7f2 fbae 	bl	80004dc <__aeabi_i2d>
 800dd80:	4602      	mov	r2, r0
 800dd82:	460b      	mov	r3, r1
 800dd84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd88:	f7f2 fa5a 	bl	8000240 <__aeabi_dsub>
 800dd8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd8e:	4606      	mov	r6, r0
 800dd90:	3330      	adds	r3, #48	; 0x30
 800dd92:	f804 3b01 	strb.w	r3, [r4], #1
 800dd96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd98:	460f      	mov	r7, r1
 800dd9a:	429c      	cmp	r4, r3
 800dd9c:	f04f 0200 	mov.w	r2, #0
 800dda0:	d124      	bne.n	800ddec <_dtoa_r+0x64c>
 800dda2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dda6:	4bb3      	ldr	r3, [pc, #716]	; (800e074 <_dtoa_r+0x8d4>)
 800dda8:	f7f2 fa4c 	bl	8000244 <__adddf3>
 800ddac:	4602      	mov	r2, r0
 800ddae:	460b      	mov	r3, r1
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	4639      	mov	r1, r7
 800ddb4:	f7f2 fe8c 	bl	8000ad0 <__aeabi_dcmpgt>
 800ddb8:	2800      	cmp	r0, #0
 800ddba:	d162      	bne.n	800de82 <_dtoa_r+0x6e2>
 800ddbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ddc0:	2000      	movs	r0, #0
 800ddc2:	49ac      	ldr	r1, [pc, #688]	; (800e074 <_dtoa_r+0x8d4>)
 800ddc4:	f7f2 fa3c 	bl	8000240 <__aeabi_dsub>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	460b      	mov	r3, r1
 800ddcc:	4630      	mov	r0, r6
 800ddce:	4639      	mov	r1, r7
 800ddd0:	f7f2 fe60 	bl	8000a94 <__aeabi_dcmplt>
 800ddd4:	2800      	cmp	r0, #0
 800ddd6:	f43f af1d 	beq.w	800dc14 <_dtoa_r+0x474>
 800ddda:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800dddc:	1e7b      	subs	r3, r7, #1
 800ddde:	9314      	str	r3, [sp, #80]	; 0x50
 800dde0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800dde4:	2b30      	cmp	r3, #48	; 0x30
 800dde6:	d0f8      	beq.n	800ddda <_dtoa_r+0x63a>
 800dde8:	46c1      	mov	r9, r8
 800ddea:	e03a      	b.n	800de62 <_dtoa_r+0x6c2>
 800ddec:	4ba2      	ldr	r3, [pc, #648]	; (800e078 <_dtoa_r+0x8d8>)
 800ddee:	f7f2 fbdf 	bl	80005b0 <__aeabi_dmul>
 800ddf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ddf6:	e7bc      	b.n	800dd72 <_dtoa_r+0x5d2>
 800ddf8:	9f08      	ldr	r7, [sp, #32]
 800ddfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ddfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de02:	f7f2 fcff 	bl	8000804 <__aeabi_ddiv>
 800de06:	f7f2 fe83 	bl	8000b10 <__aeabi_d2iz>
 800de0a:	4604      	mov	r4, r0
 800de0c:	f7f2 fb66 	bl	80004dc <__aeabi_i2d>
 800de10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de14:	f7f2 fbcc 	bl	80005b0 <__aeabi_dmul>
 800de18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800de1c:	460b      	mov	r3, r1
 800de1e:	4602      	mov	r2, r0
 800de20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de24:	f7f2 fa0c 	bl	8000240 <__aeabi_dsub>
 800de28:	f807 6b01 	strb.w	r6, [r7], #1
 800de2c:	9e08      	ldr	r6, [sp, #32]
 800de2e:	9b02      	ldr	r3, [sp, #8]
 800de30:	1bbe      	subs	r6, r7, r6
 800de32:	42b3      	cmp	r3, r6
 800de34:	d13a      	bne.n	800deac <_dtoa_r+0x70c>
 800de36:	4602      	mov	r2, r0
 800de38:	460b      	mov	r3, r1
 800de3a:	f7f2 fa03 	bl	8000244 <__adddf3>
 800de3e:	4602      	mov	r2, r0
 800de40:	460b      	mov	r3, r1
 800de42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800de46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de4a:	f7f2 fe41 	bl	8000ad0 <__aeabi_dcmpgt>
 800de4e:	bb58      	cbnz	r0, 800dea8 <_dtoa_r+0x708>
 800de50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de58:	f7f2 fe12 	bl	8000a80 <__aeabi_dcmpeq>
 800de5c:	b108      	cbz	r0, 800de62 <_dtoa_r+0x6c2>
 800de5e:	07e1      	lsls	r1, r4, #31
 800de60:	d422      	bmi.n	800dea8 <_dtoa_r+0x708>
 800de62:	4628      	mov	r0, r5
 800de64:	4651      	mov	r1, sl
 800de66:	f000 fe6d 	bl	800eb44 <_Bfree>
 800de6a:	2300      	movs	r3, #0
 800de6c:	703b      	strb	r3, [r7, #0]
 800de6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800de70:	f109 0001 	add.w	r0, r9, #1
 800de74:	6018      	str	r0, [r3, #0]
 800de76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800de78:	2b00      	cmp	r3, #0
 800de7a:	f43f acdf 	beq.w	800d83c <_dtoa_r+0x9c>
 800de7e:	601f      	str	r7, [r3, #0]
 800de80:	e4dc      	b.n	800d83c <_dtoa_r+0x9c>
 800de82:	4627      	mov	r7, r4
 800de84:	463b      	mov	r3, r7
 800de86:	461f      	mov	r7, r3
 800de88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de8c:	2a39      	cmp	r2, #57	; 0x39
 800de8e:	d107      	bne.n	800dea0 <_dtoa_r+0x700>
 800de90:	9a08      	ldr	r2, [sp, #32]
 800de92:	429a      	cmp	r2, r3
 800de94:	d1f7      	bne.n	800de86 <_dtoa_r+0x6e6>
 800de96:	2230      	movs	r2, #48	; 0x30
 800de98:	9908      	ldr	r1, [sp, #32]
 800de9a:	f108 0801 	add.w	r8, r8, #1
 800de9e:	700a      	strb	r2, [r1, #0]
 800dea0:	781a      	ldrb	r2, [r3, #0]
 800dea2:	3201      	adds	r2, #1
 800dea4:	701a      	strb	r2, [r3, #0]
 800dea6:	e79f      	b.n	800dde8 <_dtoa_r+0x648>
 800dea8:	46c8      	mov	r8, r9
 800deaa:	e7eb      	b.n	800de84 <_dtoa_r+0x6e4>
 800deac:	2200      	movs	r2, #0
 800deae:	4b72      	ldr	r3, [pc, #456]	; (800e078 <_dtoa_r+0x8d8>)
 800deb0:	f7f2 fb7e 	bl	80005b0 <__aeabi_dmul>
 800deb4:	4602      	mov	r2, r0
 800deb6:	460b      	mov	r3, r1
 800deb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800debc:	2200      	movs	r2, #0
 800debe:	2300      	movs	r3, #0
 800dec0:	f7f2 fdde 	bl	8000a80 <__aeabi_dcmpeq>
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d098      	beq.n	800ddfa <_dtoa_r+0x65a>
 800dec8:	e7cb      	b.n	800de62 <_dtoa_r+0x6c2>
 800deca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800decc:	2a00      	cmp	r2, #0
 800dece:	f000 80cd 	beq.w	800e06c <_dtoa_r+0x8cc>
 800ded2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ded4:	2a01      	cmp	r2, #1
 800ded6:	f300 80af 	bgt.w	800e038 <_dtoa_r+0x898>
 800deda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dedc:	2a00      	cmp	r2, #0
 800dede:	f000 80a7 	beq.w	800e030 <_dtoa_r+0x890>
 800dee2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dee6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dee8:	9f06      	ldr	r7, [sp, #24]
 800deea:	9a06      	ldr	r2, [sp, #24]
 800deec:	2101      	movs	r1, #1
 800deee:	441a      	add	r2, r3
 800def0:	9206      	str	r2, [sp, #24]
 800def2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800def4:	4628      	mov	r0, r5
 800def6:	441a      	add	r2, r3
 800def8:	9209      	str	r2, [sp, #36]	; 0x24
 800defa:	f000 ff27 	bl	800ed4c <__i2b>
 800defe:	4606      	mov	r6, r0
 800df00:	2f00      	cmp	r7, #0
 800df02:	dd0c      	ble.n	800df1e <_dtoa_r+0x77e>
 800df04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df06:	2b00      	cmp	r3, #0
 800df08:	dd09      	ble.n	800df1e <_dtoa_r+0x77e>
 800df0a:	42bb      	cmp	r3, r7
 800df0c:	bfa8      	it	ge
 800df0e:	463b      	movge	r3, r7
 800df10:	9a06      	ldr	r2, [sp, #24]
 800df12:	1aff      	subs	r7, r7, r3
 800df14:	1ad2      	subs	r2, r2, r3
 800df16:	9206      	str	r2, [sp, #24]
 800df18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df1a:	1ad3      	subs	r3, r2, r3
 800df1c:	9309      	str	r3, [sp, #36]	; 0x24
 800df1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df20:	b1f3      	cbz	r3, 800df60 <_dtoa_r+0x7c0>
 800df22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df24:	2b00      	cmp	r3, #0
 800df26:	f000 80a9 	beq.w	800e07c <_dtoa_r+0x8dc>
 800df2a:	2c00      	cmp	r4, #0
 800df2c:	dd10      	ble.n	800df50 <_dtoa_r+0x7b0>
 800df2e:	4631      	mov	r1, r6
 800df30:	4622      	mov	r2, r4
 800df32:	4628      	mov	r0, r5
 800df34:	f000 ffc4 	bl	800eec0 <__pow5mult>
 800df38:	4652      	mov	r2, sl
 800df3a:	4601      	mov	r1, r0
 800df3c:	4606      	mov	r6, r0
 800df3e:	4628      	mov	r0, r5
 800df40:	f000 ff1a 	bl	800ed78 <__multiply>
 800df44:	4680      	mov	r8, r0
 800df46:	4651      	mov	r1, sl
 800df48:	4628      	mov	r0, r5
 800df4a:	f000 fdfb 	bl	800eb44 <_Bfree>
 800df4e:	46c2      	mov	sl, r8
 800df50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df52:	1b1a      	subs	r2, r3, r4
 800df54:	d004      	beq.n	800df60 <_dtoa_r+0x7c0>
 800df56:	4651      	mov	r1, sl
 800df58:	4628      	mov	r0, r5
 800df5a:	f000 ffb1 	bl	800eec0 <__pow5mult>
 800df5e:	4682      	mov	sl, r0
 800df60:	2101      	movs	r1, #1
 800df62:	4628      	mov	r0, r5
 800df64:	f000 fef2 	bl	800ed4c <__i2b>
 800df68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df6a:	4604      	mov	r4, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f340 8087 	ble.w	800e080 <_dtoa_r+0x8e0>
 800df72:	461a      	mov	r2, r3
 800df74:	4601      	mov	r1, r0
 800df76:	4628      	mov	r0, r5
 800df78:	f000 ffa2 	bl	800eec0 <__pow5mult>
 800df7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800df7e:	4604      	mov	r4, r0
 800df80:	2b01      	cmp	r3, #1
 800df82:	f340 8080 	ble.w	800e086 <_dtoa_r+0x8e6>
 800df86:	f04f 0800 	mov.w	r8, #0
 800df8a:	6923      	ldr	r3, [r4, #16]
 800df8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800df90:	6918      	ldr	r0, [r3, #16]
 800df92:	f000 fe8d 	bl	800ecb0 <__hi0bits>
 800df96:	f1c0 0020 	rsb	r0, r0, #32
 800df9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df9c:	4418      	add	r0, r3
 800df9e:	f010 001f 	ands.w	r0, r0, #31
 800dfa2:	f000 8092 	beq.w	800e0ca <_dtoa_r+0x92a>
 800dfa6:	f1c0 0320 	rsb	r3, r0, #32
 800dfaa:	2b04      	cmp	r3, #4
 800dfac:	f340 808a 	ble.w	800e0c4 <_dtoa_r+0x924>
 800dfb0:	f1c0 001c 	rsb	r0, r0, #28
 800dfb4:	9b06      	ldr	r3, [sp, #24]
 800dfb6:	4407      	add	r7, r0
 800dfb8:	4403      	add	r3, r0
 800dfba:	9306      	str	r3, [sp, #24]
 800dfbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfbe:	4403      	add	r3, r0
 800dfc0:	9309      	str	r3, [sp, #36]	; 0x24
 800dfc2:	9b06      	ldr	r3, [sp, #24]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	dd05      	ble.n	800dfd4 <_dtoa_r+0x834>
 800dfc8:	4651      	mov	r1, sl
 800dfca:	461a      	mov	r2, r3
 800dfcc:	4628      	mov	r0, r5
 800dfce:	f000 ffd1 	bl	800ef74 <__lshift>
 800dfd2:	4682      	mov	sl, r0
 800dfd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	dd05      	ble.n	800dfe6 <_dtoa_r+0x846>
 800dfda:	4621      	mov	r1, r4
 800dfdc:	461a      	mov	r2, r3
 800dfde:	4628      	mov	r0, r5
 800dfe0:	f000 ffc8 	bl	800ef74 <__lshift>
 800dfe4:	4604      	mov	r4, r0
 800dfe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d070      	beq.n	800e0ce <_dtoa_r+0x92e>
 800dfec:	4621      	mov	r1, r4
 800dfee:	4650      	mov	r0, sl
 800dff0:	f001 f82c 	bl	800f04c <__mcmp>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	da6a      	bge.n	800e0ce <_dtoa_r+0x92e>
 800dff8:	2300      	movs	r3, #0
 800dffa:	4651      	mov	r1, sl
 800dffc:	220a      	movs	r2, #10
 800dffe:	4628      	mov	r0, r5
 800e000:	f000 fdc2 	bl	800eb88 <__multadd>
 800e004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e006:	4682      	mov	sl, r0
 800e008:	f109 39ff 	add.w	r9, r9, #4294967295
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f000 8193 	beq.w	800e338 <_dtoa_r+0xb98>
 800e012:	4631      	mov	r1, r6
 800e014:	2300      	movs	r3, #0
 800e016:	220a      	movs	r2, #10
 800e018:	4628      	mov	r0, r5
 800e01a:	f000 fdb5 	bl	800eb88 <__multadd>
 800e01e:	f1bb 0f00 	cmp.w	fp, #0
 800e022:	4606      	mov	r6, r0
 800e024:	f300 8093 	bgt.w	800e14e <_dtoa_r+0x9ae>
 800e028:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e02a:	2b02      	cmp	r3, #2
 800e02c:	dc57      	bgt.n	800e0de <_dtoa_r+0x93e>
 800e02e:	e08e      	b.n	800e14e <_dtoa_r+0x9ae>
 800e030:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e032:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e036:	e756      	b.n	800dee6 <_dtoa_r+0x746>
 800e038:	9b02      	ldr	r3, [sp, #8]
 800e03a:	1e5c      	subs	r4, r3, #1
 800e03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e03e:	42a3      	cmp	r3, r4
 800e040:	bfb7      	itett	lt
 800e042:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e044:	1b1c      	subge	r4, r3, r4
 800e046:	1ae2      	sublt	r2, r4, r3
 800e048:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e04a:	bfbe      	ittt	lt
 800e04c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800e04e:	189b      	addlt	r3, r3, r2
 800e050:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e052:	9b02      	ldr	r3, [sp, #8]
 800e054:	bfb8      	it	lt
 800e056:	2400      	movlt	r4, #0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	bfbb      	ittet	lt
 800e05c:	9b06      	ldrlt	r3, [sp, #24]
 800e05e:	9a02      	ldrlt	r2, [sp, #8]
 800e060:	9f06      	ldrge	r7, [sp, #24]
 800e062:	1a9f      	sublt	r7, r3, r2
 800e064:	bfac      	ite	ge
 800e066:	9b02      	ldrge	r3, [sp, #8]
 800e068:	2300      	movlt	r3, #0
 800e06a:	e73e      	b.n	800deea <_dtoa_r+0x74a>
 800e06c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e06e:	9f06      	ldr	r7, [sp, #24]
 800e070:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e072:	e745      	b.n	800df00 <_dtoa_r+0x760>
 800e074:	3fe00000 	.word	0x3fe00000
 800e078:	40240000 	.word	0x40240000
 800e07c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e07e:	e76a      	b.n	800df56 <_dtoa_r+0x7b6>
 800e080:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e082:	2b01      	cmp	r3, #1
 800e084:	dc19      	bgt.n	800e0ba <_dtoa_r+0x91a>
 800e086:	9b04      	ldr	r3, [sp, #16]
 800e088:	b9bb      	cbnz	r3, 800e0ba <_dtoa_r+0x91a>
 800e08a:	9b05      	ldr	r3, [sp, #20]
 800e08c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e090:	b99b      	cbnz	r3, 800e0ba <_dtoa_r+0x91a>
 800e092:	9b05      	ldr	r3, [sp, #20]
 800e094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e098:	0d1b      	lsrs	r3, r3, #20
 800e09a:	051b      	lsls	r3, r3, #20
 800e09c:	b183      	cbz	r3, 800e0c0 <_dtoa_r+0x920>
 800e09e:	f04f 0801 	mov.w	r8, #1
 800e0a2:	9b06      	ldr	r3, [sp, #24]
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	9306      	str	r3, [sp, #24]
 800e0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e0ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f47f af6a 	bne.w	800df8a <_dtoa_r+0x7ea>
 800e0b6:	2001      	movs	r0, #1
 800e0b8:	e76f      	b.n	800df9a <_dtoa_r+0x7fa>
 800e0ba:	f04f 0800 	mov.w	r8, #0
 800e0be:	e7f6      	b.n	800e0ae <_dtoa_r+0x90e>
 800e0c0:	4698      	mov	r8, r3
 800e0c2:	e7f4      	b.n	800e0ae <_dtoa_r+0x90e>
 800e0c4:	f43f af7d 	beq.w	800dfc2 <_dtoa_r+0x822>
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	301c      	adds	r0, #28
 800e0cc:	e772      	b.n	800dfb4 <_dtoa_r+0x814>
 800e0ce:	9b02      	ldr	r3, [sp, #8]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	dc36      	bgt.n	800e142 <_dtoa_r+0x9a2>
 800e0d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	dd33      	ble.n	800e142 <_dtoa_r+0x9a2>
 800e0da:	f8dd b008 	ldr.w	fp, [sp, #8]
 800e0de:	f1bb 0f00 	cmp.w	fp, #0
 800e0e2:	d10d      	bne.n	800e100 <_dtoa_r+0x960>
 800e0e4:	4621      	mov	r1, r4
 800e0e6:	465b      	mov	r3, fp
 800e0e8:	2205      	movs	r2, #5
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	f000 fd4c 	bl	800eb88 <__multadd>
 800e0f0:	4601      	mov	r1, r0
 800e0f2:	4604      	mov	r4, r0
 800e0f4:	4650      	mov	r0, sl
 800e0f6:	f000 ffa9 	bl	800f04c <__mcmp>
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	f73f adb6 	bgt.w	800dc6c <_dtoa_r+0x4cc>
 800e100:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e102:	9f08      	ldr	r7, [sp, #32]
 800e104:	ea6f 0903 	mvn.w	r9, r3
 800e108:	f04f 0800 	mov.w	r8, #0
 800e10c:	4621      	mov	r1, r4
 800e10e:	4628      	mov	r0, r5
 800e110:	f000 fd18 	bl	800eb44 <_Bfree>
 800e114:	2e00      	cmp	r6, #0
 800e116:	f43f aea4 	beq.w	800de62 <_dtoa_r+0x6c2>
 800e11a:	f1b8 0f00 	cmp.w	r8, #0
 800e11e:	d005      	beq.n	800e12c <_dtoa_r+0x98c>
 800e120:	45b0      	cmp	r8, r6
 800e122:	d003      	beq.n	800e12c <_dtoa_r+0x98c>
 800e124:	4641      	mov	r1, r8
 800e126:	4628      	mov	r0, r5
 800e128:	f000 fd0c 	bl	800eb44 <_Bfree>
 800e12c:	4631      	mov	r1, r6
 800e12e:	4628      	mov	r0, r5
 800e130:	f000 fd08 	bl	800eb44 <_Bfree>
 800e134:	e695      	b.n	800de62 <_dtoa_r+0x6c2>
 800e136:	2400      	movs	r4, #0
 800e138:	4626      	mov	r6, r4
 800e13a:	e7e1      	b.n	800e100 <_dtoa_r+0x960>
 800e13c:	46c1      	mov	r9, r8
 800e13e:	4626      	mov	r6, r4
 800e140:	e594      	b.n	800dc6c <_dtoa_r+0x4cc>
 800e142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e144:	f8dd b008 	ldr.w	fp, [sp, #8]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	f000 80fc 	beq.w	800e346 <_dtoa_r+0xba6>
 800e14e:	2f00      	cmp	r7, #0
 800e150:	dd05      	ble.n	800e15e <_dtoa_r+0x9be>
 800e152:	4631      	mov	r1, r6
 800e154:	463a      	mov	r2, r7
 800e156:	4628      	mov	r0, r5
 800e158:	f000 ff0c 	bl	800ef74 <__lshift>
 800e15c:	4606      	mov	r6, r0
 800e15e:	f1b8 0f00 	cmp.w	r8, #0
 800e162:	d05c      	beq.n	800e21e <_dtoa_r+0xa7e>
 800e164:	4628      	mov	r0, r5
 800e166:	6871      	ldr	r1, [r6, #4]
 800e168:	f000 fcac 	bl	800eac4 <_Balloc>
 800e16c:	4607      	mov	r7, r0
 800e16e:	b928      	cbnz	r0, 800e17c <_dtoa_r+0x9dc>
 800e170:	4602      	mov	r2, r0
 800e172:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e176:	4b7e      	ldr	r3, [pc, #504]	; (800e370 <_dtoa_r+0xbd0>)
 800e178:	f7ff bb26 	b.w	800d7c8 <_dtoa_r+0x28>
 800e17c:	6932      	ldr	r2, [r6, #16]
 800e17e:	f106 010c 	add.w	r1, r6, #12
 800e182:	3202      	adds	r2, #2
 800e184:	0092      	lsls	r2, r2, #2
 800e186:	300c      	adds	r0, #12
 800e188:	f000 fc82 	bl	800ea90 <memcpy>
 800e18c:	2201      	movs	r2, #1
 800e18e:	4639      	mov	r1, r7
 800e190:	4628      	mov	r0, r5
 800e192:	f000 feef 	bl	800ef74 <__lshift>
 800e196:	46b0      	mov	r8, r6
 800e198:	4606      	mov	r6, r0
 800e19a:	9b08      	ldr	r3, [sp, #32]
 800e19c:	3301      	adds	r3, #1
 800e19e:	9302      	str	r3, [sp, #8]
 800e1a0:	9b08      	ldr	r3, [sp, #32]
 800e1a2:	445b      	add	r3, fp
 800e1a4:	930a      	str	r3, [sp, #40]	; 0x28
 800e1a6:	9b04      	ldr	r3, [sp, #16]
 800e1a8:	f003 0301 	and.w	r3, r3, #1
 800e1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e1ae:	9b02      	ldr	r3, [sp, #8]
 800e1b0:	4621      	mov	r1, r4
 800e1b2:	4650      	mov	r0, sl
 800e1b4:	f103 3bff 	add.w	fp, r3, #4294967295
 800e1b8:	f7ff fa62 	bl	800d680 <quorem>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	4641      	mov	r1, r8
 800e1c0:	3330      	adds	r3, #48	; 0x30
 800e1c2:	9004      	str	r0, [sp, #16]
 800e1c4:	4650      	mov	r0, sl
 800e1c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1c8:	f000 ff40 	bl	800f04c <__mcmp>
 800e1cc:	4632      	mov	r2, r6
 800e1ce:	9006      	str	r0, [sp, #24]
 800e1d0:	4621      	mov	r1, r4
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	f000 ff56 	bl	800f084 <__mdiff>
 800e1d8:	68c2      	ldr	r2, [r0, #12]
 800e1da:	4607      	mov	r7, r0
 800e1dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1de:	bb02      	cbnz	r2, 800e222 <_dtoa_r+0xa82>
 800e1e0:	4601      	mov	r1, r0
 800e1e2:	4650      	mov	r0, sl
 800e1e4:	f000 ff32 	bl	800f04c <__mcmp>
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1ec:	4639      	mov	r1, r7
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800e1f4:	f000 fca6 	bl	800eb44 <_Bfree>
 800e1f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e1fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1fc:	9f02      	ldr	r7, [sp, #8]
 800e1fe:	ea43 0102 	orr.w	r1, r3, r2
 800e202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e204:	430b      	orrs	r3, r1
 800e206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e208:	d10d      	bne.n	800e226 <_dtoa_r+0xa86>
 800e20a:	2b39      	cmp	r3, #57	; 0x39
 800e20c:	d027      	beq.n	800e25e <_dtoa_r+0xabe>
 800e20e:	9a06      	ldr	r2, [sp, #24]
 800e210:	2a00      	cmp	r2, #0
 800e212:	dd01      	ble.n	800e218 <_dtoa_r+0xa78>
 800e214:	9b04      	ldr	r3, [sp, #16]
 800e216:	3331      	adds	r3, #49	; 0x31
 800e218:	f88b 3000 	strb.w	r3, [fp]
 800e21c:	e776      	b.n	800e10c <_dtoa_r+0x96c>
 800e21e:	4630      	mov	r0, r6
 800e220:	e7b9      	b.n	800e196 <_dtoa_r+0x9f6>
 800e222:	2201      	movs	r2, #1
 800e224:	e7e2      	b.n	800e1ec <_dtoa_r+0xa4c>
 800e226:	9906      	ldr	r1, [sp, #24]
 800e228:	2900      	cmp	r1, #0
 800e22a:	db04      	blt.n	800e236 <_dtoa_r+0xa96>
 800e22c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800e22e:	4301      	orrs	r1, r0
 800e230:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e232:	4301      	orrs	r1, r0
 800e234:	d120      	bne.n	800e278 <_dtoa_r+0xad8>
 800e236:	2a00      	cmp	r2, #0
 800e238:	ddee      	ble.n	800e218 <_dtoa_r+0xa78>
 800e23a:	4651      	mov	r1, sl
 800e23c:	2201      	movs	r2, #1
 800e23e:	4628      	mov	r0, r5
 800e240:	9302      	str	r3, [sp, #8]
 800e242:	f000 fe97 	bl	800ef74 <__lshift>
 800e246:	4621      	mov	r1, r4
 800e248:	4682      	mov	sl, r0
 800e24a:	f000 feff 	bl	800f04c <__mcmp>
 800e24e:	2800      	cmp	r0, #0
 800e250:	9b02      	ldr	r3, [sp, #8]
 800e252:	dc02      	bgt.n	800e25a <_dtoa_r+0xaba>
 800e254:	d1e0      	bne.n	800e218 <_dtoa_r+0xa78>
 800e256:	07da      	lsls	r2, r3, #31
 800e258:	d5de      	bpl.n	800e218 <_dtoa_r+0xa78>
 800e25a:	2b39      	cmp	r3, #57	; 0x39
 800e25c:	d1da      	bne.n	800e214 <_dtoa_r+0xa74>
 800e25e:	2339      	movs	r3, #57	; 0x39
 800e260:	f88b 3000 	strb.w	r3, [fp]
 800e264:	463b      	mov	r3, r7
 800e266:	461f      	mov	r7, r3
 800e268:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800e26c:	3b01      	subs	r3, #1
 800e26e:	2a39      	cmp	r2, #57	; 0x39
 800e270:	d050      	beq.n	800e314 <_dtoa_r+0xb74>
 800e272:	3201      	adds	r2, #1
 800e274:	701a      	strb	r2, [r3, #0]
 800e276:	e749      	b.n	800e10c <_dtoa_r+0x96c>
 800e278:	2a00      	cmp	r2, #0
 800e27a:	dd03      	ble.n	800e284 <_dtoa_r+0xae4>
 800e27c:	2b39      	cmp	r3, #57	; 0x39
 800e27e:	d0ee      	beq.n	800e25e <_dtoa_r+0xabe>
 800e280:	3301      	adds	r3, #1
 800e282:	e7c9      	b.n	800e218 <_dtoa_r+0xa78>
 800e284:	9a02      	ldr	r2, [sp, #8]
 800e286:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e288:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e28c:	428a      	cmp	r2, r1
 800e28e:	d02a      	beq.n	800e2e6 <_dtoa_r+0xb46>
 800e290:	4651      	mov	r1, sl
 800e292:	2300      	movs	r3, #0
 800e294:	220a      	movs	r2, #10
 800e296:	4628      	mov	r0, r5
 800e298:	f000 fc76 	bl	800eb88 <__multadd>
 800e29c:	45b0      	cmp	r8, r6
 800e29e:	4682      	mov	sl, r0
 800e2a0:	f04f 0300 	mov.w	r3, #0
 800e2a4:	f04f 020a 	mov.w	r2, #10
 800e2a8:	4641      	mov	r1, r8
 800e2aa:	4628      	mov	r0, r5
 800e2ac:	d107      	bne.n	800e2be <_dtoa_r+0xb1e>
 800e2ae:	f000 fc6b 	bl	800eb88 <__multadd>
 800e2b2:	4680      	mov	r8, r0
 800e2b4:	4606      	mov	r6, r0
 800e2b6:	9b02      	ldr	r3, [sp, #8]
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	9302      	str	r3, [sp, #8]
 800e2bc:	e777      	b.n	800e1ae <_dtoa_r+0xa0e>
 800e2be:	f000 fc63 	bl	800eb88 <__multadd>
 800e2c2:	4631      	mov	r1, r6
 800e2c4:	4680      	mov	r8, r0
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	220a      	movs	r2, #10
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	f000 fc5c 	bl	800eb88 <__multadd>
 800e2d0:	4606      	mov	r6, r0
 800e2d2:	e7f0      	b.n	800e2b6 <_dtoa_r+0xb16>
 800e2d4:	f1bb 0f00 	cmp.w	fp, #0
 800e2d8:	bfcc      	ite	gt
 800e2da:	465f      	movgt	r7, fp
 800e2dc:	2701      	movle	r7, #1
 800e2de:	f04f 0800 	mov.w	r8, #0
 800e2e2:	9a08      	ldr	r2, [sp, #32]
 800e2e4:	4417      	add	r7, r2
 800e2e6:	4651      	mov	r1, sl
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	9302      	str	r3, [sp, #8]
 800e2ee:	f000 fe41 	bl	800ef74 <__lshift>
 800e2f2:	4621      	mov	r1, r4
 800e2f4:	4682      	mov	sl, r0
 800e2f6:	f000 fea9 	bl	800f04c <__mcmp>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	dcb2      	bgt.n	800e264 <_dtoa_r+0xac4>
 800e2fe:	d102      	bne.n	800e306 <_dtoa_r+0xb66>
 800e300:	9b02      	ldr	r3, [sp, #8]
 800e302:	07db      	lsls	r3, r3, #31
 800e304:	d4ae      	bmi.n	800e264 <_dtoa_r+0xac4>
 800e306:	463b      	mov	r3, r7
 800e308:	461f      	mov	r7, r3
 800e30a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e30e:	2a30      	cmp	r2, #48	; 0x30
 800e310:	d0fa      	beq.n	800e308 <_dtoa_r+0xb68>
 800e312:	e6fb      	b.n	800e10c <_dtoa_r+0x96c>
 800e314:	9a08      	ldr	r2, [sp, #32]
 800e316:	429a      	cmp	r2, r3
 800e318:	d1a5      	bne.n	800e266 <_dtoa_r+0xac6>
 800e31a:	2331      	movs	r3, #49	; 0x31
 800e31c:	f109 0901 	add.w	r9, r9, #1
 800e320:	7013      	strb	r3, [r2, #0]
 800e322:	e6f3      	b.n	800e10c <_dtoa_r+0x96c>
 800e324:	4b13      	ldr	r3, [pc, #76]	; (800e374 <_dtoa_r+0xbd4>)
 800e326:	f7ff baa7 	b.w	800d878 <_dtoa_r+0xd8>
 800e32a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	f47f aa80 	bne.w	800d832 <_dtoa_r+0x92>
 800e332:	4b11      	ldr	r3, [pc, #68]	; (800e378 <_dtoa_r+0xbd8>)
 800e334:	f7ff baa0 	b.w	800d878 <_dtoa_r+0xd8>
 800e338:	f1bb 0f00 	cmp.w	fp, #0
 800e33c:	dc03      	bgt.n	800e346 <_dtoa_r+0xba6>
 800e33e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e340:	2b02      	cmp	r3, #2
 800e342:	f73f aecc 	bgt.w	800e0de <_dtoa_r+0x93e>
 800e346:	9f08      	ldr	r7, [sp, #32]
 800e348:	4621      	mov	r1, r4
 800e34a:	4650      	mov	r0, sl
 800e34c:	f7ff f998 	bl	800d680 <quorem>
 800e350:	9a08      	ldr	r2, [sp, #32]
 800e352:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e356:	f807 3b01 	strb.w	r3, [r7], #1
 800e35a:	1aba      	subs	r2, r7, r2
 800e35c:	4593      	cmp	fp, r2
 800e35e:	ddb9      	ble.n	800e2d4 <_dtoa_r+0xb34>
 800e360:	4651      	mov	r1, sl
 800e362:	2300      	movs	r3, #0
 800e364:	220a      	movs	r2, #10
 800e366:	4628      	mov	r0, r5
 800e368:	f000 fc0e 	bl	800eb88 <__multadd>
 800e36c:	4682      	mov	sl, r0
 800e36e:	e7eb      	b.n	800e348 <_dtoa_r+0xba8>
 800e370:	08010d00 	.word	0x08010d00
 800e374:	08010bdc 	.word	0x08010bdc
 800e378:	08010c7d 	.word	0x08010c7d

0800e37c <rshift>:
 800e37c:	6903      	ldr	r3, [r0, #16]
 800e37e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e382:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e386:	f100 0414 	add.w	r4, r0, #20
 800e38a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e38e:	dd46      	ble.n	800e41e <rshift+0xa2>
 800e390:	f011 011f 	ands.w	r1, r1, #31
 800e394:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e398:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e39c:	d10c      	bne.n	800e3b8 <rshift+0x3c>
 800e39e:	4629      	mov	r1, r5
 800e3a0:	f100 0710 	add.w	r7, r0, #16
 800e3a4:	42b1      	cmp	r1, r6
 800e3a6:	d335      	bcc.n	800e414 <rshift+0x98>
 800e3a8:	1a9b      	subs	r3, r3, r2
 800e3aa:	009b      	lsls	r3, r3, #2
 800e3ac:	1eea      	subs	r2, r5, #3
 800e3ae:	4296      	cmp	r6, r2
 800e3b0:	bf38      	it	cc
 800e3b2:	2300      	movcc	r3, #0
 800e3b4:	4423      	add	r3, r4
 800e3b6:	e015      	b.n	800e3e4 <rshift+0x68>
 800e3b8:	46a1      	mov	r9, r4
 800e3ba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e3be:	f1c1 0820 	rsb	r8, r1, #32
 800e3c2:	40cf      	lsrs	r7, r1
 800e3c4:	f105 0e04 	add.w	lr, r5, #4
 800e3c8:	4576      	cmp	r6, lr
 800e3ca:	46f4      	mov	ip, lr
 800e3cc:	d816      	bhi.n	800e3fc <rshift+0x80>
 800e3ce:	1a9b      	subs	r3, r3, r2
 800e3d0:	009a      	lsls	r2, r3, #2
 800e3d2:	3a04      	subs	r2, #4
 800e3d4:	3501      	adds	r5, #1
 800e3d6:	42ae      	cmp	r6, r5
 800e3d8:	bf38      	it	cc
 800e3da:	2200      	movcc	r2, #0
 800e3dc:	18a3      	adds	r3, r4, r2
 800e3de:	50a7      	str	r7, [r4, r2]
 800e3e0:	b107      	cbz	r7, 800e3e4 <rshift+0x68>
 800e3e2:	3304      	adds	r3, #4
 800e3e4:	42a3      	cmp	r3, r4
 800e3e6:	eba3 0204 	sub.w	r2, r3, r4
 800e3ea:	bf08      	it	eq
 800e3ec:	2300      	moveq	r3, #0
 800e3ee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e3f2:	6102      	str	r2, [r0, #16]
 800e3f4:	bf08      	it	eq
 800e3f6:	6143      	streq	r3, [r0, #20]
 800e3f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3fc:	f8dc c000 	ldr.w	ip, [ip]
 800e400:	fa0c fc08 	lsl.w	ip, ip, r8
 800e404:	ea4c 0707 	orr.w	r7, ip, r7
 800e408:	f849 7b04 	str.w	r7, [r9], #4
 800e40c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e410:	40cf      	lsrs	r7, r1
 800e412:	e7d9      	b.n	800e3c8 <rshift+0x4c>
 800e414:	f851 cb04 	ldr.w	ip, [r1], #4
 800e418:	f847 cf04 	str.w	ip, [r7, #4]!
 800e41c:	e7c2      	b.n	800e3a4 <rshift+0x28>
 800e41e:	4623      	mov	r3, r4
 800e420:	e7e0      	b.n	800e3e4 <rshift+0x68>

0800e422 <__hexdig_fun>:
 800e422:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e426:	2b09      	cmp	r3, #9
 800e428:	d802      	bhi.n	800e430 <__hexdig_fun+0xe>
 800e42a:	3820      	subs	r0, #32
 800e42c:	b2c0      	uxtb	r0, r0
 800e42e:	4770      	bx	lr
 800e430:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e434:	2b05      	cmp	r3, #5
 800e436:	d801      	bhi.n	800e43c <__hexdig_fun+0x1a>
 800e438:	3847      	subs	r0, #71	; 0x47
 800e43a:	e7f7      	b.n	800e42c <__hexdig_fun+0xa>
 800e43c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e440:	2b05      	cmp	r3, #5
 800e442:	d801      	bhi.n	800e448 <__hexdig_fun+0x26>
 800e444:	3827      	subs	r0, #39	; 0x27
 800e446:	e7f1      	b.n	800e42c <__hexdig_fun+0xa>
 800e448:	2000      	movs	r0, #0
 800e44a:	4770      	bx	lr

0800e44c <__gethex>:
 800e44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e450:	b08b      	sub	sp, #44	; 0x2c
 800e452:	9306      	str	r3, [sp, #24]
 800e454:	4bb9      	ldr	r3, [pc, #740]	; (800e73c <__gethex+0x2f0>)
 800e456:	9002      	str	r0, [sp, #8]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	468b      	mov	fp, r1
 800e45c:	4618      	mov	r0, r3
 800e45e:	4690      	mov	r8, r2
 800e460:	9303      	str	r3, [sp, #12]
 800e462:	f7f1 fee1 	bl	8000228 <strlen>
 800e466:	4682      	mov	sl, r0
 800e468:	9b03      	ldr	r3, [sp, #12]
 800e46a:	f8db 2000 	ldr.w	r2, [fp]
 800e46e:	4403      	add	r3, r0
 800e470:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e474:	9307      	str	r3, [sp, #28]
 800e476:	1c93      	adds	r3, r2, #2
 800e478:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e47c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e480:	32fe      	adds	r2, #254	; 0xfe
 800e482:	18d1      	adds	r1, r2, r3
 800e484:	461f      	mov	r7, r3
 800e486:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e48a:	9101      	str	r1, [sp, #4]
 800e48c:	2830      	cmp	r0, #48	; 0x30
 800e48e:	d0f8      	beq.n	800e482 <__gethex+0x36>
 800e490:	f7ff ffc7 	bl	800e422 <__hexdig_fun>
 800e494:	4604      	mov	r4, r0
 800e496:	2800      	cmp	r0, #0
 800e498:	d13a      	bne.n	800e510 <__gethex+0xc4>
 800e49a:	4652      	mov	r2, sl
 800e49c:	4638      	mov	r0, r7
 800e49e:	9903      	ldr	r1, [sp, #12]
 800e4a0:	f001 f938 	bl	800f714 <strncmp>
 800e4a4:	4605      	mov	r5, r0
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	d166      	bne.n	800e578 <__gethex+0x12c>
 800e4aa:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e4ae:	eb07 060a 	add.w	r6, r7, sl
 800e4b2:	f7ff ffb6 	bl	800e422 <__hexdig_fun>
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	d060      	beq.n	800e57c <__gethex+0x130>
 800e4ba:	4633      	mov	r3, r6
 800e4bc:	7818      	ldrb	r0, [r3, #0]
 800e4be:	461f      	mov	r7, r3
 800e4c0:	2830      	cmp	r0, #48	; 0x30
 800e4c2:	f103 0301 	add.w	r3, r3, #1
 800e4c6:	d0f9      	beq.n	800e4bc <__gethex+0x70>
 800e4c8:	f7ff ffab 	bl	800e422 <__hexdig_fun>
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	fab0 f480 	clz	r4, r0
 800e4d2:	4635      	mov	r5, r6
 800e4d4:	0964      	lsrs	r4, r4, #5
 800e4d6:	9301      	str	r3, [sp, #4]
 800e4d8:	463a      	mov	r2, r7
 800e4da:	4616      	mov	r6, r2
 800e4dc:	7830      	ldrb	r0, [r6, #0]
 800e4de:	3201      	adds	r2, #1
 800e4e0:	f7ff ff9f 	bl	800e422 <__hexdig_fun>
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	d1f8      	bne.n	800e4da <__gethex+0x8e>
 800e4e8:	4652      	mov	r2, sl
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	9903      	ldr	r1, [sp, #12]
 800e4ee:	f001 f911 	bl	800f714 <strncmp>
 800e4f2:	b980      	cbnz	r0, 800e516 <__gethex+0xca>
 800e4f4:	b94d      	cbnz	r5, 800e50a <__gethex+0xbe>
 800e4f6:	eb06 050a 	add.w	r5, r6, sl
 800e4fa:	462a      	mov	r2, r5
 800e4fc:	4616      	mov	r6, r2
 800e4fe:	7830      	ldrb	r0, [r6, #0]
 800e500:	3201      	adds	r2, #1
 800e502:	f7ff ff8e 	bl	800e422 <__hexdig_fun>
 800e506:	2800      	cmp	r0, #0
 800e508:	d1f8      	bne.n	800e4fc <__gethex+0xb0>
 800e50a:	1bad      	subs	r5, r5, r6
 800e50c:	00ad      	lsls	r5, r5, #2
 800e50e:	e004      	b.n	800e51a <__gethex+0xce>
 800e510:	2400      	movs	r4, #0
 800e512:	4625      	mov	r5, r4
 800e514:	e7e0      	b.n	800e4d8 <__gethex+0x8c>
 800e516:	2d00      	cmp	r5, #0
 800e518:	d1f7      	bne.n	800e50a <__gethex+0xbe>
 800e51a:	7833      	ldrb	r3, [r6, #0]
 800e51c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e520:	2b50      	cmp	r3, #80	; 0x50
 800e522:	d139      	bne.n	800e598 <__gethex+0x14c>
 800e524:	7873      	ldrb	r3, [r6, #1]
 800e526:	2b2b      	cmp	r3, #43	; 0x2b
 800e528:	d02a      	beq.n	800e580 <__gethex+0x134>
 800e52a:	2b2d      	cmp	r3, #45	; 0x2d
 800e52c:	d02c      	beq.n	800e588 <__gethex+0x13c>
 800e52e:	f04f 0900 	mov.w	r9, #0
 800e532:	1c71      	adds	r1, r6, #1
 800e534:	7808      	ldrb	r0, [r1, #0]
 800e536:	f7ff ff74 	bl	800e422 <__hexdig_fun>
 800e53a:	1e43      	subs	r3, r0, #1
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	2b18      	cmp	r3, #24
 800e540:	d82a      	bhi.n	800e598 <__gethex+0x14c>
 800e542:	f1a0 0210 	sub.w	r2, r0, #16
 800e546:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e54a:	f7ff ff6a 	bl	800e422 <__hexdig_fun>
 800e54e:	1e43      	subs	r3, r0, #1
 800e550:	b2db      	uxtb	r3, r3
 800e552:	2b18      	cmp	r3, #24
 800e554:	d91b      	bls.n	800e58e <__gethex+0x142>
 800e556:	f1b9 0f00 	cmp.w	r9, #0
 800e55a:	d000      	beq.n	800e55e <__gethex+0x112>
 800e55c:	4252      	negs	r2, r2
 800e55e:	4415      	add	r5, r2
 800e560:	f8cb 1000 	str.w	r1, [fp]
 800e564:	b1d4      	cbz	r4, 800e59c <__gethex+0x150>
 800e566:	9b01      	ldr	r3, [sp, #4]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	bf14      	ite	ne
 800e56c:	2700      	movne	r7, #0
 800e56e:	2706      	moveq	r7, #6
 800e570:	4638      	mov	r0, r7
 800e572:	b00b      	add	sp, #44	; 0x2c
 800e574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e578:	463e      	mov	r6, r7
 800e57a:	4625      	mov	r5, r4
 800e57c:	2401      	movs	r4, #1
 800e57e:	e7cc      	b.n	800e51a <__gethex+0xce>
 800e580:	f04f 0900 	mov.w	r9, #0
 800e584:	1cb1      	adds	r1, r6, #2
 800e586:	e7d5      	b.n	800e534 <__gethex+0xe8>
 800e588:	f04f 0901 	mov.w	r9, #1
 800e58c:	e7fa      	b.n	800e584 <__gethex+0x138>
 800e58e:	230a      	movs	r3, #10
 800e590:	fb03 0202 	mla	r2, r3, r2, r0
 800e594:	3a10      	subs	r2, #16
 800e596:	e7d6      	b.n	800e546 <__gethex+0xfa>
 800e598:	4631      	mov	r1, r6
 800e59a:	e7e1      	b.n	800e560 <__gethex+0x114>
 800e59c:	4621      	mov	r1, r4
 800e59e:	1bf3      	subs	r3, r6, r7
 800e5a0:	3b01      	subs	r3, #1
 800e5a2:	2b07      	cmp	r3, #7
 800e5a4:	dc0a      	bgt.n	800e5bc <__gethex+0x170>
 800e5a6:	9802      	ldr	r0, [sp, #8]
 800e5a8:	f000 fa8c 	bl	800eac4 <_Balloc>
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	b940      	cbnz	r0, 800e5c2 <__gethex+0x176>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	21de      	movs	r1, #222	; 0xde
 800e5b4:	4b62      	ldr	r3, [pc, #392]	; (800e740 <__gethex+0x2f4>)
 800e5b6:	4863      	ldr	r0, [pc, #396]	; (800e744 <__gethex+0x2f8>)
 800e5b8:	f001 f8cc 	bl	800f754 <__assert_func>
 800e5bc:	3101      	adds	r1, #1
 800e5be:	105b      	asrs	r3, r3, #1
 800e5c0:	e7ef      	b.n	800e5a2 <__gethex+0x156>
 800e5c2:	f04f 0b00 	mov.w	fp, #0
 800e5c6:	f100 0914 	add.w	r9, r0, #20
 800e5ca:	f1ca 0301 	rsb	r3, sl, #1
 800e5ce:	f8cd 9010 	str.w	r9, [sp, #16]
 800e5d2:	f8cd b004 	str.w	fp, [sp, #4]
 800e5d6:	9308      	str	r3, [sp, #32]
 800e5d8:	42b7      	cmp	r7, r6
 800e5da:	d33f      	bcc.n	800e65c <__gethex+0x210>
 800e5dc:	9f04      	ldr	r7, [sp, #16]
 800e5de:	9b01      	ldr	r3, [sp, #4]
 800e5e0:	f847 3b04 	str.w	r3, [r7], #4
 800e5e4:	eba7 0709 	sub.w	r7, r7, r9
 800e5e8:	10bf      	asrs	r7, r7, #2
 800e5ea:	6127      	str	r7, [r4, #16]
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f000 fb5f 	bl	800ecb0 <__hi0bits>
 800e5f2:	017f      	lsls	r7, r7, #5
 800e5f4:	f8d8 6000 	ldr.w	r6, [r8]
 800e5f8:	1a3f      	subs	r7, r7, r0
 800e5fa:	42b7      	cmp	r7, r6
 800e5fc:	dd62      	ble.n	800e6c4 <__gethex+0x278>
 800e5fe:	1bbf      	subs	r7, r7, r6
 800e600:	4639      	mov	r1, r7
 800e602:	4620      	mov	r0, r4
 800e604:	f000 fef5 	bl	800f3f2 <__any_on>
 800e608:	4682      	mov	sl, r0
 800e60a:	b1a8      	cbz	r0, 800e638 <__gethex+0x1ec>
 800e60c:	f04f 0a01 	mov.w	sl, #1
 800e610:	1e7b      	subs	r3, r7, #1
 800e612:	1159      	asrs	r1, r3, #5
 800e614:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e618:	f003 021f 	and.w	r2, r3, #31
 800e61c:	fa0a f202 	lsl.w	r2, sl, r2
 800e620:	420a      	tst	r2, r1
 800e622:	d009      	beq.n	800e638 <__gethex+0x1ec>
 800e624:	4553      	cmp	r3, sl
 800e626:	dd05      	ble.n	800e634 <__gethex+0x1e8>
 800e628:	4620      	mov	r0, r4
 800e62a:	1eb9      	subs	r1, r7, #2
 800e62c:	f000 fee1 	bl	800f3f2 <__any_on>
 800e630:	2800      	cmp	r0, #0
 800e632:	d144      	bne.n	800e6be <__gethex+0x272>
 800e634:	f04f 0a02 	mov.w	sl, #2
 800e638:	4639      	mov	r1, r7
 800e63a:	4620      	mov	r0, r4
 800e63c:	f7ff fe9e 	bl	800e37c <rshift>
 800e640:	443d      	add	r5, r7
 800e642:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e646:	42ab      	cmp	r3, r5
 800e648:	da4a      	bge.n	800e6e0 <__gethex+0x294>
 800e64a:	4621      	mov	r1, r4
 800e64c:	9802      	ldr	r0, [sp, #8]
 800e64e:	f000 fa79 	bl	800eb44 <_Bfree>
 800e652:	2300      	movs	r3, #0
 800e654:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e656:	27a3      	movs	r7, #163	; 0xa3
 800e658:	6013      	str	r3, [r2, #0]
 800e65a:	e789      	b.n	800e570 <__gethex+0x124>
 800e65c:	1e73      	subs	r3, r6, #1
 800e65e:	9a07      	ldr	r2, [sp, #28]
 800e660:	9305      	str	r3, [sp, #20]
 800e662:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e666:	4293      	cmp	r3, r2
 800e668:	d019      	beq.n	800e69e <__gethex+0x252>
 800e66a:	f1bb 0f20 	cmp.w	fp, #32
 800e66e:	d107      	bne.n	800e680 <__gethex+0x234>
 800e670:	9b04      	ldr	r3, [sp, #16]
 800e672:	9a01      	ldr	r2, [sp, #4]
 800e674:	f843 2b04 	str.w	r2, [r3], #4
 800e678:	9304      	str	r3, [sp, #16]
 800e67a:	2300      	movs	r3, #0
 800e67c:	469b      	mov	fp, r3
 800e67e:	9301      	str	r3, [sp, #4]
 800e680:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e684:	f7ff fecd 	bl	800e422 <__hexdig_fun>
 800e688:	9b01      	ldr	r3, [sp, #4]
 800e68a:	f000 000f 	and.w	r0, r0, #15
 800e68e:	fa00 f00b 	lsl.w	r0, r0, fp
 800e692:	4303      	orrs	r3, r0
 800e694:	9301      	str	r3, [sp, #4]
 800e696:	f10b 0b04 	add.w	fp, fp, #4
 800e69a:	9b05      	ldr	r3, [sp, #20]
 800e69c:	e00d      	b.n	800e6ba <__gethex+0x26e>
 800e69e:	9b05      	ldr	r3, [sp, #20]
 800e6a0:	9a08      	ldr	r2, [sp, #32]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	42bb      	cmp	r3, r7
 800e6a6:	d3e0      	bcc.n	800e66a <__gethex+0x21e>
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	4652      	mov	r2, sl
 800e6ac:	9903      	ldr	r1, [sp, #12]
 800e6ae:	9309      	str	r3, [sp, #36]	; 0x24
 800e6b0:	f001 f830 	bl	800f714 <strncmp>
 800e6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6b6:	2800      	cmp	r0, #0
 800e6b8:	d1d7      	bne.n	800e66a <__gethex+0x21e>
 800e6ba:	461e      	mov	r6, r3
 800e6bc:	e78c      	b.n	800e5d8 <__gethex+0x18c>
 800e6be:	f04f 0a03 	mov.w	sl, #3
 800e6c2:	e7b9      	b.n	800e638 <__gethex+0x1ec>
 800e6c4:	da09      	bge.n	800e6da <__gethex+0x28e>
 800e6c6:	1bf7      	subs	r7, r6, r7
 800e6c8:	4621      	mov	r1, r4
 800e6ca:	463a      	mov	r2, r7
 800e6cc:	9802      	ldr	r0, [sp, #8]
 800e6ce:	f000 fc51 	bl	800ef74 <__lshift>
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	1bed      	subs	r5, r5, r7
 800e6d6:	f100 0914 	add.w	r9, r0, #20
 800e6da:	f04f 0a00 	mov.w	sl, #0
 800e6de:	e7b0      	b.n	800e642 <__gethex+0x1f6>
 800e6e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e6e4:	42a8      	cmp	r0, r5
 800e6e6:	dd71      	ble.n	800e7cc <__gethex+0x380>
 800e6e8:	1b45      	subs	r5, r0, r5
 800e6ea:	42ae      	cmp	r6, r5
 800e6ec:	dc34      	bgt.n	800e758 <__gethex+0x30c>
 800e6ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e6f2:	2b02      	cmp	r3, #2
 800e6f4:	d028      	beq.n	800e748 <__gethex+0x2fc>
 800e6f6:	2b03      	cmp	r3, #3
 800e6f8:	d02a      	beq.n	800e750 <__gethex+0x304>
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d115      	bne.n	800e72a <__gethex+0x2de>
 800e6fe:	42ae      	cmp	r6, r5
 800e700:	d113      	bne.n	800e72a <__gethex+0x2de>
 800e702:	2e01      	cmp	r6, #1
 800e704:	d10b      	bne.n	800e71e <__gethex+0x2d2>
 800e706:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e70a:	9a06      	ldr	r2, [sp, #24]
 800e70c:	2762      	movs	r7, #98	; 0x62
 800e70e:	6013      	str	r3, [r2, #0]
 800e710:	2301      	movs	r3, #1
 800e712:	6123      	str	r3, [r4, #16]
 800e714:	f8c9 3000 	str.w	r3, [r9]
 800e718:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e71a:	601c      	str	r4, [r3, #0]
 800e71c:	e728      	b.n	800e570 <__gethex+0x124>
 800e71e:	4620      	mov	r0, r4
 800e720:	1e71      	subs	r1, r6, #1
 800e722:	f000 fe66 	bl	800f3f2 <__any_on>
 800e726:	2800      	cmp	r0, #0
 800e728:	d1ed      	bne.n	800e706 <__gethex+0x2ba>
 800e72a:	4621      	mov	r1, r4
 800e72c:	9802      	ldr	r0, [sp, #8]
 800e72e:	f000 fa09 	bl	800eb44 <_Bfree>
 800e732:	2300      	movs	r3, #0
 800e734:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e736:	2750      	movs	r7, #80	; 0x50
 800e738:	6013      	str	r3, [r2, #0]
 800e73a:	e719      	b.n	800e570 <__gethex+0x124>
 800e73c:	08010d7c 	.word	0x08010d7c
 800e740:	08010d00 	.word	0x08010d00
 800e744:	08010d11 	.word	0x08010d11
 800e748:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d1ed      	bne.n	800e72a <__gethex+0x2de>
 800e74e:	e7da      	b.n	800e706 <__gethex+0x2ba>
 800e750:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e752:	2b00      	cmp	r3, #0
 800e754:	d1d7      	bne.n	800e706 <__gethex+0x2ba>
 800e756:	e7e8      	b.n	800e72a <__gethex+0x2de>
 800e758:	1e6f      	subs	r7, r5, #1
 800e75a:	f1ba 0f00 	cmp.w	sl, #0
 800e75e:	d132      	bne.n	800e7c6 <__gethex+0x37a>
 800e760:	b127      	cbz	r7, 800e76c <__gethex+0x320>
 800e762:	4639      	mov	r1, r7
 800e764:	4620      	mov	r0, r4
 800e766:	f000 fe44 	bl	800f3f2 <__any_on>
 800e76a:	4682      	mov	sl, r0
 800e76c:	2101      	movs	r1, #1
 800e76e:	117b      	asrs	r3, r7, #5
 800e770:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e774:	f007 071f 	and.w	r7, r7, #31
 800e778:	fa01 f707 	lsl.w	r7, r1, r7
 800e77c:	421f      	tst	r7, r3
 800e77e:	f04f 0702 	mov.w	r7, #2
 800e782:	4629      	mov	r1, r5
 800e784:	4620      	mov	r0, r4
 800e786:	bf18      	it	ne
 800e788:	f04a 0a02 	orrne.w	sl, sl, #2
 800e78c:	1b76      	subs	r6, r6, r5
 800e78e:	f7ff fdf5 	bl	800e37c <rshift>
 800e792:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e796:	f1ba 0f00 	cmp.w	sl, #0
 800e79a:	d048      	beq.n	800e82e <__gethex+0x3e2>
 800e79c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e7a0:	2b02      	cmp	r3, #2
 800e7a2:	d015      	beq.n	800e7d0 <__gethex+0x384>
 800e7a4:	2b03      	cmp	r3, #3
 800e7a6:	d017      	beq.n	800e7d8 <__gethex+0x38c>
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d109      	bne.n	800e7c0 <__gethex+0x374>
 800e7ac:	f01a 0f02 	tst.w	sl, #2
 800e7b0:	d006      	beq.n	800e7c0 <__gethex+0x374>
 800e7b2:	f8d9 0000 	ldr.w	r0, [r9]
 800e7b6:	ea4a 0a00 	orr.w	sl, sl, r0
 800e7ba:	f01a 0f01 	tst.w	sl, #1
 800e7be:	d10e      	bne.n	800e7de <__gethex+0x392>
 800e7c0:	f047 0710 	orr.w	r7, r7, #16
 800e7c4:	e033      	b.n	800e82e <__gethex+0x3e2>
 800e7c6:	f04f 0a01 	mov.w	sl, #1
 800e7ca:	e7cf      	b.n	800e76c <__gethex+0x320>
 800e7cc:	2701      	movs	r7, #1
 800e7ce:	e7e2      	b.n	800e796 <__gethex+0x34a>
 800e7d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7d2:	f1c3 0301 	rsb	r3, r3, #1
 800e7d6:	9315      	str	r3, [sp, #84]	; 0x54
 800e7d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d0f0      	beq.n	800e7c0 <__gethex+0x374>
 800e7de:	f04f 0c00 	mov.w	ip, #0
 800e7e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e7e6:	f104 0314 	add.w	r3, r4, #20
 800e7ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e7ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e7fc:	d01c      	beq.n	800e838 <__gethex+0x3ec>
 800e7fe:	3201      	adds	r2, #1
 800e800:	6002      	str	r2, [r0, #0]
 800e802:	2f02      	cmp	r7, #2
 800e804:	f104 0314 	add.w	r3, r4, #20
 800e808:	d13d      	bne.n	800e886 <__gethex+0x43a>
 800e80a:	f8d8 2000 	ldr.w	r2, [r8]
 800e80e:	3a01      	subs	r2, #1
 800e810:	42b2      	cmp	r2, r6
 800e812:	d10a      	bne.n	800e82a <__gethex+0x3de>
 800e814:	2201      	movs	r2, #1
 800e816:	1171      	asrs	r1, r6, #5
 800e818:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e81c:	f006 061f 	and.w	r6, r6, #31
 800e820:	fa02 f606 	lsl.w	r6, r2, r6
 800e824:	421e      	tst	r6, r3
 800e826:	bf18      	it	ne
 800e828:	4617      	movne	r7, r2
 800e82a:	f047 0720 	orr.w	r7, r7, #32
 800e82e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e830:	601c      	str	r4, [r3, #0]
 800e832:	9b06      	ldr	r3, [sp, #24]
 800e834:	601d      	str	r5, [r3, #0]
 800e836:	e69b      	b.n	800e570 <__gethex+0x124>
 800e838:	4299      	cmp	r1, r3
 800e83a:	f843 cc04 	str.w	ip, [r3, #-4]
 800e83e:	d8d8      	bhi.n	800e7f2 <__gethex+0x3a6>
 800e840:	68a3      	ldr	r3, [r4, #8]
 800e842:	459b      	cmp	fp, r3
 800e844:	db17      	blt.n	800e876 <__gethex+0x42a>
 800e846:	6861      	ldr	r1, [r4, #4]
 800e848:	9802      	ldr	r0, [sp, #8]
 800e84a:	3101      	adds	r1, #1
 800e84c:	f000 f93a 	bl	800eac4 <_Balloc>
 800e850:	4681      	mov	r9, r0
 800e852:	b918      	cbnz	r0, 800e85c <__gethex+0x410>
 800e854:	4602      	mov	r2, r0
 800e856:	2184      	movs	r1, #132	; 0x84
 800e858:	4b19      	ldr	r3, [pc, #100]	; (800e8c0 <__gethex+0x474>)
 800e85a:	e6ac      	b.n	800e5b6 <__gethex+0x16a>
 800e85c:	6922      	ldr	r2, [r4, #16]
 800e85e:	f104 010c 	add.w	r1, r4, #12
 800e862:	3202      	adds	r2, #2
 800e864:	0092      	lsls	r2, r2, #2
 800e866:	300c      	adds	r0, #12
 800e868:	f000 f912 	bl	800ea90 <memcpy>
 800e86c:	4621      	mov	r1, r4
 800e86e:	9802      	ldr	r0, [sp, #8]
 800e870:	f000 f968 	bl	800eb44 <_Bfree>
 800e874:	464c      	mov	r4, r9
 800e876:	6923      	ldr	r3, [r4, #16]
 800e878:	1c5a      	adds	r2, r3, #1
 800e87a:	6122      	str	r2, [r4, #16]
 800e87c:	2201      	movs	r2, #1
 800e87e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e882:	615a      	str	r2, [r3, #20]
 800e884:	e7bd      	b.n	800e802 <__gethex+0x3b6>
 800e886:	6922      	ldr	r2, [r4, #16]
 800e888:	455a      	cmp	r2, fp
 800e88a:	dd0b      	ble.n	800e8a4 <__gethex+0x458>
 800e88c:	2101      	movs	r1, #1
 800e88e:	4620      	mov	r0, r4
 800e890:	f7ff fd74 	bl	800e37c <rshift>
 800e894:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e898:	3501      	adds	r5, #1
 800e89a:	42ab      	cmp	r3, r5
 800e89c:	f6ff aed5 	blt.w	800e64a <__gethex+0x1fe>
 800e8a0:	2701      	movs	r7, #1
 800e8a2:	e7c2      	b.n	800e82a <__gethex+0x3de>
 800e8a4:	f016 061f 	ands.w	r6, r6, #31
 800e8a8:	d0fa      	beq.n	800e8a0 <__gethex+0x454>
 800e8aa:	449a      	add	sl, r3
 800e8ac:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e8b0:	f000 f9fe 	bl	800ecb0 <__hi0bits>
 800e8b4:	f1c6 0620 	rsb	r6, r6, #32
 800e8b8:	42b0      	cmp	r0, r6
 800e8ba:	dbe7      	blt.n	800e88c <__gethex+0x440>
 800e8bc:	e7f0      	b.n	800e8a0 <__gethex+0x454>
 800e8be:	bf00      	nop
 800e8c0:	08010d00 	.word	0x08010d00

0800e8c4 <L_shift>:
 800e8c4:	f1c2 0208 	rsb	r2, r2, #8
 800e8c8:	0092      	lsls	r2, r2, #2
 800e8ca:	b570      	push	{r4, r5, r6, lr}
 800e8cc:	f1c2 0620 	rsb	r6, r2, #32
 800e8d0:	6843      	ldr	r3, [r0, #4]
 800e8d2:	6804      	ldr	r4, [r0, #0]
 800e8d4:	fa03 f506 	lsl.w	r5, r3, r6
 800e8d8:	432c      	orrs	r4, r5
 800e8da:	40d3      	lsrs	r3, r2
 800e8dc:	6004      	str	r4, [r0, #0]
 800e8de:	f840 3f04 	str.w	r3, [r0, #4]!
 800e8e2:	4288      	cmp	r0, r1
 800e8e4:	d3f4      	bcc.n	800e8d0 <L_shift+0xc>
 800e8e6:	bd70      	pop	{r4, r5, r6, pc}

0800e8e8 <__match>:
 800e8e8:	b530      	push	{r4, r5, lr}
 800e8ea:	6803      	ldr	r3, [r0, #0]
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8f2:	b914      	cbnz	r4, 800e8fa <__match+0x12>
 800e8f4:	6003      	str	r3, [r0, #0]
 800e8f6:	2001      	movs	r0, #1
 800e8f8:	bd30      	pop	{r4, r5, pc}
 800e8fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e902:	2d19      	cmp	r5, #25
 800e904:	bf98      	it	ls
 800e906:	3220      	addls	r2, #32
 800e908:	42a2      	cmp	r2, r4
 800e90a:	d0f0      	beq.n	800e8ee <__match+0x6>
 800e90c:	2000      	movs	r0, #0
 800e90e:	e7f3      	b.n	800e8f8 <__match+0x10>

0800e910 <__hexnan>:
 800e910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e914:	2500      	movs	r5, #0
 800e916:	680b      	ldr	r3, [r1, #0]
 800e918:	4682      	mov	sl, r0
 800e91a:	115e      	asrs	r6, r3, #5
 800e91c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e920:	f013 031f 	ands.w	r3, r3, #31
 800e924:	bf18      	it	ne
 800e926:	3604      	addne	r6, #4
 800e928:	1f37      	subs	r7, r6, #4
 800e92a:	4690      	mov	r8, r2
 800e92c:	46b9      	mov	r9, r7
 800e92e:	463c      	mov	r4, r7
 800e930:	46ab      	mov	fp, r5
 800e932:	b087      	sub	sp, #28
 800e934:	6801      	ldr	r1, [r0, #0]
 800e936:	9301      	str	r3, [sp, #4]
 800e938:	f846 5c04 	str.w	r5, [r6, #-4]
 800e93c:	9502      	str	r5, [sp, #8]
 800e93e:	784a      	ldrb	r2, [r1, #1]
 800e940:	1c4b      	adds	r3, r1, #1
 800e942:	9303      	str	r3, [sp, #12]
 800e944:	b342      	cbz	r2, 800e998 <__hexnan+0x88>
 800e946:	4610      	mov	r0, r2
 800e948:	9105      	str	r1, [sp, #20]
 800e94a:	9204      	str	r2, [sp, #16]
 800e94c:	f7ff fd69 	bl	800e422 <__hexdig_fun>
 800e950:	2800      	cmp	r0, #0
 800e952:	d14f      	bne.n	800e9f4 <__hexnan+0xe4>
 800e954:	9a04      	ldr	r2, [sp, #16]
 800e956:	9905      	ldr	r1, [sp, #20]
 800e958:	2a20      	cmp	r2, #32
 800e95a:	d818      	bhi.n	800e98e <__hexnan+0x7e>
 800e95c:	9b02      	ldr	r3, [sp, #8]
 800e95e:	459b      	cmp	fp, r3
 800e960:	dd13      	ble.n	800e98a <__hexnan+0x7a>
 800e962:	454c      	cmp	r4, r9
 800e964:	d206      	bcs.n	800e974 <__hexnan+0x64>
 800e966:	2d07      	cmp	r5, #7
 800e968:	dc04      	bgt.n	800e974 <__hexnan+0x64>
 800e96a:	462a      	mov	r2, r5
 800e96c:	4649      	mov	r1, r9
 800e96e:	4620      	mov	r0, r4
 800e970:	f7ff ffa8 	bl	800e8c4 <L_shift>
 800e974:	4544      	cmp	r4, r8
 800e976:	d950      	bls.n	800ea1a <__hexnan+0x10a>
 800e978:	2300      	movs	r3, #0
 800e97a:	f1a4 0904 	sub.w	r9, r4, #4
 800e97e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e982:	461d      	mov	r5, r3
 800e984:	464c      	mov	r4, r9
 800e986:	f8cd b008 	str.w	fp, [sp, #8]
 800e98a:	9903      	ldr	r1, [sp, #12]
 800e98c:	e7d7      	b.n	800e93e <__hexnan+0x2e>
 800e98e:	2a29      	cmp	r2, #41	; 0x29
 800e990:	d156      	bne.n	800ea40 <__hexnan+0x130>
 800e992:	3102      	adds	r1, #2
 800e994:	f8ca 1000 	str.w	r1, [sl]
 800e998:	f1bb 0f00 	cmp.w	fp, #0
 800e99c:	d050      	beq.n	800ea40 <__hexnan+0x130>
 800e99e:	454c      	cmp	r4, r9
 800e9a0:	d206      	bcs.n	800e9b0 <__hexnan+0xa0>
 800e9a2:	2d07      	cmp	r5, #7
 800e9a4:	dc04      	bgt.n	800e9b0 <__hexnan+0xa0>
 800e9a6:	462a      	mov	r2, r5
 800e9a8:	4649      	mov	r1, r9
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	f7ff ff8a 	bl	800e8c4 <L_shift>
 800e9b0:	4544      	cmp	r4, r8
 800e9b2:	d934      	bls.n	800ea1e <__hexnan+0x10e>
 800e9b4:	4623      	mov	r3, r4
 800e9b6:	f1a8 0204 	sub.w	r2, r8, #4
 800e9ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800e9be:	429f      	cmp	r7, r3
 800e9c0:	f842 1f04 	str.w	r1, [r2, #4]!
 800e9c4:	d2f9      	bcs.n	800e9ba <__hexnan+0xaa>
 800e9c6:	1b3b      	subs	r3, r7, r4
 800e9c8:	f023 0303 	bic.w	r3, r3, #3
 800e9cc:	3304      	adds	r3, #4
 800e9ce:	3401      	adds	r4, #1
 800e9d0:	3e03      	subs	r6, #3
 800e9d2:	42b4      	cmp	r4, r6
 800e9d4:	bf88      	it	hi
 800e9d6:	2304      	movhi	r3, #4
 800e9d8:	2200      	movs	r2, #0
 800e9da:	4443      	add	r3, r8
 800e9dc:	f843 2b04 	str.w	r2, [r3], #4
 800e9e0:	429f      	cmp	r7, r3
 800e9e2:	d2fb      	bcs.n	800e9dc <__hexnan+0xcc>
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	b91b      	cbnz	r3, 800e9f0 <__hexnan+0xe0>
 800e9e8:	4547      	cmp	r7, r8
 800e9ea:	d127      	bne.n	800ea3c <__hexnan+0x12c>
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	603b      	str	r3, [r7, #0]
 800e9f0:	2005      	movs	r0, #5
 800e9f2:	e026      	b.n	800ea42 <__hexnan+0x132>
 800e9f4:	3501      	adds	r5, #1
 800e9f6:	2d08      	cmp	r5, #8
 800e9f8:	f10b 0b01 	add.w	fp, fp, #1
 800e9fc:	dd06      	ble.n	800ea0c <__hexnan+0xfc>
 800e9fe:	4544      	cmp	r4, r8
 800ea00:	d9c3      	bls.n	800e98a <__hexnan+0x7a>
 800ea02:	2300      	movs	r3, #0
 800ea04:	2501      	movs	r5, #1
 800ea06:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea0a:	3c04      	subs	r4, #4
 800ea0c:	6822      	ldr	r2, [r4, #0]
 800ea0e:	f000 000f 	and.w	r0, r0, #15
 800ea12:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ea16:	6022      	str	r2, [r4, #0]
 800ea18:	e7b7      	b.n	800e98a <__hexnan+0x7a>
 800ea1a:	2508      	movs	r5, #8
 800ea1c:	e7b5      	b.n	800e98a <__hexnan+0x7a>
 800ea1e:	9b01      	ldr	r3, [sp, #4]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d0df      	beq.n	800e9e4 <__hexnan+0xd4>
 800ea24:	f04f 32ff 	mov.w	r2, #4294967295
 800ea28:	f1c3 0320 	rsb	r3, r3, #32
 800ea2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ea30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ea34:	401a      	ands	r2, r3
 800ea36:	f846 2c04 	str.w	r2, [r6, #-4]
 800ea3a:	e7d3      	b.n	800e9e4 <__hexnan+0xd4>
 800ea3c:	3f04      	subs	r7, #4
 800ea3e:	e7d1      	b.n	800e9e4 <__hexnan+0xd4>
 800ea40:	2004      	movs	r0, #4
 800ea42:	b007      	add	sp, #28
 800ea44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea48 <_localeconv_r>:
 800ea48:	4800      	ldr	r0, [pc, #0]	; (800ea4c <_localeconv_r+0x4>)
 800ea4a:	4770      	bx	lr
 800ea4c:	20000198 	.word	0x20000198

0800ea50 <__ascii_mbtowc>:
 800ea50:	b082      	sub	sp, #8
 800ea52:	b901      	cbnz	r1, 800ea56 <__ascii_mbtowc+0x6>
 800ea54:	a901      	add	r1, sp, #4
 800ea56:	b142      	cbz	r2, 800ea6a <__ascii_mbtowc+0x1a>
 800ea58:	b14b      	cbz	r3, 800ea6e <__ascii_mbtowc+0x1e>
 800ea5a:	7813      	ldrb	r3, [r2, #0]
 800ea5c:	600b      	str	r3, [r1, #0]
 800ea5e:	7812      	ldrb	r2, [r2, #0]
 800ea60:	1e10      	subs	r0, r2, #0
 800ea62:	bf18      	it	ne
 800ea64:	2001      	movne	r0, #1
 800ea66:	b002      	add	sp, #8
 800ea68:	4770      	bx	lr
 800ea6a:	4610      	mov	r0, r2
 800ea6c:	e7fb      	b.n	800ea66 <__ascii_mbtowc+0x16>
 800ea6e:	f06f 0001 	mvn.w	r0, #1
 800ea72:	e7f8      	b.n	800ea66 <__ascii_mbtowc+0x16>

0800ea74 <memchr>:
 800ea74:	4603      	mov	r3, r0
 800ea76:	b510      	push	{r4, lr}
 800ea78:	b2c9      	uxtb	r1, r1
 800ea7a:	4402      	add	r2, r0
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	4618      	mov	r0, r3
 800ea80:	d101      	bne.n	800ea86 <memchr+0x12>
 800ea82:	2000      	movs	r0, #0
 800ea84:	e003      	b.n	800ea8e <memchr+0x1a>
 800ea86:	7804      	ldrb	r4, [r0, #0]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	428c      	cmp	r4, r1
 800ea8c:	d1f6      	bne.n	800ea7c <memchr+0x8>
 800ea8e:	bd10      	pop	{r4, pc}

0800ea90 <memcpy>:
 800ea90:	440a      	add	r2, r1
 800ea92:	4291      	cmp	r1, r2
 800ea94:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea98:	d100      	bne.n	800ea9c <memcpy+0xc>
 800ea9a:	4770      	bx	lr
 800ea9c:	b510      	push	{r4, lr}
 800ea9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaa2:	4291      	cmp	r1, r2
 800eaa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eaa8:	d1f9      	bne.n	800ea9e <memcpy+0xe>
 800eaaa:	bd10      	pop	{r4, pc}

0800eaac <__malloc_lock>:
 800eaac:	4801      	ldr	r0, [pc, #4]	; (800eab4 <__malloc_lock+0x8>)
 800eaae:	f000 be82 	b.w	800f7b6 <__retarget_lock_acquire_recursive>
 800eab2:	bf00      	nop
 800eab4:	20000930 	.word	0x20000930

0800eab8 <__malloc_unlock>:
 800eab8:	4801      	ldr	r0, [pc, #4]	; (800eac0 <__malloc_unlock+0x8>)
 800eaba:	f000 be7d 	b.w	800f7b8 <__retarget_lock_release_recursive>
 800eabe:	bf00      	nop
 800eac0:	20000930 	.word	0x20000930

0800eac4 <_Balloc>:
 800eac4:	b570      	push	{r4, r5, r6, lr}
 800eac6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eac8:	4604      	mov	r4, r0
 800eaca:	460d      	mov	r5, r1
 800eacc:	b976      	cbnz	r6, 800eaec <_Balloc+0x28>
 800eace:	2010      	movs	r0, #16
 800ead0:	f7fc ff8a 	bl	800b9e8 <malloc>
 800ead4:	4602      	mov	r2, r0
 800ead6:	6260      	str	r0, [r4, #36]	; 0x24
 800ead8:	b920      	cbnz	r0, 800eae4 <_Balloc+0x20>
 800eada:	2166      	movs	r1, #102	; 0x66
 800eadc:	4b17      	ldr	r3, [pc, #92]	; (800eb3c <_Balloc+0x78>)
 800eade:	4818      	ldr	r0, [pc, #96]	; (800eb40 <_Balloc+0x7c>)
 800eae0:	f000 fe38 	bl	800f754 <__assert_func>
 800eae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eae8:	6006      	str	r6, [r0, #0]
 800eaea:	60c6      	str	r6, [r0, #12]
 800eaec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eaee:	68f3      	ldr	r3, [r6, #12]
 800eaf0:	b183      	cbz	r3, 800eb14 <_Balloc+0x50>
 800eaf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eaf4:	68db      	ldr	r3, [r3, #12]
 800eaf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eafa:	b9b8      	cbnz	r0, 800eb2c <_Balloc+0x68>
 800eafc:	2101      	movs	r1, #1
 800eafe:	fa01 f605 	lsl.w	r6, r1, r5
 800eb02:	1d72      	adds	r2, r6, #5
 800eb04:	4620      	mov	r0, r4
 800eb06:	0092      	lsls	r2, r2, #2
 800eb08:	f000 fc94 	bl	800f434 <_calloc_r>
 800eb0c:	b160      	cbz	r0, 800eb28 <_Balloc+0x64>
 800eb0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eb12:	e00e      	b.n	800eb32 <_Balloc+0x6e>
 800eb14:	2221      	movs	r2, #33	; 0x21
 800eb16:	2104      	movs	r1, #4
 800eb18:	4620      	mov	r0, r4
 800eb1a:	f000 fc8b 	bl	800f434 <_calloc_r>
 800eb1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb20:	60f0      	str	r0, [r6, #12]
 800eb22:	68db      	ldr	r3, [r3, #12]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d1e4      	bne.n	800eaf2 <_Balloc+0x2e>
 800eb28:	2000      	movs	r0, #0
 800eb2a:	bd70      	pop	{r4, r5, r6, pc}
 800eb2c:	6802      	ldr	r2, [r0, #0]
 800eb2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb32:	2300      	movs	r3, #0
 800eb34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb38:	e7f7      	b.n	800eb2a <_Balloc+0x66>
 800eb3a:	bf00      	nop
 800eb3c:	08010c8a 	.word	0x08010c8a
 800eb40:	08010d90 	.word	0x08010d90

0800eb44 <_Bfree>:
 800eb44:	b570      	push	{r4, r5, r6, lr}
 800eb46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eb48:	4605      	mov	r5, r0
 800eb4a:	460c      	mov	r4, r1
 800eb4c:	b976      	cbnz	r6, 800eb6c <_Bfree+0x28>
 800eb4e:	2010      	movs	r0, #16
 800eb50:	f7fc ff4a 	bl	800b9e8 <malloc>
 800eb54:	4602      	mov	r2, r0
 800eb56:	6268      	str	r0, [r5, #36]	; 0x24
 800eb58:	b920      	cbnz	r0, 800eb64 <_Bfree+0x20>
 800eb5a:	218a      	movs	r1, #138	; 0x8a
 800eb5c:	4b08      	ldr	r3, [pc, #32]	; (800eb80 <_Bfree+0x3c>)
 800eb5e:	4809      	ldr	r0, [pc, #36]	; (800eb84 <_Bfree+0x40>)
 800eb60:	f000 fdf8 	bl	800f754 <__assert_func>
 800eb64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb68:	6006      	str	r6, [r0, #0]
 800eb6a:	60c6      	str	r6, [r0, #12]
 800eb6c:	b13c      	cbz	r4, 800eb7e <_Bfree+0x3a>
 800eb6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eb70:	6862      	ldr	r2, [r4, #4]
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb78:	6021      	str	r1, [r4, #0]
 800eb7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb7e:	bd70      	pop	{r4, r5, r6, pc}
 800eb80:	08010c8a 	.word	0x08010c8a
 800eb84:	08010d90 	.word	0x08010d90

0800eb88 <__multadd>:
 800eb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb8c:	4698      	mov	r8, r3
 800eb8e:	460c      	mov	r4, r1
 800eb90:	2300      	movs	r3, #0
 800eb92:	690e      	ldr	r6, [r1, #16]
 800eb94:	4607      	mov	r7, r0
 800eb96:	f101 0014 	add.w	r0, r1, #20
 800eb9a:	6805      	ldr	r5, [r0, #0]
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	b2a9      	uxth	r1, r5
 800eba0:	fb02 8101 	mla	r1, r2, r1, r8
 800eba4:	0c2d      	lsrs	r5, r5, #16
 800eba6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ebaa:	fb02 c505 	mla	r5, r2, r5, ip
 800ebae:	b289      	uxth	r1, r1
 800ebb0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ebb4:	429e      	cmp	r6, r3
 800ebb6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ebba:	f840 1b04 	str.w	r1, [r0], #4
 800ebbe:	dcec      	bgt.n	800eb9a <__multadd+0x12>
 800ebc0:	f1b8 0f00 	cmp.w	r8, #0
 800ebc4:	d022      	beq.n	800ec0c <__multadd+0x84>
 800ebc6:	68a3      	ldr	r3, [r4, #8]
 800ebc8:	42b3      	cmp	r3, r6
 800ebca:	dc19      	bgt.n	800ec00 <__multadd+0x78>
 800ebcc:	6861      	ldr	r1, [r4, #4]
 800ebce:	4638      	mov	r0, r7
 800ebd0:	3101      	adds	r1, #1
 800ebd2:	f7ff ff77 	bl	800eac4 <_Balloc>
 800ebd6:	4605      	mov	r5, r0
 800ebd8:	b928      	cbnz	r0, 800ebe6 <__multadd+0x5e>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	21b5      	movs	r1, #181	; 0xb5
 800ebde:	4b0d      	ldr	r3, [pc, #52]	; (800ec14 <__multadd+0x8c>)
 800ebe0:	480d      	ldr	r0, [pc, #52]	; (800ec18 <__multadd+0x90>)
 800ebe2:	f000 fdb7 	bl	800f754 <__assert_func>
 800ebe6:	6922      	ldr	r2, [r4, #16]
 800ebe8:	f104 010c 	add.w	r1, r4, #12
 800ebec:	3202      	adds	r2, #2
 800ebee:	0092      	lsls	r2, r2, #2
 800ebf0:	300c      	adds	r0, #12
 800ebf2:	f7ff ff4d 	bl	800ea90 <memcpy>
 800ebf6:	4621      	mov	r1, r4
 800ebf8:	4638      	mov	r0, r7
 800ebfa:	f7ff ffa3 	bl	800eb44 <_Bfree>
 800ebfe:	462c      	mov	r4, r5
 800ec00:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ec04:	3601      	adds	r6, #1
 800ec06:	f8c3 8014 	str.w	r8, [r3, #20]
 800ec0a:	6126      	str	r6, [r4, #16]
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec12:	bf00      	nop
 800ec14:	08010d00 	.word	0x08010d00
 800ec18:	08010d90 	.word	0x08010d90

0800ec1c <__s2b>:
 800ec1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec20:	4615      	mov	r5, r2
 800ec22:	2209      	movs	r2, #9
 800ec24:	461f      	mov	r7, r3
 800ec26:	3308      	adds	r3, #8
 800ec28:	460c      	mov	r4, r1
 800ec2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec2e:	4606      	mov	r6, r0
 800ec30:	2201      	movs	r2, #1
 800ec32:	2100      	movs	r1, #0
 800ec34:	429a      	cmp	r2, r3
 800ec36:	db09      	blt.n	800ec4c <__s2b+0x30>
 800ec38:	4630      	mov	r0, r6
 800ec3a:	f7ff ff43 	bl	800eac4 <_Balloc>
 800ec3e:	b940      	cbnz	r0, 800ec52 <__s2b+0x36>
 800ec40:	4602      	mov	r2, r0
 800ec42:	21ce      	movs	r1, #206	; 0xce
 800ec44:	4b18      	ldr	r3, [pc, #96]	; (800eca8 <__s2b+0x8c>)
 800ec46:	4819      	ldr	r0, [pc, #100]	; (800ecac <__s2b+0x90>)
 800ec48:	f000 fd84 	bl	800f754 <__assert_func>
 800ec4c:	0052      	lsls	r2, r2, #1
 800ec4e:	3101      	adds	r1, #1
 800ec50:	e7f0      	b.n	800ec34 <__s2b+0x18>
 800ec52:	9b08      	ldr	r3, [sp, #32]
 800ec54:	2d09      	cmp	r5, #9
 800ec56:	6143      	str	r3, [r0, #20]
 800ec58:	f04f 0301 	mov.w	r3, #1
 800ec5c:	6103      	str	r3, [r0, #16]
 800ec5e:	dd16      	ble.n	800ec8e <__s2b+0x72>
 800ec60:	f104 0909 	add.w	r9, r4, #9
 800ec64:	46c8      	mov	r8, r9
 800ec66:	442c      	add	r4, r5
 800ec68:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ec6c:	4601      	mov	r1, r0
 800ec6e:	220a      	movs	r2, #10
 800ec70:	4630      	mov	r0, r6
 800ec72:	3b30      	subs	r3, #48	; 0x30
 800ec74:	f7ff ff88 	bl	800eb88 <__multadd>
 800ec78:	45a0      	cmp	r8, r4
 800ec7a:	d1f5      	bne.n	800ec68 <__s2b+0x4c>
 800ec7c:	f1a5 0408 	sub.w	r4, r5, #8
 800ec80:	444c      	add	r4, r9
 800ec82:	1b2d      	subs	r5, r5, r4
 800ec84:	1963      	adds	r3, r4, r5
 800ec86:	42bb      	cmp	r3, r7
 800ec88:	db04      	blt.n	800ec94 <__s2b+0x78>
 800ec8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec8e:	2509      	movs	r5, #9
 800ec90:	340a      	adds	r4, #10
 800ec92:	e7f6      	b.n	800ec82 <__s2b+0x66>
 800ec94:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ec98:	4601      	mov	r1, r0
 800ec9a:	220a      	movs	r2, #10
 800ec9c:	4630      	mov	r0, r6
 800ec9e:	3b30      	subs	r3, #48	; 0x30
 800eca0:	f7ff ff72 	bl	800eb88 <__multadd>
 800eca4:	e7ee      	b.n	800ec84 <__s2b+0x68>
 800eca6:	bf00      	nop
 800eca8:	08010d00 	.word	0x08010d00
 800ecac:	08010d90 	.word	0x08010d90

0800ecb0 <__hi0bits>:
 800ecb0:	0c02      	lsrs	r2, r0, #16
 800ecb2:	0412      	lsls	r2, r2, #16
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	b9ca      	cbnz	r2, 800ecec <__hi0bits+0x3c>
 800ecb8:	0403      	lsls	r3, r0, #16
 800ecba:	2010      	movs	r0, #16
 800ecbc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ecc0:	bf04      	itt	eq
 800ecc2:	021b      	lsleq	r3, r3, #8
 800ecc4:	3008      	addeq	r0, #8
 800ecc6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ecca:	bf04      	itt	eq
 800eccc:	011b      	lsleq	r3, r3, #4
 800ecce:	3004      	addeq	r0, #4
 800ecd0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ecd4:	bf04      	itt	eq
 800ecd6:	009b      	lsleq	r3, r3, #2
 800ecd8:	3002      	addeq	r0, #2
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	db05      	blt.n	800ecea <__hi0bits+0x3a>
 800ecde:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ece2:	f100 0001 	add.w	r0, r0, #1
 800ece6:	bf08      	it	eq
 800ece8:	2020      	moveq	r0, #32
 800ecea:	4770      	bx	lr
 800ecec:	2000      	movs	r0, #0
 800ecee:	e7e5      	b.n	800ecbc <__hi0bits+0xc>

0800ecf0 <__lo0bits>:
 800ecf0:	6803      	ldr	r3, [r0, #0]
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	f013 0007 	ands.w	r0, r3, #7
 800ecf8:	d00b      	beq.n	800ed12 <__lo0bits+0x22>
 800ecfa:	07d9      	lsls	r1, r3, #31
 800ecfc:	d422      	bmi.n	800ed44 <__lo0bits+0x54>
 800ecfe:	0798      	lsls	r0, r3, #30
 800ed00:	bf49      	itett	mi
 800ed02:	085b      	lsrmi	r3, r3, #1
 800ed04:	089b      	lsrpl	r3, r3, #2
 800ed06:	2001      	movmi	r0, #1
 800ed08:	6013      	strmi	r3, [r2, #0]
 800ed0a:	bf5c      	itt	pl
 800ed0c:	2002      	movpl	r0, #2
 800ed0e:	6013      	strpl	r3, [r2, #0]
 800ed10:	4770      	bx	lr
 800ed12:	b299      	uxth	r1, r3
 800ed14:	b909      	cbnz	r1, 800ed1a <__lo0bits+0x2a>
 800ed16:	2010      	movs	r0, #16
 800ed18:	0c1b      	lsrs	r3, r3, #16
 800ed1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ed1e:	bf04      	itt	eq
 800ed20:	0a1b      	lsreq	r3, r3, #8
 800ed22:	3008      	addeq	r0, #8
 800ed24:	0719      	lsls	r1, r3, #28
 800ed26:	bf04      	itt	eq
 800ed28:	091b      	lsreq	r3, r3, #4
 800ed2a:	3004      	addeq	r0, #4
 800ed2c:	0799      	lsls	r1, r3, #30
 800ed2e:	bf04      	itt	eq
 800ed30:	089b      	lsreq	r3, r3, #2
 800ed32:	3002      	addeq	r0, #2
 800ed34:	07d9      	lsls	r1, r3, #31
 800ed36:	d403      	bmi.n	800ed40 <__lo0bits+0x50>
 800ed38:	085b      	lsrs	r3, r3, #1
 800ed3a:	f100 0001 	add.w	r0, r0, #1
 800ed3e:	d003      	beq.n	800ed48 <__lo0bits+0x58>
 800ed40:	6013      	str	r3, [r2, #0]
 800ed42:	4770      	bx	lr
 800ed44:	2000      	movs	r0, #0
 800ed46:	4770      	bx	lr
 800ed48:	2020      	movs	r0, #32
 800ed4a:	4770      	bx	lr

0800ed4c <__i2b>:
 800ed4c:	b510      	push	{r4, lr}
 800ed4e:	460c      	mov	r4, r1
 800ed50:	2101      	movs	r1, #1
 800ed52:	f7ff feb7 	bl	800eac4 <_Balloc>
 800ed56:	4602      	mov	r2, r0
 800ed58:	b928      	cbnz	r0, 800ed66 <__i2b+0x1a>
 800ed5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ed5e:	4b04      	ldr	r3, [pc, #16]	; (800ed70 <__i2b+0x24>)
 800ed60:	4804      	ldr	r0, [pc, #16]	; (800ed74 <__i2b+0x28>)
 800ed62:	f000 fcf7 	bl	800f754 <__assert_func>
 800ed66:	2301      	movs	r3, #1
 800ed68:	6144      	str	r4, [r0, #20]
 800ed6a:	6103      	str	r3, [r0, #16]
 800ed6c:	bd10      	pop	{r4, pc}
 800ed6e:	bf00      	nop
 800ed70:	08010d00 	.word	0x08010d00
 800ed74:	08010d90 	.word	0x08010d90

0800ed78 <__multiply>:
 800ed78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed7c:	4614      	mov	r4, r2
 800ed7e:	690a      	ldr	r2, [r1, #16]
 800ed80:	6923      	ldr	r3, [r4, #16]
 800ed82:	460d      	mov	r5, r1
 800ed84:	429a      	cmp	r2, r3
 800ed86:	bfbe      	ittt	lt
 800ed88:	460b      	movlt	r3, r1
 800ed8a:	4625      	movlt	r5, r4
 800ed8c:	461c      	movlt	r4, r3
 800ed8e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ed92:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ed96:	68ab      	ldr	r3, [r5, #8]
 800ed98:	6869      	ldr	r1, [r5, #4]
 800ed9a:	eb0a 0709 	add.w	r7, sl, r9
 800ed9e:	42bb      	cmp	r3, r7
 800eda0:	b085      	sub	sp, #20
 800eda2:	bfb8      	it	lt
 800eda4:	3101      	addlt	r1, #1
 800eda6:	f7ff fe8d 	bl	800eac4 <_Balloc>
 800edaa:	b930      	cbnz	r0, 800edba <__multiply+0x42>
 800edac:	4602      	mov	r2, r0
 800edae:	f240 115d 	movw	r1, #349	; 0x15d
 800edb2:	4b41      	ldr	r3, [pc, #260]	; (800eeb8 <__multiply+0x140>)
 800edb4:	4841      	ldr	r0, [pc, #260]	; (800eebc <__multiply+0x144>)
 800edb6:	f000 fccd 	bl	800f754 <__assert_func>
 800edba:	f100 0614 	add.w	r6, r0, #20
 800edbe:	4633      	mov	r3, r6
 800edc0:	2200      	movs	r2, #0
 800edc2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800edc6:	4543      	cmp	r3, r8
 800edc8:	d31e      	bcc.n	800ee08 <__multiply+0x90>
 800edca:	f105 0c14 	add.w	ip, r5, #20
 800edce:	f104 0314 	add.w	r3, r4, #20
 800edd2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800edd6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800edda:	9202      	str	r2, [sp, #8]
 800eddc:	ebac 0205 	sub.w	r2, ip, r5
 800ede0:	3a15      	subs	r2, #21
 800ede2:	f022 0203 	bic.w	r2, r2, #3
 800ede6:	3204      	adds	r2, #4
 800ede8:	f105 0115 	add.w	r1, r5, #21
 800edec:	458c      	cmp	ip, r1
 800edee:	bf38      	it	cc
 800edf0:	2204      	movcc	r2, #4
 800edf2:	9201      	str	r2, [sp, #4]
 800edf4:	9a02      	ldr	r2, [sp, #8]
 800edf6:	9303      	str	r3, [sp, #12]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d808      	bhi.n	800ee0e <__multiply+0x96>
 800edfc:	2f00      	cmp	r7, #0
 800edfe:	dc55      	bgt.n	800eeac <__multiply+0x134>
 800ee00:	6107      	str	r7, [r0, #16]
 800ee02:	b005      	add	sp, #20
 800ee04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee08:	f843 2b04 	str.w	r2, [r3], #4
 800ee0c:	e7db      	b.n	800edc6 <__multiply+0x4e>
 800ee0e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ee12:	f1ba 0f00 	cmp.w	sl, #0
 800ee16:	d020      	beq.n	800ee5a <__multiply+0xe2>
 800ee18:	46b1      	mov	r9, r6
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	f105 0e14 	add.w	lr, r5, #20
 800ee20:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ee24:	f8d9 b000 	ldr.w	fp, [r9]
 800ee28:	b2a1      	uxth	r1, r4
 800ee2a:	fa1f fb8b 	uxth.w	fp, fp
 800ee2e:	fb0a b101 	mla	r1, sl, r1, fp
 800ee32:	4411      	add	r1, r2
 800ee34:	f8d9 2000 	ldr.w	r2, [r9]
 800ee38:	0c24      	lsrs	r4, r4, #16
 800ee3a:	0c12      	lsrs	r2, r2, #16
 800ee3c:	fb0a 2404 	mla	r4, sl, r4, r2
 800ee40:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ee44:	b289      	uxth	r1, r1
 800ee46:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ee4a:	45f4      	cmp	ip, lr
 800ee4c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ee50:	f849 1b04 	str.w	r1, [r9], #4
 800ee54:	d8e4      	bhi.n	800ee20 <__multiply+0xa8>
 800ee56:	9901      	ldr	r1, [sp, #4]
 800ee58:	5072      	str	r2, [r6, r1]
 800ee5a:	9a03      	ldr	r2, [sp, #12]
 800ee5c:	3304      	adds	r3, #4
 800ee5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ee62:	f1b9 0f00 	cmp.w	r9, #0
 800ee66:	d01f      	beq.n	800eea8 <__multiply+0x130>
 800ee68:	46b6      	mov	lr, r6
 800ee6a:	f04f 0a00 	mov.w	sl, #0
 800ee6e:	6834      	ldr	r4, [r6, #0]
 800ee70:	f105 0114 	add.w	r1, r5, #20
 800ee74:	880a      	ldrh	r2, [r1, #0]
 800ee76:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ee7a:	b2a4      	uxth	r4, r4
 800ee7c:	fb09 b202 	mla	r2, r9, r2, fp
 800ee80:	4492      	add	sl, r2
 800ee82:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ee86:	f84e 4b04 	str.w	r4, [lr], #4
 800ee8a:	f851 4b04 	ldr.w	r4, [r1], #4
 800ee8e:	f8be 2000 	ldrh.w	r2, [lr]
 800ee92:	0c24      	lsrs	r4, r4, #16
 800ee94:	fb09 2404 	mla	r4, r9, r4, r2
 800ee98:	458c      	cmp	ip, r1
 800ee9a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ee9e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800eea2:	d8e7      	bhi.n	800ee74 <__multiply+0xfc>
 800eea4:	9a01      	ldr	r2, [sp, #4]
 800eea6:	50b4      	str	r4, [r6, r2]
 800eea8:	3604      	adds	r6, #4
 800eeaa:	e7a3      	b.n	800edf4 <__multiply+0x7c>
 800eeac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d1a5      	bne.n	800ee00 <__multiply+0x88>
 800eeb4:	3f01      	subs	r7, #1
 800eeb6:	e7a1      	b.n	800edfc <__multiply+0x84>
 800eeb8:	08010d00 	.word	0x08010d00
 800eebc:	08010d90 	.word	0x08010d90

0800eec0 <__pow5mult>:
 800eec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eec4:	4615      	mov	r5, r2
 800eec6:	f012 0203 	ands.w	r2, r2, #3
 800eeca:	4606      	mov	r6, r0
 800eecc:	460f      	mov	r7, r1
 800eece:	d007      	beq.n	800eee0 <__pow5mult+0x20>
 800eed0:	4c25      	ldr	r4, [pc, #148]	; (800ef68 <__pow5mult+0xa8>)
 800eed2:	3a01      	subs	r2, #1
 800eed4:	2300      	movs	r3, #0
 800eed6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eeda:	f7ff fe55 	bl	800eb88 <__multadd>
 800eede:	4607      	mov	r7, r0
 800eee0:	10ad      	asrs	r5, r5, #2
 800eee2:	d03d      	beq.n	800ef60 <__pow5mult+0xa0>
 800eee4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eee6:	b97c      	cbnz	r4, 800ef08 <__pow5mult+0x48>
 800eee8:	2010      	movs	r0, #16
 800eeea:	f7fc fd7d 	bl	800b9e8 <malloc>
 800eeee:	4602      	mov	r2, r0
 800eef0:	6270      	str	r0, [r6, #36]	; 0x24
 800eef2:	b928      	cbnz	r0, 800ef00 <__pow5mult+0x40>
 800eef4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800eef8:	4b1c      	ldr	r3, [pc, #112]	; (800ef6c <__pow5mult+0xac>)
 800eefa:	481d      	ldr	r0, [pc, #116]	; (800ef70 <__pow5mult+0xb0>)
 800eefc:	f000 fc2a 	bl	800f754 <__assert_func>
 800ef00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef04:	6004      	str	r4, [r0, #0]
 800ef06:	60c4      	str	r4, [r0, #12]
 800ef08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ef0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ef10:	b94c      	cbnz	r4, 800ef26 <__pow5mult+0x66>
 800ef12:	f240 2171 	movw	r1, #625	; 0x271
 800ef16:	4630      	mov	r0, r6
 800ef18:	f7ff ff18 	bl	800ed4c <__i2b>
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	4604      	mov	r4, r0
 800ef20:	f8c8 0008 	str.w	r0, [r8, #8]
 800ef24:	6003      	str	r3, [r0, #0]
 800ef26:	f04f 0900 	mov.w	r9, #0
 800ef2a:	07eb      	lsls	r3, r5, #31
 800ef2c:	d50a      	bpl.n	800ef44 <__pow5mult+0x84>
 800ef2e:	4639      	mov	r1, r7
 800ef30:	4622      	mov	r2, r4
 800ef32:	4630      	mov	r0, r6
 800ef34:	f7ff ff20 	bl	800ed78 <__multiply>
 800ef38:	4680      	mov	r8, r0
 800ef3a:	4639      	mov	r1, r7
 800ef3c:	4630      	mov	r0, r6
 800ef3e:	f7ff fe01 	bl	800eb44 <_Bfree>
 800ef42:	4647      	mov	r7, r8
 800ef44:	106d      	asrs	r5, r5, #1
 800ef46:	d00b      	beq.n	800ef60 <__pow5mult+0xa0>
 800ef48:	6820      	ldr	r0, [r4, #0]
 800ef4a:	b938      	cbnz	r0, 800ef5c <__pow5mult+0x9c>
 800ef4c:	4622      	mov	r2, r4
 800ef4e:	4621      	mov	r1, r4
 800ef50:	4630      	mov	r0, r6
 800ef52:	f7ff ff11 	bl	800ed78 <__multiply>
 800ef56:	6020      	str	r0, [r4, #0]
 800ef58:	f8c0 9000 	str.w	r9, [r0]
 800ef5c:	4604      	mov	r4, r0
 800ef5e:	e7e4      	b.n	800ef2a <__pow5mult+0x6a>
 800ef60:	4638      	mov	r0, r7
 800ef62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef66:	bf00      	nop
 800ef68:	08010ee0 	.word	0x08010ee0
 800ef6c:	08010c8a 	.word	0x08010c8a
 800ef70:	08010d90 	.word	0x08010d90

0800ef74 <__lshift>:
 800ef74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef78:	460c      	mov	r4, r1
 800ef7a:	4607      	mov	r7, r0
 800ef7c:	4691      	mov	r9, r2
 800ef7e:	6923      	ldr	r3, [r4, #16]
 800ef80:	6849      	ldr	r1, [r1, #4]
 800ef82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ef86:	68a3      	ldr	r3, [r4, #8]
 800ef88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ef8c:	f108 0601 	add.w	r6, r8, #1
 800ef90:	42b3      	cmp	r3, r6
 800ef92:	db0b      	blt.n	800efac <__lshift+0x38>
 800ef94:	4638      	mov	r0, r7
 800ef96:	f7ff fd95 	bl	800eac4 <_Balloc>
 800ef9a:	4605      	mov	r5, r0
 800ef9c:	b948      	cbnz	r0, 800efb2 <__lshift+0x3e>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800efa4:	4b27      	ldr	r3, [pc, #156]	; (800f044 <__lshift+0xd0>)
 800efa6:	4828      	ldr	r0, [pc, #160]	; (800f048 <__lshift+0xd4>)
 800efa8:	f000 fbd4 	bl	800f754 <__assert_func>
 800efac:	3101      	adds	r1, #1
 800efae:	005b      	lsls	r3, r3, #1
 800efb0:	e7ee      	b.n	800ef90 <__lshift+0x1c>
 800efb2:	2300      	movs	r3, #0
 800efb4:	f100 0114 	add.w	r1, r0, #20
 800efb8:	f100 0210 	add.w	r2, r0, #16
 800efbc:	4618      	mov	r0, r3
 800efbe:	4553      	cmp	r3, sl
 800efc0:	db33      	blt.n	800f02a <__lshift+0xb6>
 800efc2:	6920      	ldr	r0, [r4, #16]
 800efc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800efc8:	f104 0314 	add.w	r3, r4, #20
 800efcc:	f019 091f 	ands.w	r9, r9, #31
 800efd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800efd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800efd8:	d02b      	beq.n	800f032 <__lshift+0xbe>
 800efda:	468a      	mov	sl, r1
 800efdc:	2200      	movs	r2, #0
 800efde:	f1c9 0e20 	rsb	lr, r9, #32
 800efe2:	6818      	ldr	r0, [r3, #0]
 800efe4:	fa00 f009 	lsl.w	r0, r0, r9
 800efe8:	4302      	orrs	r2, r0
 800efea:	f84a 2b04 	str.w	r2, [sl], #4
 800efee:	f853 2b04 	ldr.w	r2, [r3], #4
 800eff2:	459c      	cmp	ip, r3
 800eff4:	fa22 f20e 	lsr.w	r2, r2, lr
 800eff8:	d8f3      	bhi.n	800efe2 <__lshift+0x6e>
 800effa:	ebac 0304 	sub.w	r3, ip, r4
 800effe:	3b15      	subs	r3, #21
 800f000:	f023 0303 	bic.w	r3, r3, #3
 800f004:	3304      	adds	r3, #4
 800f006:	f104 0015 	add.w	r0, r4, #21
 800f00a:	4584      	cmp	ip, r0
 800f00c:	bf38      	it	cc
 800f00e:	2304      	movcc	r3, #4
 800f010:	50ca      	str	r2, [r1, r3]
 800f012:	b10a      	cbz	r2, 800f018 <__lshift+0xa4>
 800f014:	f108 0602 	add.w	r6, r8, #2
 800f018:	3e01      	subs	r6, #1
 800f01a:	4638      	mov	r0, r7
 800f01c:	4621      	mov	r1, r4
 800f01e:	612e      	str	r6, [r5, #16]
 800f020:	f7ff fd90 	bl	800eb44 <_Bfree>
 800f024:	4628      	mov	r0, r5
 800f026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f02a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f02e:	3301      	adds	r3, #1
 800f030:	e7c5      	b.n	800efbe <__lshift+0x4a>
 800f032:	3904      	subs	r1, #4
 800f034:	f853 2b04 	ldr.w	r2, [r3], #4
 800f038:	459c      	cmp	ip, r3
 800f03a:	f841 2f04 	str.w	r2, [r1, #4]!
 800f03e:	d8f9      	bhi.n	800f034 <__lshift+0xc0>
 800f040:	e7ea      	b.n	800f018 <__lshift+0xa4>
 800f042:	bf00      	nop
 800f044:	08010d00 	.word	0x08010d00
 800f048:	08010d90 	.word	0x08010d90

0800f04c <__mcmp>:
 800f04c:	4603      	mov	r3, r0
 800f04e:	690a      	ldr	r2, [r1, #16]
 800f050:	6900      	ldr	r0, [r0, #16]
 800f052:	b530      	push	{r4, r5, lr}
 800f054:	1a80      	subs	r0, r0, r2
 800f056:	d10d      	bne.n	800f074 <__mcmp+0x28>
 800f058:	3314      	adds	r3, #20
 800f05a:	3114      	adds	r1, #20
 800f05c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f060:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f064:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f068:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f06c:	4295      	cmp	r5, r2
 800f06e:	d002      	beq.n	800f076 <__mcmp+0x2a>
 800f070:	d304      	bcc.n	800f07c <__mcmp+0x30>
 800f072:	2001      	movs	r0, #1
 800f074:	bd30      	pop	{r4, r5, pc}
 800f076:	42a3      	cmp	r3, r4
 800f078:	d3f4      	bcc.n	800f064 <__mcmp+0x18>
 800f07a:	e7fb      	b.n	800f074 <__mcmp+0x28>
 800f07c:	f04f 30ff 	mov.w	r0, #4294967295
 800f080:	e7f8      	b.n	800f074 <__mcmp+0x28>
	...

0800f084 <__mdiff>:
 800f084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f088:	460c      	mov	r4, r1
 800f08a:	4606      	mov	r6, r0
 800f08c:	4611      	mov	r1, r2
 800f08e:	4620      	mov	r0, r4
 800f090:	4692      	mov	sl, r2
 800f092:	f7ff ffdb 	bl	800f04c <__mcmp>
 800f096:	1e05      	subs	r5, r0, #0
 800f098:	d111      	bne.n	800f0be <__mdiff+0x3a>
 800f09a:	4629      	mov	r1, r5
 800f09c:	4630      	mov	r0, r6
 800f09e:	f7ff fd11 	bl	800eac4 <_Balloc>
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	b928      	cbnz	r0, 800f0b2 <__mdiff+0x2e>
 800f0a6:	f240 2132 	movw	r1, #562	; 0x232
 800f0aa:	4b3c      	ldr	r3, [pc, #240]	; (800f19c <__mdiff+0x118>)
 800f0ac:	483c      	ldr	r0, [pc, #240]	; (800f1a0 <__mdiff+0x11c>)
 800f0ae:	f000 fb51 	bl	800f754 <__assert_func>
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f0b8:	4610      	mov	r0, r2
 800f0ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0be:	bfa4      	itt	ge
 800f0c0:	4653      	movge	r3, sl
 800f0c2:	46a2      	movge	sl, r4
 800f0c4:	4630      	mov	r0, r6
 800f0c6:	f8da 1004 	ldr.w	r1, [sl, #4]
 800f0ca:	bfa6      	itte	ge
 800f0cc:	461c      	movge	r4, r3
 800f0ce:	2500      	movge	r5, #0
 800f0d0:	2501      	movlt	r5, #1
 800f0d2:	f7ff fcf7 	bl	800eac4 <_Balloc>
 800f0d6:	4602      	mov	r2, r0
 800f0d8:	b918      	cbnz	r0, 800f0e2 <__mdiff+0x5e>
 800f0da:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f0de:	4b2f      	ldr	r3, [pc, #188]	; (800f19c <__mdiff+0x118>)
 800f0e0:	e7e4      	b.n	800f0ac <__mdiff+0x28>
 800f0e2:	f100 0814 	add.w	r8, r0, #20
 800f0e6:	f8da 7010 	ldr.w	r7, [sl, #16]
 800f0ea:	60c5      	str	r5, [r0, #12]
 800f0ec:	f04f 0c00 	mov.w	ip, #0
 800f0f0:	f10a 0514 	add.w	r5, sl, #20
 800f0f4:	f10a 0010 	add.w	r0, sl, #16
 800f0f8:	46c2      	mov	sl, r8
 800f0fa:	6926      	ldr	r6, [r4, #16]
 800f0fc:	f104 0914 	add.w	r9, r4, #20
 800f100:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800f104:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f108:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800f10c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f110:	fa1f f18b 	uxth.w	r1, fp
 800f114:	4461      	add	r1, ip
 800f116:	fa1f fc83 	uxth.w	ip, r3
 800f11a:	0c1b      	lsrs	r3, r3, #16
 800f11c:	eba1 010c 	sub.w	r1, r1, ip
 800f120:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f124:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f128:	b289      	uxth	r1, r1
 800f12a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800f12e:	454e      	cmp	r6, r9
 800f130:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f134:	f84a 3b04 	str.w	r3, [sl], #4
 800f138:	d8e6      	bhi.n	800f108 <__mdiff+0x84>
 800f13a:	1b33      	subs	r3, r6, r4
 800f13c:	3b15      	subs	r3, #21
 800f13e:	f023 0303 	bic.w	r3, r3, #3
 800f142:	3415      	adds	r4, #21
 800f144:	3304      	adds	r3, #4
 800f146:	42a6      	cmp	r6, r4
 800f148:	bf38      	it	cc
 800f14a:	2304      	movcc	r3, #4
 800f14c:	441d      	add	r5, r3
 800f14e:	4443      	add	r3, r8
 800f150:	461e      	mov	r6, r3
 800f152:	462c      	mov	r4, r5
 800f154:	4574      	cmp	r4, lr
 800f156:	d30e      	bcc.n	800f176 <__mdiff+0xf2>
 800f158:	f10e 0103 	add.w	r1, lr, #3
 800f15c:	1b49      	subs	r1, r1, r5
 800f15e:	f021 0103 	bic.w	r1, r1, #3
 800f162:	3d03      	subs	r5, #3
 800f164:	45ae      	cmp	lr, r5
 800f166:	bf38      	it	cc
 800f168:	2100      	movcc	r1, #0
 800f16a:	4419      	add	r1, r3
 800f16c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800f170:	b18b      	cbz	r3, 800f196 <__mdiff+0x112>
 800f172:	6117      	str	r7, [r2, #16]
 800f174:	e7a0      	b.n	800f0b8 <__mdiff+0x34>
 800f176:	f854 8b04 	ldr.w	r8, [r4], #4
 800f17a:	fa1f f188 	uxth.w	r1, r8
 800f17e:	4461      	add	r1, ip
 800f180:	1408      	asrs	r0, r1, #16
 800f182:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800f186:	b289      	uxth	r1, r1
 800f188:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f18c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f190:	f846 1b04 	str.w	r1, [r6], #4
 800f194:	e7de      	b.n	800f154 <__mdiff+0xd0>
 800f196:	3f01      	subs	r7, #1
 800f198:	e7e8      	b.n	800f16c <__mdiff+0xe8>
 800f19a:	bf00      	nop
 800f19c:	08010d00 	.word	0x08010d00
 800f1a0:	08010d90 	.word	0x08010d90

0800f1a4 <__ulp>:
 800f1a4:	4b11      	ldr	r3, [pc, #68]	; (800f1ec <__ulp+0x48>)
 800f1a6:	400b      	ands	r3, r1
 800f1a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	dd02      	ble.n	800f1b6 <__ulp+0x12>
 800f1b0:	2000      	movs	r0, #0
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	4770      	bx	lr
 800f1b6:	425b      	negs	r3, r3
 800f1b8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f1bc:	f04f 0000 	mov.w	r0, #0
 800f1c0:	f04f 0100 	mov.w	r1, #0
 800f1c4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f1c8:	da04      	bge.n	800f1d4 <__ulp+0x30>
 800f1ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f1ce:	fa43 f102 	asr.w	r1, r3, r2
 800f1d2:	4770      	bx	lr
 800f1d4:	f1a2 0314 	sub.w	r3, r2, #20
 800f1d8:	2b1e      	cmp	r3, #30
 800f1da:	bfd6      	itet	le
 800f1dc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f1e0:	2301      	movgt	r3, #1
 800f1e2:	fa22 f303 	lsrle.w	r3, r2, r3
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop
 800f1ec:	7ff00000 	.word	0x7ff00000

0800f1f0 <__b2d>:
 800f1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1f4:	6907      	ldr	r7, [r0, #16]
 800f1f6:	f100 0914 	add.w	r9, r0, #20
 800f1fa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800f1fe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800f202:	f1a7 0804 	sub.w	r8, r7, #4
 800f206:	4630      	mov	r0, r6
 800f208:	f7ff fd52 	bl	800ecb0 <__hi0bits>
 800f20c:	f1c0 0320 	rsb	r3, r0, #32
 800f210:	280a      	cmp	r0, #10
 800f212:	600b      	str	r3, [r1, #0]
 800f214:	491f      	ldr	r1, [pc, #124]	; (800f294 <__b2d+0xa4>)
 800f216:	dc17      	bgt.n	800f248 <__b2d+0x58>
 800f218:	45c1      	cmp	r9, r8
 800f21a:	bf28      	it	cs
 800f21c:	2200      	movcs	r2, #0
 800f21e:	f1c0 0c0b 	rsb	ip, r0, #11
 800f222:	fa26 f30c 	lsr.w	r3, r6, ip
 800f226:	bf38      	it	cc
 800f228:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800f22c:	ea43 0501 	orr.w	r5, r3, r1
 800f230:	f100 0315 	add.w	r3, r0, #21
 800f234:	fa06 f303 	lsl.w	r3, r6, r3
 800f238:	fa22 f20c 	lsr.w	r2, r2, ip
 800f23c:	ea43 0402 	orr.w	r4, r3, r2
 800f240:	4620      	mov	r0, r4
 800f242:	4629      	mov	r1, r5
 800f244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f248:	45c1      	cmp	r9, r8
 800f24a:	bf2e      	itee	cs
 800f24c:	2200      	movcs	r2, #0
 800f24e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800f252:	f1a7 0808 	subcc.w	r8, r7, #8
 800f256:	f1b0 030b 	subs.w	r3, r0, #11
 800f25a:	d016      	beq.n	800f28a <__b2d+0x9a>
 800f25c:	f1c3 0720 	rsb	r7, r3, #32
 800f260:	fa22 f107 	lsr.w	r1, r2, r7
 800f264:	45c8      	cmp	r8, r9
 800f266:	fa06 f603 	lsl.w	r6, r6, r3
 800f26a:	ea46 0601 	orr.w	r6, r6, r1
 800f26e:	bf94      	ite	ls
 800f270:	2100      	movls	r1, #0
 800f272:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800f276:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800f27a:	fa02 f003 	lsl.w	r0, r2, r3
 800f27e:	40f9      	lsrs	r1, r7
 800f280:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f284:	ea40 0401 	orr.w	r4, r0, r1
 800f288:	e7da      	b.n	800f240 <__b2d+0x50>
 800f28a:	4614      	mov	r4, r2
 800f28c:	ea46 0501 	orr.w	r5, r6, r1
 800f290:	e7d6      	b.n	800f240 <__b2d+0x50>
 800f292:	bf00      	nop
 800f294:	3ff00000 	.word	0x3ff00000

0800f298 <__d2b>:
 800f298:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f29c:	2101      	movs	r1, #1
 800f29e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800f2a2:	4690      	mov	r8, r2
 800f2a4:	461d      	mov	r5, r3
 800f2a6:	f7ff fc0d 	bl	800eac4 <_Balloc>
 800f2aa:	4604      	mov	r4, r0
 800f2ac:	b930      	cbnz	r0, 800f2bc <__d2b+0x24>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	f240 310a 	movw	r1, #778	; 0x30a
 800f2b4:	4b24      	ldr	r3, [pc, #144]	; (800f348 <__d2b+0xb0>)
 800f2b6:	4825      	ldr	r0, [pc, #148]	; (800f34c <__d2b+0xb4>)
 800f2b8:	f000 fa4c 	bl	800f754 <__assert_func>
 800f2bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f2c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800f2c4:	bb2d      	cbnz	r5, 800f312 <__d2b+0x7a>
 800f2c6:	9301      	str	r3, [sp, #4]
 800f2c8:	f1b8 0300 	subs.w	r3, r8, #0
 800f2cc:	d026      	beq.n	800f31c <__d2b+0x84>
 800f2ce:	4668      	mov	r0, sp
 800f2d0:	9300      	str	r3, [sp, #0]
 800f2d2:	f7ff fd0d 	bl	800ecf0 <__lo0bits>
 800f2d6:	9900      	ldr	r1, [sp, #0]
 800f2d8:	b1f0      	cbz	r0, 800f318 <__d2b+0x80>
 800f2da:	9a01      	ldr	r2, [sp, #4]
 800f2dc:	f1c0 0320 	rsb	r3, r0, #32
 800f2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800f2e4:	430b      	orrs	r3, r1
 800f2e6:	40c2      	lsrs	r2, r0
 800f2e8:	6163      	str	r3, [r4, #20]
 800f2ea:	9201      	str	r2, [sp, #4]
 800f2ec:	9b01      	ldr	r3, [sp, #4]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	bf14      	ite	ne
 800f2f2:	2102      	movne	r1, #2
 800f2f4:	2101      	moveq	r1, #1
 800f2f6:	61a3      	str	r3, [r4, #24]
 800f2f8:	6121      	str	r1, [r4, #16]
 800f2fa:	b1c5      	cbz	r5, 800f32e <__d2b+0x96>
 800f2fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f300:	4405      	add	r5, r0
 800f302:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f306:	603d      	str	r5, [r7, #0]
 800f308:	6030      	str	r0, [r6, #0]
 800f30a:	4620      	mov	r0, r4
 800f30c:	b002      	add	sp, #8
 800f30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f316:	e7d6      	b.n	800f2c6 <__d2b+0x2e>
 800f318:	6161      	str	r1, [r4, #20]
 800f31a:	e7e7      	b.n	800f2ec <__d2b+0x54>
 800f31c:	a801      	add	r0, sp, #4
 800f31e:	f7ff fce7 	bl	800ecf0 <__lo0bits>
 800f322:	2101      	movs	r1, #1
 800f324:	9b01      	ldr	r3, [sp, #4]
 800f326:	6121      	str	r1, [r4, #16]
 800f328:	6163      	str	r3, [r4, #20]
 800f32a:	3020      	adds	r0, #32
 800f32c:	e7e5      	b.n	800f2fa <__d2b+0x62>
 800f32e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800f332:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f336:	6038      	str	r0, [r7, #0]
 800f338:	6918      	ldr	r0, [r3, #16]
 800f33a:	f7ff fcb9 	bl	800ecb0 <__hi0bits>
 800f33e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800f342:	6031      	str	r1, [r6, #0]
 800f344:	e7e1      	b.n	800f30a <__d2b+0x72>
 800f346:	bf00      	nop
 800f348:	08010d00 	.word	0x08010d00
 800f34c:	08010d90 	.word	0x08010d90

0800f350 <__ratio>:
 800f350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f354:	4688      	mov	r8, r1
 800f356:	4669      	mov	r1, sp
 800f358:	4681      	mov	r9, r0
 800f35a:	f7ff ff49 	bl	800f1f0 <__b2d>
 800f35e:	460f      	mov	r7, r1
 800f360:	4604      	mov	r4, r0
 800f362:	460d      	mov	r5, r1
 800f364:	4640      	mov	r0, r8
 800f366:	a901      	add	r1, sp, #4
 800f368:	f7ff ff42 	bl	800f1f0 <__b2d>
 800f36c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f370:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f374:	468b      	mov	fp, r1
 800f376:	eba3 0c02 	sub.w	ip, r3, r2
 800f37a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f37e:	1a9b      	subs	r3, r3, r2
 800f380:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f384:	2b00      	cmp	r3, #0
 800f386:	bfd5      	itete	le
 800f388:	460a      	movle	r2, r1
 800f38a:	462a      	movgt	r2, r5
 800f38c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f390:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f394:	bfd8      	it	le
 800f396:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f39a:	465b      	mov	r3, fp
 800f39c:	4602      	mov	r2, r0
 800f39e:	4639      	mov	r1, r7
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	f7f1 fa2f 	bl	8000804 <__aeabi_ddiv>
 800f3a6:	b003      	add	sp, #12
 800f3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f3ac <__copybits>:
 800f3ac:	3901      	subs	r1, #1
 800f3ae:	b570      	push	{r4, r5, r6, lr}
 800f3b0:	1149      	asrs	r1, r1, #5
 800f3b2:	6914      	ldr	r4, [r2, #16]
 800f3b4:	3101      	adds	r1, #1
 800f3b6:	f102 0314 	add.w	r3, r2, #20
 800f3ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f3be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f3c2:	1f05      	subs	r5, r0, #4
 800f3c4:	42a3      	cmp	r3, r4
 800f3c6:	d30c      	bcc.n	800f3e2 <__copybits+0x36>
 800f3c8:	1aa3      	subs	r3, r4, r2
 800f3ca:	3b11      	subs	r3, #17
 800f3cc:	f023 0303 	bic.w	r3, r3, #3
 800f3d0:	3211      	adds	r2, #17
 800f3d2:	42a2      	cmp	r2, r4
 800f3d4:	bf88      	it	hi
 800f3d6:	2300      	movhi	r3, #0
 800f3d8:	4418      	add	r0, r3
 800f3da:	2300      	movs	r3, #0
 800f3dc:	4288      	cmp	r0, r1
 800f3de:	d305      	bcc.n	800f3ec <__copybits+0x40>
 800f3e0:	bd70      	pop	{r4, r5, r6, pc}
 800f3e2:	f853 6b04 	ldr.w	r6, [r3], #4
 800f3e6:	f845 6f04 	str.w	r6, [r5, #4]!
 800f3ea:	e7eb      	b.n	800f3c4 <__copybits+0x18>
 800f3ec:	f840 3b04 	str.w	r3, [r0], #4
 800f3f0:	e7f4      	b.n	800f3dc <__copybits+0x30>

0800f3f2 <__any_on>:
 800f3f2:	f100 0214 	add.w	r2, r0, #20
 800f3f6:	6900      	ldr	r0, [r0, #16]
 800f3f8:	114b      	asrs	r3, r1, #5
 800f3fa:	4298      	cmp	r0, r3
 800f3fc:	b510      	push	{r4, lr}
 800f3fe:	db11      	blt.n	800f424 <__any_on+0x32>
 800f400:	dd0a      	ble.n	800f418 <__any_on+0x26>
 800f402:	f011 011f 	ands.w	r1, r1, #31
 800f406:	d007      	beq.n	800f418 <__any_on+0x26>
 800f408:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f40c:	fa24 f001 	lsr.w	r0, r4, r1
 800f410:	fa00 f101 	lsl.w	r1, r0, r1
 800f414:	428c      	cmp	r4, r1
 800f416:	d10b      	bne.n	800f430 <__any_on+0x3e>
 800f418:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d803      	bhi.n	800f428 <__any_on+0x36>
 800f420:	2000      	movs	r0, #0
 800f422:	bd10      	pop	{r4, pc}
 800f424:	4603      	mov	r3, r0
 800f426:	e7f7      	b.n	800f418 <__any_on+0x26>
 800f428:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f42c:	2900      	cmp	r1, #0
 800f42e:	d0f5      	beq.n	800f41c <__any_on+0x2a>
 800f430:	2001      	movs	r0, #1
 800f432:	e7f6      	b.n	800f422 <__any_on+0x30>

0800f434 <_calloc_r>:
 800f434:	b538      	push	{r3, r4, r5, lr}
 800f436:	fb02 f501 	mul.w	r5, r2, r1
 800f43a:	4629      	mov	r1, r5
 800f43c:	f7fc fb38 	bl	800bab0 <_malloc_r>
 800f440:	4604      	mov	r4, r0
 800f442:	b118      	cbz	r0, 800f44c <_calloc_r+0x18>
 800f444:	462a      	mov	r2, r5
 800f446:	2100      	movs	r1, #0
 800f448:	f7fc fade 	bl	800ba08 <memset>
 800f44c:	4620      	mov	r0, r4
 800f44e:	bd38      	pop	{r3, r4, r5, pc}

0800f450 <__ssputs_r>:
 800f450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f454:	688e      	ldr	r6, [r1, #8]
 800f456:	4682      	mov	sl, r0
 800f458:	429e      	cmp	r6, r3
 800f45a:	460c      	mov	r4, r1
 800f45c:	4690      	mov	r8, r2
 800f45e:	461f      	mov	r7, r3
 800f460:	d838      	bhi.n	800f4d4 <__ssputs_r+0x84>
 800f462:	898a      	ldrh	r2, [r1, #12]
 800f464:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f468:	d032      	beq.n	800f4d0 <__ssputs_r+0x80>
 800f46a:	6825      	ldr	r5, [r4, #0]
 800f46c:	6909      	ldr	r1, [r1, #16]
 800f46e:	3301      	adds	r3, #1
 800f470:	eba5 0901 	sub.w	r9, r5, r1
 800f474:	6965      	ldr	r5, [r4, #20]
 800f476:	444b      	add	r3, r9
 800f478:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f47c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f480:	106d      	asrs	r5, r5, #1
 800f482:	429d      	cmp	r5, r3
 800f484:	bf38      	it	cc
 800f486:	461d      	movcc	r5, r3
 800f488:	0553      	lsls	r3, r2, #21
 800f48a:	d531      	bpl.n	800f4f0 <__ssputs_r+0xa0>
 800f48c:	4629      	mov	r1, r5
 800f48e:	f7fc fb0f 	bl	800bab0 <_malloc_r>
 800f492:	4606      	mov	r6, r0
 800f494:	b950      	cbnz	r0, 800f4ac <__ssputs_r+0x5c>
 800f496:	230c      	movs	r3, #12
 800f498:	f04f 30ff 	mov.w	r0, #4294967295
 800f49c:	f8ca 3000 	str.w	r3, [sl]
 800f4a0:	89a3      	ldrh	r3, [r4, #12]
 800f4a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4a6:	81a3      	strh	r3, [r4, #12]
 800f4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ac:	464a      	mov	r2, r9
 800f4ae:	6921      	ldr	r1, [r4, #16]
 800f4b0:	f7ff faee 	bl	800ea90 <memcpy>
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f4ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4be:	81a3      	strh	r3, [r4, #12]
 800f4c0:	6126      	str	r6, [r4, #16]
 800f4c2:	444e      	add	r6, r9
 800f4c4:	6026      	str	r6, [r4, #0]
 800f4c6:	463e      	mov	r6, r7
 800f4c8:	6165      	str	r5, [r4, #20]
 800f4ca:	eba5 0509 	sub.w	r5, r5, r9
 800f4ce:	60a5      	str	r5, [r4, #8]
 800f4d0:	42be      	cmp	r6, r7
 800f4d2:	d900      	bls.n	800f4d6 <__ssputs_r+0x86>
 800f4d4:	463e      	mov	r6, r7
 800f4d6:	4632      	mov	r2, r6
 800f4d8:	4641      	mov	r1, r8
 800f4da:	6820      	ldr	r0, [r4, #0]
 800f4dc:	f000 f96d 	bl	800f7ba <memmove>
 800f4e0:	68a3      	ldr	r3, [r4, #8]
 800f4e2:	6822      	ldr	r2, [r4, #0]
 800f4e4:	1b9b      	subs	r3, r3, r6
 800f4e6:	4432      	add	r2, r6
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	60a3      	str	r3, [r4, #8]
 800f4ec:	6022      	str	r2, [r4, #0]
 800f4ee:	e7db      	b.n	800f4a8 <__ssputs_r+0x58>
 800f4f0:	462a      	mov	r2, r5
 800f4f2:	f000 f97c 	bl	800f7ee <_realloc_r>
 800f4f6:	4606      	mov	r6, r0
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	d1e1      	bne.n	800f4c0 <__ssputs_r+0x70>
 800f4fc:	4650      	mov	r0, sl
 800f4fe:	6921      	ldr	r1, [r4, #16]
 800f500:	f7fc fa8a 	bl	800ba18 <_free_r>
 800f504:	e7c7      	b.n	800f496 <__ssputs_r+0x46>
	...

0800f508 <_svfiprintf_r>:
 800f508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f50c:	4698      	mov	r8, r3
 800f50e:	898b      	ldrh	r3, [r1, #12]
 800f510:	4607      	mov	r7, r0
 800f512:	061b      	lsls	r3, r3, #24
 800f514:	460d      	mov	r5, r1
 800f516:	4614      	mov	r4, r2
 800f518:	b09d      	sub	sp, #116	; 0x74
 800f51a:	d50e      	bpl.n	800f53a <_svfiprintf_r+0x32>
 800f51c:	690b      	ldr	r3, [r1, #16]
 800f51e:	b963      	cbnz	r3, 800f53a <_svfiprintf_r+0x32>
 800f520:	2140      	movs	r1, #64	; 0x40
 800f522:	f7fc fac5 	bl	800bab0 <_malloc_r>
 800f526:	6028      	str	r0, [r5, #0]
 800f528:	6128      	str	r0, [r5, #16]
 800f52a:	b920      	cbnz	r0, 800f536 <_svfiprintf_r+0x2e>
 800f52c:	230c      	movs	r3, #12
 800f52e:	603b      	str	r3, [r7, #0]
 800f530:	f04f 30ff 	mov.w	r0, #4294967295
 800f534:	e0d1      	b.n	800f6da <_svfiprintf_r+0x1d2>
 800f536:	2340      	movs	r3, #64	; 0x40
 800f538:	616b      	str	r3, [r5, #20]
 800f53a:	2300      	movs	r3, #0
 800f53c:	9309      	str	r3, [sp, #36]	; 0x24
 800f53e:	2320      	movs	r3, #32
 800f540:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f544:	2330      	movs	r3, #48	; 0x30
 800f546:	f04f 0901 	mov.w	r9, #1
 800f54a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f54e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f6f4 <_svfiprintf_r+0x1ec>
 800f552:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f556:	4623      	mov	r3, r4
 800f558:	469a      	mov	sl, r3
 800f55a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f55e:	b10a      	cbz	r2, 800f564 <_svfiprintf_r+0x5c>
 800f560:	2a25      	cmp	r2, #37	; 0x25
 800f562:	d1f9      	bne.n	800f558 <_svfiprintf_r+0x50>
 800f564:	ebba 0b04 	subs.w	fp, sl, r4
 800f568:	d00b      	beq.n	800f582 <_svfiprintf_r+0x7a>
 800f56a:	465b      	mov	r3, fp
 800f56c:	4622      	mov	r2, r4
 800f56e:	4629      	mov	r1, r5
 800f570:	4638      	mov	r0, r7
 800f572:	f7ff ff6d 	bl	800f450 <__ssputs_r>
 800f576:	3001      	adds	r0, #1
 800f578:	f000 80aa 	beq.w	800f6d0 <_svfiprintf_r+0x1c8>
 800f57c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f57e:	445a      	add	r2, fp
 800f580:	9209      	str	r2, [sp, #36]	; 0x24
 800f582:	f89a 3000 	ldrb.w	r3, [sl]
 800f586:	2b00      	cmp	r3, #0
 800f588:	f000 80a2 	beq.w	800f6d0 <_svfiprintf_r+0x1c8>
 800f58c:	2300      	movs	r3, #0
 800f58e:	f04f 32ff 	mov.w	r2, #4294967295
 800f592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f596:	f10a 0a01 	add.w	sl, sl, #1
 800f59a:	9304      	str	r3, [sp, #16]
 800f59c:	9307      	str	r3, [sp, #28]
 800f59e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5a2:	931a      	str	r3, [sp, #104]	; 0x68
 800f5a4:	4654      	mov	r4, sl
 800f5a6:	2205      	movs	r2, #5
 800f5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5ac:	4851      	ldr	r0, [pc, #324]	; (800f6f4 <_svfiprintf_r+0x1ec>)
 800f5ae:	f7ff fa61 	bl	800ea74 <memchr>
 800f5b2:	9a04      	ldr	r2, [sp, #16]
 800f5b4:	b9d8      	cbnz	r0, 800f5ee <_svfiprintf_r+0xe6>
 800f5b6:	06d0      	lsls	r0, r2, #27
 800f5b8:	bf44      	itt	mi
 800f5ba:	2320      	movmi	r3, #32
 800f5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5c0:	0711      	lsls	r1, r2, #28
 800f5c2:	bf44      	itt	mi
 800f5c4:	232b      	movmi	r3, #43	; 0x2b
 800f5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800f5ce:	2b2a      	cmp	r3, #42	; 0x2a
 800f5d0:	d015      	beq.n	800f5fe <_svfiprintf_r+0xf6>
 800f5d2:	4654      	mov	r4, sl
 800f5d4:	2000      	movs	r0, #0
 800f5d6:	f04f 0c0a 	mov.w	ip, #10
 800f5da:	9a07      	ldr	r2, [sp, #28]
 800f5dc:	4621      	mov	r1, r4
 800f5de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5e2:	3b30      	subs	r3, #48	; 0x30
 800f5e4:	2b09      	cmp	r3, #9
 800f5e6:	d94e      	bls.n	800f686 <_svfiprintf_r+0x17e>
 800f5e8:	b1b0      	cbz	r0, 800f618 <_svfiprintf_r+0x110>
 800f5ea:	9207      	str	r2, [sp, #28]
 800f5ec:	e014      	b.n	800f618 <_svfiprintf_r+0x110>
 800f5ee:	eba0 0308 	sub.w	r3, r0, r8
 800f5f2:	fa09 f303 	lsl.w	r3, r9, r3
 800f5f6:	4313      	orrs	r3, r2
 800f5f8:	46a2      	mov	sl, r4
 800f5fa:	9304      	str	r3, [sp, #16]
 800f5fc:	e7d2      	b.n	800f5a4 <_svfiprintf_r+0x9c>
 800f5fe:	9b03      	ldr	r3, [sp, #12]
 800f600:	1d19      	adds	r1, r3, #4
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	9103      	str	r1, [sp, #12]
 800f606:	2b00      	cmp	r3, #0
 800f608:	bfbb      	ittet	lt
 800f60a:	425b      	neglt	r3, r3
 800f60c:	f042 0202 	orrlt.w	r2, r2, #2
 800f610:	9307      	strge	r3, [sp, #28]
 800f612:	9307      	strlt	r3, [sp, #28]
 800f614:	bfb8      	it	lt
 800f616:	9204      	strlt	r2, [sp, #16]
 800f618:	7823      	ldrb	r3, [r4, #0]
 800f61a:	2b2e      	cmp	r3, #46	; 0x2e
 800f61c:	d10c      	bne.n	800f638 <_svfiprintf_r+0x130>
 800f61e:	7863      	ldrb	r3, [r4, #1]
 800f620:	2b2a      	cmp	r3, #42	; 0x2a
 800f622:	d135      	bne.n	800f690 <_svfiprintf_r+0x188>
 800f624:	9b03      	ldr	r3, [sp, #12]
 800f626:	3402      	adds	r4, #2
 800f628:	1d1a      	adds	r2, r3, #4
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	9203      	str	r2, [sp, #12]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	bfb8      	it	lt
 800f632:	f04f 33ff 	movlt.w	r3, #4294967295
 800f636:	9305      	str	r3, [sp, #20]
 800f638:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f704 <_svfiprintf_r+0x1fc>
 800f63c:	2203      	movs	r2, #3
 800f63e:	4650      	mov	r0, sl
 800f640:	7821      	ldrb	r1, [r4, #0]
 800f642:	f7ff fa17 	bl	800ea74 <memchr>
 800f646:	b140      	cbz	r0, 800f65a <_svfiprintf_r+0x152>
 800f648:	2340      	movs	r3, #64	; 0x40
 800f64a:	eba0 000a 	sub.w	r0, r0, sl
 800f64e:	fa03 f000 	lsl.w	r0, r3, r0
 800f652:	9b04      	ldr	r3, [sp, #16]
 800f654:	3401      	adds	r4, #1
 800f656:	4303      	orrs	r3, r0
 800f658:	9304      	str	r3, [sp, #16]
 800f65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f65e:	2206      	movs	r2, #6
 800f660:	4825      	ldr	r0, [pc, #148]	; (800f6f8 <_svfiprintf_r+0x1f0>)
 800f662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f666:	f7ff fa05 	bl	800ea74 <memchr>
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d038      	beq.n	800f6e0 <_svfiprintf_r+0x1d8>
 800f66e:	4b23      	ldr	r3, [pc, #140]	; (800f6fc <_svfiprintf_r+0x1f4>)
 800f670:	bb1b      	cbnz	r3, 800f6ba <_svfiprintf_r+0x1b2>
 800f672:	9b03      	ldr	r3, [sp, #12]
 800f674:	3307      	adds	r3, #7
 800f676:	f023 0307 	bic.w	r3, r3, #7
 800f67a:	3308      	adds	r3, #8
 800f67c:	9303      	str	r3, [sp, #12]
 800f67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f680:	4433      	add	r3, r6
 800f682:	9309      	str	r3, [sp, #36]	; 0x24
 800f684:	e767      	b.n	800f556 <_svfiprintf_r+0x4e>
 800f686:	460c      	mov	r4, r1
 800f688:	2001      	movs	r0, #1
 800f68a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f68e:	e7a5      	b.n	800f5dc <_svfiprintf_r+0xd4>
 800f690:	2300      	movs	r3, #0
 800f692:	f04f 0c0a 	mov.w	ip, #10
 800f696:	4619      	mov	r1, r3
 800f698:	3401      	adds	r4, #1
 800f69a:	9305      	str	r3, [sp, #20]
 800f69c:	4620      	mov	r0, r4
 800f69e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6a2:	3a30      	subs	r2, #48	; 0x30
 800f6a4:	2a09      	cmp	r2, #9
 800f6a6:	d903      	bls.n	800f6b0 <_svfiprintf_r+0x1a8>
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d0c5      	beq.n	800f638 <_svfiprintf_r+0x130>
 800f6ac:	9105      	str	r1, [sp, #20]
 800f6ae:	e7c3      	b.n	800f638 <_svfiprintf_r+0x130>
 800f6b0:	4604      	mov	r4, r0
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6b8:	e7f0      	b.n	800f69c <_svfiprintf_r+0x194>
 800f6ba:	ab03      	add	r3, sp, #12
 800f6bc:	9300      	str	r3, [sp, #0]
 800f6be:	462a      	mov	r2, r5
 800f6c0:	4638      	mov	r0, r7
 800f6c2:	4b0f      	ldr	r3, [pc, #60]	; (800f700 <_svfiprintf_r+0x1f8>)
 800f6c4:	a904      	add	r1, sp, #16
 800f6c6:	f7fc faeb 	bl	800bca0 <_printf_float>
 800f6ca:	1c42      	adds	r2, r0, #1
 800f6cc:	4606      	mov	r6, r0
 800f6ce:	d1d6      	bne.n	800f67e <_svfiprintf_r+0x176>
 800f6d0:	89ab      	ldrh	r3, [r5, #12]
 800f6d2:	065b      	lsls	r3, r3, #25
 800f6d4:	f53f af2c 	bmi.w	800f530 <_svfiprintf_r+0x28>
 800f6d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6da:	b01d      	add	sp, #116	; 0x74
 800f6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6e0:	ab03      	add	r3, sp, #12
 800f6e2:	9300      	str	r3, [sp, #0]
 800f6e4:	462a      	mov	r2, r5
 800f6e6:	4638      	mov	r0, r7
 800f6e8:	4b05      	ldr	r3, [pc, #20]	; (800f700 <_svfiprintf_r+0x1f8>)
 800f6ea:	a904      	add	r1, sp, #16
 800f6ec:	f7fc fd74 	bl	800c1d8 <_printf_i>
 800f6f0:	e7eb      	b.n	800f6ca <_svfiprintf_r+0x1c2>
 800f6f2:	bf00      	nop
 800f6f4:	08010eec 	.word	0x08010eec
 800f6f8:	08010ef6 	.word	0x08010ef6
 800f6fc:	0800bca1 	.word	0x0800bca1
 800f700:	0800f451 	.word	0x0800f451
 800f704:	08010ef2 	.word	0x08010ef2

0800f708 <nan>:
 800f708:	2000      	movs	r0, #0
 800f70a:	4901      	ldr	r1, [pc, #4]	; (800f710 <nan+0x8>)
 800f70c:	4770      	bx	lr
 800f70e:	bf00      	nop
 800f710:	7ff80000 	.word	0x7ff80000

0800f714 <strncmp>:
 800f714:	b510      	push	{r4, lr}
 800f716:	b16a      	cbz	r2, 800f734 <strncmp+0x20>
 800f718:	3901      	subs	r1, #1
 800f71a:	1884      	adds	r4, r0, r2
 800f71c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f720:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f724:	4293      	cmp	r3, r2
 800f726:	d103      	bne.n	800f730 <strncmp+0x1c>
 800f728:	42a0      	cmp	r0, r4
 800f72a:	d001      	beq.n	800f730 <strncmp+0x1c>
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d1f5      	bne.n	800f71c <strncmp+0x8>
 800f730:	1a98      	subs	r0, r3, r2
 800f732:	bd10      	pop	{r4, pc}
 800f734:	4610      	mov	r0, r2
 800f736:	e7fc      	b.n	800f732 <strncmp+0x1e>

0800f738 <__ascii_wctomb>:
 800f738:	4603      	mov	r3, r0
 800f73a:	4608      	mov	r0, r1
 800f73c:	b141      	cbz	r1, 800f750 <__ascii_wctomb+0x18>
 800f73e:	2aff      	cmp	r2, #255	; 0xff
 800f740:	d904      	bls.n	800f74c <__ascii_wctomb+0x14>
 800f742:	228a      	movs	r2, #138	; 0x8a
 800f744:	f04f 30ff 	mov.w	r0, #4294967295
 800f748:	601a      	str	r2, [r3, #0]
 800f74a:	4770      	bx	lr
 800f74c:	2001      	movs	r0, #1
 800f74e:	700a      	strb	r2, [r1, #0]
 800f750:	4770      	bx	lr
	...

0800f754 <__assert_func>:
 800f754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f756:	4614      	mov	r4, r2
 800f758:	461a      	mov	r2, r3
 800f75a:	4b09      	ldr	r3, [pc, #36]	; (800f780 <__assert_func+0x2c>)
 800f75c:	4605      	mov	r5, r0
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	68d8      	ldr	r0, [r3, #12]
 800f762:	b14c      	cbz	r4, 800f778 <__assert_func+0x24>
 800f764:	4b07      	ldr	r3, [pc, #28]	; (800f784 <__assert_func+0x30>)
 800f766:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f76a:	9100      	str	r1, [sp, #0]
 800f76c:	462b      	mov	r3, r5
 800f76e:	4906      	ldr	r1, [pc, #24]	; (800f788 <__assert_func+0x34>)
 800f770:	f000 f80e 	bl	800f790 <fiprintf>
 800f774:	f000 fa78 	bl	800fc68 <abort>
 800f778:	4b04      	ldr	r3, [pc, #16]	; (800f78c <__assert_func+0x38>)
 800f77a:	461c      	mov	r4, r3
 800f77c:	e7f3      	b.n	800f766 <__assert_func+0x12>
 800f77e:	bf00      	nop
 800f780:	20000040 	.word	0x20000040
 800f784:	08010efd 	.word	0x08010efd
 800f788:	08010f0a 	.word	0x08010f0a
 800f78c:	08010f38 	.word	0x08010f38

0800f790 <fiprintf>:
 800f790:	b40e      	push	{r1, r2, r3}
 800f792:	b503      	push	{r0, r1, lr}
 800f794:	4601      	mov	r1, r0
 800f796:	ab03      	add	r3, sp, #12
 800f798:	4805      	ldr	r0, [pc, #20]	; (800f7b0 <fiprintf+0x20>)
 800f79a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f79e:	6800      	ldr	r0, [r0, #0]
 800f7a0:	9301      	str	r3, [sp, #4]
 800f7a2:	f000 f871 	bl	800f888 <_vfiprintf_r>
 800f7a6:	b002      	add	sp, #8
 800f7a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7ac:	b003      	add	sp, #12
 800f7ae:	4770      	bx	lr
 800f7b0:	20000040 	.word	0x20000040

0800f7b4 <__retarget_lock_init_recursive>:
 800f7b4:	4770      	bx	lr

0800f7b6 <__retarget_lock_acquire_recursive>:
 800f7b6:	4770      	bx	lr

0800f7b8 <__retarget_lock_release_recursive>:
 800f7b8:	4770      	bx	lr

0800f7ba <memmove>:
 800f7ba:	4288      	cmp	r0, r1
 800f7bc:	b510      	push	{r4, lr}
 800f7be:	eb01 0402 	add.w	r4, r1, r2
 800f7c2:	d902      	bls.n	800f7ca <memmove+0x10>
 800f7c4:	4284      	cmp	r4, r0
 800f7c6:	4623      	mov	r3, r4
 800f7c8:	d807      	bhi.n	800f7da <memmove+0x20>
 800f7ca:	1e43      	subs	r3, r0, #1
 800f7cc:	42a1      	cmp	r1, r4
 800f7ce:	d008      	beq.n	800f7e2 <memmove+0x28>
 800f7d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7d8:	e7f8      	b.n	800f7cc <memmove+0x12>
 800f7da:	4601      	mov	r1, r0
 800f7dc:	4402      	add	r2, r0
 800f7de:	428a      	cmp	r2, r1
 800f7e0:	d100      	bne.n	800f7e4 <memmove+0x2a>
 800f7e2:	bd10      	pop	{r4, pc}
 800f7e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7ec:	e7f7      	b.n	800f7de <memmove+0x24>

0800f7ee <_realloc_r>:
 800f7ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7f0:	4607      	mov	r7, r0
 800f7f2:	4614      	mov	r4, r2
 800f7f4:	460e      	mov	r6, r1
 800f7f6:	b921      	cbnz	r1, 800f802 <_realloc_r+0x14>
 800f7f8:	4611      	mov	r1, r2
 800f7fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f7fe:	f7fc b957 	b.w	800bab0 <_malloc_r>
 800f802:	b922      	cbnz	r2, 800f80e <_realloc_r+0x20>
 800f804:	f7fc f908 	bl	800ba18 <_free_r>
 800f808:	4625      	mov	r5, r4
 800f80a:	4628      	mov	r0, r5
 800f80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f80e:	f000 fc4f 	bl	80100b0 <_malloc_usable_size_r>
 800f812:	42a0      	cmp	r0, r4
 800f814:	d20f      	bcs.n	800f836 <_realloc_r+0x48>
 800f816:	4621      	mov	r1, r4
 800f818:	4638      	mov	r0, r7
 800f81a:	f7fc f949 	bl	800bab0 <_malloc_r>
 800f81e:	4605      	mov	r5, r0
 800f820:	2800      	cmp	r0, #0
 800f822:	d0f2      	beq.n	800f80a <_realloc_r+0x1c>
 800f824:	4631      	mov	r1, r6
 800f826:	4622      	mov	r2, r4
 800f828:	f7ff f932 	bl	800ea90 <memcpy>
 800f82c:	4631      	mov	r1, r6
 800f82e:	4638      	mov	r0, r7
 800f830:	f7fc f8f2 	bl	800ba18 <_free_r>
 800f834:	e7e9      	b.n	800f80a <_realloc_r+0x1c>
 800f836:	4635      	mov	r5, r6
 800f838:	e7e7      	b.n	800f80a <_realloc_r+0x1c>

0800f83a <__sfputc_r>:
 800f83a:	6893      	ldr	r3, [r2, #8]
 800f83c:	b410      	push	{r4}
 800f83e:	3b01      	subs	r3, #1
 800f840:	2b00      	cmp	r3, #0
 800f842:	6093      	str	r3, [r2, #8]
 800f844:	da07      	bge.n	800f856 <__sfputc_r+0x1c>
 800f846:	6994      	ldr	r4, [r2, #24]
 800f848:	42a3      	cmp	r3, r4
 800f84a:	db01      	blt.n	800f850 <__sfputc_r+0x16>
 800f84c:	290a      	cmp	r1, #10
 800f84e:	d102      	bne.n	800f856 <__sfputc_r+0x1c>
 800f850:	bc10      	pop	{r4}
 800f852:	f000 b949 	b.w	800fae8 <__swbuf_r>
 800f856:	6813      	ldr	r3, [r2, #0]
 800f858:	1c58      	adds	r0, r3, #1
 800f85a:	6010      	str	r0, [r2, #0]
 800f85c:	7019      	strb	r1, [r3, #0]
 800f85e:	4608      	mov	r0, r1
 800f860:	bc10      	pop	{r4}
 800f862:	4770      	bx	lr

0800f864 <__sfputs_r>:
 800f864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f866:	4606      	mov	r6, r0
 800f868:	460f      	mov	r7, r1
 800f86a:	4614      	mov	r4, r2
 800f86c:	18d5      	adds	r5, r2, r3
 800f86e:	42ac      	cmp	r4, r5
 800f870:	d101      	bne.n	800f876 <__sfputs_r+0x12>
 800f872:	2000      	movs	r0, #0
 800f874:	e007      	b.n	800f886 <__sfputs_r+0x22>
 800f876:	463a      	mov	r2, r7
 800f878:	4630      	mov	r0, r6
 800f87a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f87e:	f7ff ffdc 	bl	800f83a <__sfputc_r>
 800f882:	1c43      	adds	r3, r0, #1
 800f884:	d1f3      	bne.n	800f86e <__sfputs_r+0xa>
 800f886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f888 <_vfiprintf_r>:
 800f888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f88c:	460d      	mov	r5, r1
 800f88e:	4614      	mov	r4, r2
 800f890:	4698      	mov	r8, r3
 800f892:	4606      	mov	r6, r0
 800f894:	b09d      	sub	sp, #116	; 0x74
 800f896:	b118      	cbz	r0, 800f8a0 <_vfiprintf_r+0x18>
 800f898:	6983      	ldr	r3, [r0, #24]
 800f89a:	b90b      	cbnz	r3, 800f8a0 <_vfiprintf_r+0x18>
 800f89c:	f000 fb06 	bl	800feac <__sinit>
 800f8a0:	4b89      	ldr	r3, [pc, #548]	; (800fac8 <_vfiprintf_r+0x240>)
 800f8a2:	429d      	cmp	r5, r3
 800f8a4:	d11b      	bne.n	800f8de <_vfiprintf_r+0x56>
 800f8a6:	6875      	ldr	r5, [r6, #4]
 800f8a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8aa:	07d9      	lsls	r1, r3, #31
 800f8ac:	d405      	bmi.n	800f8ba <_vfiprintf_r+0x32>
 800f8ae:	89ab      	ldrh	r3, [r5, #12]
 800f8b0:	059a      	lsls	r2, r3, #22
 800f8b2:	d402      	bmi.n	800f8ba <_vfiprintf_r+0x32>
 800f8b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8b6:	f7ff ff7e 	bl	800f7b6 <__retarget_lock_acquire_recursive>
 800f8ba:	89ab      	ldrh	r3, [r5, #12]
 800f8bc:	071b      	lsls	r3, r3, #28
 800f8be:	d501      	bpl.n	800f8c4 <_vfiprintf_r+0x3c>
 800f8c0:	692b      	ldr	r3, [r5, #16]
 800f8c2:	b9eb      	cbnz	r3, 800f900 <_vfiprintf_r+0x78>
 800f8c4:	4629      	mov	r1, r5
 800f8c6:	4630      	mov	r0, r6
 800f8c8:	f000 f960 	bl	800fb8c <__swsetup_r>
 800f8cc:	b1c0      	cbz	r0, 800f900 <_vfiprintf_r+0x78>
 800f8ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8d0:	07dc      	lsls	r4, r3, #31
 800f8d2:	d50e      	bpl.n	800f8f2 <_vfiprintf_r+0x6a>
 800f8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8d8:	b01d      	add	sp, #116	; 0x74
 800f8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8de:	4b7b      	ldr	r3, [pc, #492]	; (800facc <_vfiprintf_r+0x244>)
 800f8e0:	429d      	cmp	r5, r3
 800f8e2:	d101      	bne.n	800f8e8 <_vfiprintf_r+0x60>
 800f8e4:	68b5      	ldr	r5, [r6, #8]
 800f8e6:	e7df      	b.n	800f8a8 <_vfiprintf_r+0x20>
 800f8e8:	4b79      	ldr	r3, [pc, #484]	; (800fad0 <_vfiprintf_r+0x248>)
 800f8ea:	429d      	cmp	r5, r3
 800f8ec:	bf08      	it	eq
 800f8ee:	68f5      	ldreq	r5, [r6, #12]
 800f8f0:	e7da      	b.n	800f8a8 <_vfiprintf_r+0x20>
 800f8f2:	89ab      	ldrh	r3, [r5, #12]
 800f8f4:	0598      	lsls	r0, r3, #22
 800f8f6:	d4ed      	bmi.n	800f8d4 <_vfiprintf_r+0x4c>
 800f8f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8fa:	f7ff ff5d 	bl	800f7b8 <__retarget_lock_release_recursive>
 800f8fe:	e7e9      	b.n	800f8d4 <_vfiprintf_r+0x4c>
 800f900:	2300      	movs	r3, #0
 800f902:	9309      	str	r3, [sp, #36]	; 0x24
 800f904:	2320      	movs	r3, #32
 800f906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f90a:	2330      	movs	r3, #48	; 0x30
 800f90c:	f04f 0901 	mov.w	r9, #1
 800f910:	f8cd 800c 	str.w	r8, [sp, #12]
 800f914:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800fad4 <_vfiprintf_r+0x24c>
 800f918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f91c:	4623      	mov	r3, r4
 800f91e:	469a      	mov	sl, r3
 800f920:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f924:	b10a      	cbz	r2, 800f92a <_vfiprintf_r+0xa2>
 800f926:	2a25      	cmp	r2, #37	; 0x25
 800f928:	d1f9      	bne.n	800f91e <_vfiprintf_r+0x96>
 800f92a:	ebba 0b04 	subs.w	fp, sl, r4
 800f92e:	d00b      	beq.n	800f948 <_vfiprintf_r+0xc0>
 800f930:	465b      	mov	r3, fp
 800f932:	4622      	mov	r2, r4
 800f934:	4629      	mov	r1, r5
 800f936:	4630      	mov	r0, r6
 800f938:	f7ff ff94 	bl	800f864 <__sfputs_r>
 800f93c:	3001      	adds	r0, #1
 800f93e:	f000 80aa 	beq.w	800fa96 <_vfiprintf_r+0x20e>
 800f942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f944:	445a      	add	r2, fp
 800f946:	9209      	str	r2, [sp, #36]	; 0x24
 800f948:	f89a 3000 	ldrb.w	r3, [sl]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	f000 80a2 	beq.w	800fa96 <_vfiprintf_r+0x20e>
 800f952:	2300      	movs	r3, #0
 800f954:	f04f 32ff 	mov.w	r2, #4294967295
 800f958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f95c:	f10a 0a01 	add.w	sl, sl, #1
 800f960:	9304      	str	r3, [sp, #16]
 800f962:	9307      	str	r3, [sp, #28]
 800f964:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f968:	931a      	str	r3, [sp, #104]	; 0x68
 800f96a:	4654      	mov	r4, sl
 800f96c:	2205      	movs	r2, #5
 800f96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f972:	4858      	ldr	r0, [pc, #352]	; (800fad4 <_vfiprintf_r+0x24c>)
 800f974:	f7ff f87e 	bl	800ea74 <memchr>
 800f978:	9a04      	ldr	r2, [sp, #16]
 800f97a:	b9d8      	cbnz	r0, 800f9b4 <_vfiprintf_r+0x12c>
 800f97c:	06d1      	lsls	r1, r2, #27
 800f97e:	bf44      	itt	mi
 800f980:	2320      	movmi	r3, #32
 800f982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f986:	0713      	lsls	r3, r2, #28
 800f988:	bf44      	itt	mi
 800f98a:	232b      	movmi	r3, #43	; 0x2b
 800f98c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f990:	f89a 3000 	ldrb.w	r3, [sl]
 800f994:	2b2a      	cmp	r3, #42	; 0x2a
 800f996:	d015      	beq.n	800f9c4 <_vfiprintf_r+0x13c>
 800f998:	4654      	mov	r4, sl
 800f99a:	2000      	movs	r0, #0
 800f99c:	f04f 0c0a 	mov.w	ip, #10
 800f9a0:	9a07      	ldr	r2, [sp, #28]
 800f9a2:	4621      	mov	r1, r4
 800f9a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9a8:	3b30      	subs	r3, #48	; 0x30
 800f9aa:	2b09      	cmp	r3, #9
 800f9ac:	d94e      	bls.n	800fa4c <_vfiprintf_r+0x1c4>
 800f9ae:	b1b0      	cbz	r0, 800f9de <_vfiprintf_r+0x156>
 800f9b0:	9207      	str	r2, [sp, #28]
 800f9b2:	e014      	b.n	800f9de <_vfiprintf_r+0x156>
 800f9b4:	eba0 0308 	sub.w	r3, r0, r8
 800f9b8:	fa09 f303 	lsl.w	r3, r9, r3
 800f9bc:	4313      	orrs	r3, r2
 800f9be:	46a2      	mov	sl, r4
 800f9c0:	9304      	str	r3, [sp, #16]
 800f9c2:	e7d2      	b.n	800f96a <_vfiprintf_r+0xe2>
 800f9c4:	9b03      	ldr	r3, [sp, #12]
 800f9c6:	1d19      	adds	r1, r3, #4
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	9103      	str	r1, [sp, #12]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	bfbb      	ittet	lt
 800f9d0:	425b      	neglt	r3, r3
 800f9d2:	f042 0202 	orrlt.w	r2, r2, #2
 800f9d6:	9307      	strge	r3, [sp, #28]
 800f9d8:	9307      	strlt	r3, [sp, #28]
 800f9da:	bfb8      	it	lt
 800f9dc:	9204      	strlt	r2, [sp, #16]
 800f9de:	7823      	ldrb	r3, [r4, #0]
 800f9e0:	2b2e      	cmp	r3, #46	; 0x2e
 800f9e2:	d10c      	bne.n	800f9fe <_vfiprintf_r+0x176>
 800f9e4:	7863      	ldrb	r3, [r4, #1]
 800f9e6:	2b2a      	cmp	r3, #42	; 0x2a
 800f9e8:	d135      	bne.n	800fa56 <_vfiprintf_r+0x1ce>
 800f9ea:	9b03      	ldr	r3, [sp, #12]
 800f9ec:	3402      	adds	r4, #2
 800f9ee:	1d1a      	adds	r2, r3, #4
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	9203      	str	r2, [sp, #12]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	bfb8      	it	lt
 800f9f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f9fc:	9305      	str	r3, [sp, #20]
 800f9fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fae4 <_vfiprintf_r+0x25c>
 800fa02:	2203      	movs	r2, #3
 800fa04:	4650      	mov	r0, sl
 800fa06:	7821      	ldrb	r1, [r4, #0]
 800fa08:	f7ff f834 	bl	800ea74 <memchr>
 800fa0c:	b140      	cbz	r0, 800fa20 <_vfiprintf_r+0x198>
 800fa0e:	2340      	movs	r3, #64	; 0x40
 800fa10:	eba0 000a 	sub.w	r0, r0, sl
 800fa14:	fa03 f000 	lsl.w	r0, r3, r0
 800fa18:	9b04      	ldr	r3, [sp, #16]
 800fa1a:	3401      	adds	r4, #1
 800fa1c:	4303      	orrs	r3, r0
 800fa1e:	9304      	str	r3, [sp, #16]
 800fa20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa24:	2206      	movs	r2, #6
 800fa26:	482c      	ldr	r0, [pc, #176]	; (800fad8 <_vfiprintf_r+0x250>)
 800fa28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa2c:	f7ff f822 	bl	800ea74 <memchr>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d03f      	beq.n	800fab4 <_vfiprintf_r+0x22c>
 800fa34:	4b29      	ldr	r3, [pc, #164]	; (800fadc <_vfiprintf_r+0x254>)
 800fa36:	bb1b      	cbnz	r3, 800fa80 <_vfiprintf_r+0x1f8>
 800fa38:	9b03      	ldr	r3, [sp, #12]
 800fa3a:	3307      	adds	r3, #7
 800fa3c:	f023 0307 	bic.w	r3, r3, #7
 800fa40:	3308      	adds	r3, #8
 800fa42:	9303      	str	r3, [sp, #12]
 800fa44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa46:	443b      	add	r3, r7
 800fa48:	9309      	str	r3, [sp, #36]	; 0x24
 800fa4a:	e767      	b.n	800f91c <_vfiprintf_r+0x94>
 800fa4c:	460c      	mov	r4, r1
 800fa4e:	2001      	movs	r0, #1
 800fa50:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa54:	e7a5      	b.n	800f9a2 <_vfiprintf_r+0x11a>
 800fa56:	2300      	movs	r3, #0
 800fa58:	f04f 0c0a 	mov.w	ip, #10
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	3401      	adds	r4, #1
 800fa60:	9305      	str	r3, [sp, #20]
 800fa62:	4620      	mov	r0, r4
 800fa64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa68:	3a30      	subs	r2, #48	; 0x30
 800fa6a:	2a09      	cmp	r2, #9
 800fa6c:	d903      	bls.n	800fa76 <_vfiprintf_r+0x1ee>
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d0c5      	beq.n	800f9fe <_vfiprintf_r+0x176>
 800fa72:	9105      	str	r1, [sp, #20]
 800fa74:	e7c3      	b.n	800f9fe <_vfiprintf_r+0x176>
 800fa76:	4604      	mov	r4, r0
 800fa78:	2301      	movs	r3, #1
 800fa7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa7e:	e7f0      	b.n	800fa62 <_vfiprintf_r+0x1da>
 800fa80:	ab03      	add	r3, sp, #12
 800fa82:	9300      	str	r3, [sp, #0]
 800fa84:	462a      	mov	r2, r5
 800fa86:	4630      	mov	r0, r6
 800fa88:	4b15      	ldr	r3, [pc, #84]	; (800fae0 <_vfiprintf_r+0x258>)
 800fa8a:	a904      	add	r1, sp, #16
 800fa8c:	f7fc f908 	bl	800bca0 <_printf_float>
 800fa90:	4607      	mov	r7, r0
 800fa92:	1c78      	adds	r0, r7, #1
 800fa94:	d1d6      	bne.n	800fa44 <_vfiprintf_r+0x1bc>
 800fa96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa98:	07d9      	lsls	r1, r3, #31
 800fa9a:	d405      	bmi.n	800faa8 <_vfiprintf_r+0x220>
 800fa9c:	89ab      	ldrh	r3, [r5, #12]
 800fa9e:	059a      	lsls	r2, r3, #22
 800faa0:	d402      	bmi.n	800faa8 <_vfiprintf_r+0x220>
 800faa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800faa4:	f7ff fe88 	bl	800f7b8 <__retarget_lock_release_recursive>
 800faa8:	89ab      	ldrh	r3, [r5, #12]
 800faaa:	065b      	lsls	r3, r3, #25
 800faac:	f53f af12 	bmi.w	800f8d4 <_vfiprintf_r+0x4c>
 800fab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fab2:	e711      	b.n	800f8d8 <_vfiprintf_r+0x50>
 800fab4:	ab03      	add	r3, sp, #12
 800fab6:	9300      	str	r3, [sp, #0]
 800fab8:	462a      	mov	r2, r5
 800faba:	4630      	mov	r0, r6
 800fabc:	4b08      	ldr	r3, [pc, #32]	; (800fae0 <_vfiprintf_r+0x258>)
 800fabe:	a904      	add	r1, sp, #16
 800fac0:	f7fc fb8a 	bl	800c1d8 <_printf_i>
 800fac4:	e7e4      	b.n	800fa90 <_vfiprintf_r+0x208>
 800fac6:	bf00      	nop
 800fac8:	08010f5c 	.word	0x08010f5c
 800facc:	08010f7c 	.word	0x08010f7c
 800fad0:	08010f3c 	.word	0x08010f3c
 800fad4:	08010eec 	.word	0x08010eec
 800fad8:	08010ef6 	.word	0x08010ef6
 800fadc:	0800bca1 	.word	0x0800bca1
 800fae0:	0800f865 	.word	0x0800f865
 800fae4:	08010ef2 	.word	0x08010ef2

0800fae8 <__swbuf_r>:
 800fae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faea:	460e      	mov	r6, r1
 800faec:	4614      	mov	r4, r2
 800faee:	4605      	mov	r5, r0
 800faf0:	b118      	cbz	r0, 800fafa <__swbuf_r+0x12>
 800faf2:	6983      	ldr	r3, [r0, #24]
 800faf4:	b90b      	cbnz	r3, 800fafa <__swbuf_r+0x12>
 800faf6:	f000 f9d9 	bl	800feac <__sinit>
 800fafa:	4b21      	ldr	r3, [pc, #132]	; (800fb80 <__swbuf_r+0x98>)
 800fafc:	429c      	cmp	r4, r3
 800fafe:	d12b      	bne.n	800fb58 <__swbuf_r+0x70>
 800fb00:	686c      	ldr	r4, [r5, #4]
 800fb02:	69a3      	ldr	r3, [r4, #24]
 800fb04:	60a3      	str	r3, [r4, #8]
 800fb06:	89a3      	ldrh	r3, [r4, #12]
 800fb08:	071a      	lsls	r2, r3, #28
 800fb0a:	d52f      	bpl.n	800fb6c <__swbuf_r+0x84>
 800fb0c:	6923      	ldr	r3, [r4, #16]
 800fb0e:	b36b      	cbz	r3, 800fb6c <__swbuf_r+0x84>
 800fb10:	6923      	ldr	r3, [r4, #16]
 800fb12:	6820      	ldr	r0, [r4, #0]
 800fb14:	b2f6      	uxtb	r6, r6
 800fb16:	1ac0      	subs	r0, r0, r3
 800fb18:	6963      	ldr	r3, [r4, #20]
 800fb1a:	4637      	mov	r7, r6
 800fb1c:	4283      	cmp	r3, r0
 800fb1e:	dc04      	bgt.n	800fb2a <__swbuf_r+0x42>
 800fb20:	4621      	mov	r1, r4
 800fb22:	4628      	mov	r0, r5
 800fb24:	f000 f92e 	bl	800fd84 <_fflush_r>
 800fb28:	bb30      	cbnz	r0, 800fb78 <__swbuf_r+0x90>
 800fb2a:	68a3      	ldr	r3, [r4, #8]
 800fb2c:	3001      	adds	r0, #1
 800fb2e:	3b01      	subs	r3, #1
 800fb30:	60a3      	str	r3, [r4, #8]
 800fb32:	6823      	ldr	r3, [r4, #0]
 800fb34:	1c5a      	adds	r2, r3, #1
 800fb36:	6022      	str	r2, [r4, #0]
 800fb38:	701e      	strb	r6, [r3, #0]
 800fb3a:	6963      	ldr	r3, [r4, #20]
 800fb3c:	4283      	cmp	r3, r0
 800fb3e:	d004      	beq.n	800fb4a <__swbuf_r+0x62>
 800fb40:	89a3      	ldrh	r3, [r4, #12]
 800fb42:	07db      	lsls	r3, r3, #31
 800fb44:	d506      	bpl.n	800fb54 <__swbuf_r+0x6c>
 800fb46:	2e0a      	cmp	r6, #10
 800fb48:	d104      	bne.n	800fb54 <__swbuf_r+0x6c>
 800fb4a:	4621      	mov	r1, r4
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	f000 f919 	bl	800fd84 <_fflush_r>
 800fb52:	b988      	cbnz	r0, 800fb78 <__swbuf_r+0x90>
 800fb54:	4638      	mov	r0, r7
 800fb56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb58:	4b0a      	ldr	r3, [pc, #40]	; (800fb84 <__swbuf_r+0x9c>)
 800fb5a:	429c      	cmp	r4, r3
 800fb5c:	d101      	bne.n	800fb62 <__swbuf_r+0x7a>
 800fb5e:	68ac      	ldr	r4, [r5, #8]
 800fb60:	e7cf      	b.n	800fb02 <__swbuf_r+0x1a>
 800fb62:	4b09      	ldr	r3, [pc, #36]	; (800fb88 <__swbuf_r+0xa0>)
 800fb64:	429c      	cmp	r4, r3
 800fb66:	bf08      	it	eq
 800fb68:	68ec      	ldreq	r4, [r5, #12]
 800fb6a:	e7ca      	b.n	800fb02 <__swbuf_r+0x1a>
 800fb6c:	4621      	mov	r1, r4
 800fb6e:	4628      	mov	r0, r5
 800fb70:	f000 f80c 	bl	800fb8c <__swsetup_r>
 800fb74:	2800      	cmp	r0, #0
 800fb76:	d0cb      	beq.n	800fb10 <__swbuf_r+0x28>
 800fb78:	f04f 37ff 	mov.w	r7, #4294967295
 800fb7c:	e7ea      	b.n	800fb54 <__swbuf_r+0x6c>
 800fb7e:	bf00      	nop
 800fb80:	08010f5c 	.word	0x08010f5c
 800fb84:	08010f7c 	.word	0x08010f7c
 800fb88:	08010f3c 	.word	0x08010f3c

0800fb8c <__swsetup_r>:
 800fb8c:	4b32      	ldr	r3, [pc, #200]	; (800fc58 <__swsetup_r+0xcc>)
 800fb8e:	b570      	push	{r4, r5, r6, lr}
 800fb90:	681d      	ldr	r5, [r3, #0]
 800fb92:	4606      	mov	r6, r0
 800fb94:	460c      	mov	r4, r1
 800fb96:	b125      	cbz	r5, 800fba2 <__swsetup_r+0x16>
 800fb98:	69ab      	ldr	r3, [r5, #24]
 800fb9a:	b913      	cbnz	r3, 800fba2 <__swsetup_r+0x16>
 800fb9c:	4628      	mov	r0, r5
 800fb9e:	f000 f985 	bl	800feac <__sinit>
 800fba2:	4b2e      	ldr	r3, [pc, #184]	; (800fc5c <__swsetup_r+0xd0>)
 800fba4:	429c      	cmp	r4, r3
 800fba6:	d10f      	bne.n	800fbc8 <__swsetup_r+0x3c>
 800fba8:	686c      	ldr	r4, [r5, #4]
 800fbaa:	89a3      	ldrh	r3, [r4, #12]
 800fbac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fbb0:	0719      	lsls	r1, r3, #28
 800fbb2:	d42c      	bmi.n	800fc0e <__swsetup_r+0x82>
 800fbb4:	06dd      	lsls	r5, r3, #27
 800fbb6:	d411      	bmi.n	800fbdc <__swsetup_r+0x50>
 800fbb8:	2309      	movs	r3, #9
 800fbba:	6033      	str	r3, [r6, #0]
 800fbbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbc4:	81a3      	strh	r3, [r4, #12]
 800fbc6:	e03e      	b.n	800fc46 <__swsetup_r+0xba>
 800fbc8:	4b25      	ldr	r3, [pc, #148]	; (800fc60 <__swsetup_r+0xd4>)
 800fbca:	429c      	cmp	r4, r3
 800fbcc:	d101      	bne.n	800fbd2 <__swsetup_r+0x46>
 800fbce:	68ac      	ldr	r4, [r5, #8]
 800fbd0:	e7eb      	b.n	800fbaa <__swsetup_r+0x1e>
 800fbd2:	4b24      	ldr	r3, [pc, #144]	; (800fc64 <__swsetup_r+0xd8>)
 800fbd4:	429c      	cmp	r4, r3
 800fbd6:	bf08      	it	eq
 800fbd8:	68ec      	ldreq	r4, [r5, #12]
 800fbda:	e7e6      	b.n	800fbaa <__swsetup_r+0x1e>
 800fbdc:	0758      	lsls	r0, r3, #29
 800fbde:	d512      	bpl.n	800fc06 <__swsetup_r+0x7a>
 800fbe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbe2:	b141      	cbz	r1, 800fbf6 <__swsetup_r+0x6a>
 800fbe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbe8:	4299      	cmp	r1, r3
 800fbea:	d002      	beq.n	800fbf2 <__swsetup_r+0x66>
 800fbec:	4630      	mov	r0, r6
 800fbee:	f7fb ff13 	bl	800ba18 <_free_r>
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	6363      	str	r3, [r4, #52]	; 0x34
 800fbf6:	89a3      	ldrh	r3, [r4, #12]
 800fbf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fbfc:	81a3      	strh	r3, [r4, #12]
 800fbfe:	2300      	movs	r3, #0
 800fc00:	6063      	str	r3, [r4, #4]
 800fc02:	6923      	ldr	r3, [r4, #16]
 800fc04:	6023      	str	r3, [r4, #0]
 800fc06:	89a3      	ldrh	r3, [r4, #12]
 800fc08:	f043 0308 	orr.w	r3, r3, #8
 800fc0c:	81a3      	strh	r3, [r4, #12]
 800fc0e:	6923      	ldr	r3, [r4, #16]
 800fc10:	b94b      	cbnz	r3, 800fc26 <__swsetup_r+0x9a>
 800fc12:	89a3      	ldrh	r3, [r4, #12]
 800fc14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fc18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc1c:	d003      	beq.n	800fc26 <__swsetup_r+0x9a>
 800fc1e:	4621      	mov	r1, r4
 800fc20:	4630      	mov	r0, r6
 800fc22:	f000 fa05 	bl	8010030 <__smakebuf_r>
 800fc26:	89a0      	ldrh	r0, [r4, #12]
 800fc28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc2c:	f010 0301 	ands.w	r3, r0, #1
 800fc30:	d00a      	beq.n	800fc48 <__swsetup_r+0xbc>
 800fc32:	2300      	movs	r3, #0
 800fc34:	60a3      	str	r3, [r4, #8]
 800fc36:	6963      	ldr	r3, [r4, #20]
 800fc38:	425b      	negs	r3, r3
 800fc3a:	61a3      	str	r3, [r4, #24]
 800fc3c:	6923      	ldr	r3, [r4, #16]
 800fc3e:	b943      	cbnz	r3, 800fc52 <__swsetup_r+0xc6>
 800fc40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fc44:	d1ba      	bne.n	800fbbc <__swsetup_r+0x30>
 800fc46:	bd70      	pop	{r4, r5, r6, pc}
 800fc48:	0781      	lsls	r1, r0, #30
 800fc4a:	bf58      	it	pl
 800fc4c:	6963      	ldrpl	r3, [r4, #20]
 800fc4e:	60a3      	str	r3, [r4, #8]
 800fc50:	e7f4      	b.n	800fc3c <__swsetup_r+0xb0>
 800fc52:	2000      	movs	r0, #0
 800fc54:	e7f7      	b.n	800fc46 <__swsetup_r+0xba>
 800fc56:	bf00      	nop
 800fc58:	20000040 	.word	0x20000040
 800fc5c:	08010f5c 	.word	0x08010f5c
 800fc60:	08010f7c 	.word	0x08010f7c
 800fc64:	08010f3c 	.word	0x08010f3c

0800fc68 <abort>:
 800fc68:	2006      	movs	r0, #6
 800fc6a:	b508      	push	{r3, lr}
 800fc6c:	f000 fa50 	bl	8010110 <raise>
 800fc70:	2001      	movs	r0, #1
 800fc72:	f7f7 f8d0 	bl	8006e16 <_exit>
	...

0800fc78 <__sflush_r>:
 800fc78:	898a      	ldrh	r2, [r1, #12]
 800fc7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc7e:	4605      	mov	r5, r0
 800fc80:	0710      	lsls	r0, r2, #28
 800fc82:	460c      	mov	r4, r1
 800fc84:	d458      	bmi.n	800fd38 <__sflush_r+0xc0>
 800fc86:	684b      	ldr	r3, [r1, #4]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	dc05      	bgt.n	800fc98 <__sflush_r+0x20>
 800fc8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	dc02      	bgt.n	800fc98 <__sflush_r+0x20>
 800fc92:	2000      	movs	r0, #0
 800fc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc9a:	2e00      	cmp	r6, #0
 800fc9c:	d0f9      	beq.n	800fc92 <__sflush_r+0x1a>
 800fc9e:	2300      	movs	r3, #0
 800fca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fca4:	682f      	ldr	r7, [r5, #0]
 800fca6:	602b      	str	r3, [r5, #0]
 800fca8:	d032      	beq.n	800fd10 <__sflush_r+0x98>
 800fcaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fcac:	89a3      	ldrh	r3, [r4, #12]
 800fcae:	075a      	lsls	r2, r3, #29
 800fcb0:	d505      	bpl.n	800fcbe <__sflush_r+0x46>
 800fcb2:	6863      	ldr	r3, [r4, #4]
 800fcb4:	1ac0      	subs	r0, r0, r3
 800fcb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fcb8:	b10b      	cbz	r3, 800fcbe <__sflush_r+0x46>
 800fcba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fcbc:	1ac0      	subs	r0, r0, r3
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	4602      	mov	r2, r0
 800fcc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fcc4:	4628      	mov	r0, r5
 800fcc6:	6a21      	ldr	r1, [r4, #32]
 800fcc8:	47b0      	blx	r6
 800fcca:	1c43      	adds	r3, r0, #1
 800fccc:	89a3      	ldrh	r3, [r4, #12]
 800fcce:	d106      	bne.n	800fcde <__sflush_r+0x66>
 800fcd0:	6829      	ldr	r1, [r5, #0]
 800fcd2:	291d      	cmp	r1, #29
 800fcd4:	d82c      	bhi.n	800fd30 <__sflush_r+0xb8>
 800fcd6:	4a2a      	ldr	r2, [pc, #168]	; (800fd80 <__sflush_r+0x108>)
 800fcd8:	40ca      	lsrs	r2, r1
 800fcda:	07d6      	lsls	r6, r2, #31
 800fcdc:	d528      	bpl.n	800fd30 <__sflush_r+0xb8>
 800fcde:	2200      	movs	r2, #0
 800fce0:	6062      	str	r2, [r4, #4]
 800fce2:	6922      	ldr	r2, [r4, #16]
 800fce4:	04d9      	lsls	r1, r3, #19
 800fce6:	6022      	str	r2, [r4, #0]
 800fce8:	d504      	bpl.n	800fcf4 <__sflush_r+0x7c>
 800fcea:	1c42      	adds	r2, r0, #1
 800fcec:	d101      	bne.n	800fcf2 <__sflush_r+0x7a>
 800fcee:	682b      	ldr	r3, [r5, #0]
 800fcf0:	b903      	cbnz	r3, 800fcf4 <__sflush_r+0x7c>
 800fcf2:	6560      	str	r0, [r4, #84]	; 0x54
 800fcf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcf6:	602f      	str	r7, [r5, #0]
 800fcf8:	2900      	cmp	r1, #0
 800fcfa:	d0ca      	beq.n	800fc92 <__sflush_r+0x1a>
 800fcfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd00:	4299      	cmp	r1, r3
 800fd02:	d002      	beq.n	800fd0a <__sflush_r+0x92>
 800fd04:	4628      	mov	r0, r5
 800fd06:	f7fb fe87 	bl	800ba18 <_free_r>
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	6360      	str	r0, [r4, #52]	; 0x34
 800fd0e:	e7c1      	b.n	800fc94 <__sflush_r+0x1c>
 800fd10:	6a21      	ldr	r1, [r4, #32]
 800fd12:	2301      	movs	r3, #1
 800fd14:	4628      	mov	r0, r5
 800fd16:	47b0      	blx	r6
 800fd18:	1c41      	adds	r1, r0, #1
 800fd1a:	d1c7      	bne.n	800fcac <__sflush_r+0x34>
 800fd1c:	682b      	ldr	r3, [r5, #0]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d0c4      	beq.n	800fcac <__sflush_r+0x34>
 800fd22:	2b1d      	cmp	r3, #29
 800fd24:	d001      	beq.n	800fd2a <__sflush_r+0xb2>
 800fd26:	2b16      	cmp	r3, #22
 800fd28:	d101      	bne.n	800fd2e <__sflush_r+0xb6>
 800fd2a:	602f      	str	r7, [r5, #0]
 800fd2c:	e7b1      	b.n	800fc92 <__sflush_r+0x1a>
 800fd2e:	89a3      	ldrh	r3, [r4, #12]
 800fd30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd34:	81a3      	strh	r3, [r4, #12]
 800fd36:	e7ad      	b.n	800fc94 <__sflush_r+0x1c>
 800fd38:	690f      	ldr	r7, [r1, #16]
 800fd3a:	2f00      	cmp	r7, #0
 800fd3c:	d0a9      	beq.n	800fc92 <__sflush_r+0x1a>
 800fd3e:	0793      	lsls	r3, r2, #30
 800fd40:	bf18      	it	ne
 800fd42:	2300      	movne	r3, #0
 800fd44:	680e      	ldr	r6, [r1, #0]
 800fd46:	bf08      	it	eq
 800fd48:	694b      	ldreq	r3, [r1, #20]
 800fd4a:	eba6 0807 	sub.w	r8, r6, r7
 800fd4e:	600f      	str	r7, [r1, #0]
 800fd50:	608b      	str	r3, [r1, #8]
 800fd52:	f1b8 0f00 	cmp.w	r8, #0
 800fd56:	dd9c      	ble.n	800fc92 <__sflush_r+0x1a>
 800fd58:	4643      	mov	r3, r8
 800fd5a:	463a      	mov	r2, r7
 800fd5c:	4628      	mov	r0, r5
 800fd5e:	6a21      	ldr	r1, [r4, #32]
 800fd60:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fd62:	47b0      	blx	r6
 800fd64:	2800      	cmp	r0, #0
 800fd66:	dc06      	bgt.n	800fd76 <__sflush_r+0xfe>
 800fd68:	89a3      	ldrh	r3, [r4, #12]
 800fd6a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd72:	81a3      	strh	r3, [r4, #12]
 800fd74:	e78e      	b.n	800fc94 <__sflush_r+0x1c>
 800fd76:	4407      	add	r7, r0
 800fd78:	eba8 0800 	sub.w	r8, r8, r0
 800fd7c:	e7e9      	b.n	800fd52 <__sflush_r+0xda>
 800fd7e:	bf00      	nop
 800fd80:	20400001 	.word	0x20400001

0800fd84 <_fflush_r>:
 800fd84:	b538      	push	{r3, r4, r5, lr}
 800fd86:	690b      	ldr	r3, [r1, #16]
 800fd88:	4605      	mov	r5, r0
 800fd8a:	460c      	mov	r4, r1
 800fd8c:	b913      	cbnz	r3, 800fd94 <_fflush_r+0x10>
 800fd8e:	2500      	movs	r5, #0
 800fd90:	4628      	mov	r0, r5
 800fd92:	bd38      	pop	{r3, r4, r5, pc}
 800fd94:	b118      	cbz	r0, 800fd9e <_fflush_r+0x1a>
 800fd96:	6983      	ldr	r3, [r0, #24]
 800fd98:	b90b      	cbnz	r3, 800fd9e <_fflush_r+0x1a>
 800fd9a:	f000 f887 	bl	800feac <__sinit>
 800fd9e:	4b14      	ldr	r3, [pc, #80]	; (800fdf0 <_fflush_r+0x6c>)
 800fda0:	429c      	cmp	r4, r3
 800fda2:	d11b      	bne.n	800fddc <_fflush_r+0x58>
 800fda4:	686c      	ldr	r4, [r5, #4]
 800fda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d0ef      	beq.n	800fd8e <_fflush_r+0xa>
 800fdae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fdb0:	07d0      	lsls	r0, r2, #31
 800fdb2:	d404      	bmi.n	800fdbe <_fflush_r+0x3a>
 800fdb4:	0599      	lsls	r1, r3, #22
 800fdb6:	d402      	bmi.n	800fdbe <_fflush_r+0x3a>
 800fdb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdba:	f7ff fcfc 	bl	800f7b6 <__retarget_lock_acquire_recursive>
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	4621      	mov	r1, r4
 800fdc2:	f7ff ff59 	bl	800fc78 <__sflush_r>
 800fdc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fdc8:	4605      	mov	r5, r0
 800fdca:	07da      	lsls	r2, r3, #31
 800fdcc:	d4e0      	bmi.n	800fd90 <_fflush_r+0xc>
 800fdce:	89a3      	ldrh	r3, [r4, #12]
 800fdd0:	059b      	lsls	r3, r3, #22
 800fdd2:	d4dd      	bmi.n	800fd90 <_fflush_r+0xc>
 800fdd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdd6:	f7ff fcef 	bl	800f7b8 <__retarget_lock_release_recursive>
 800fdda:	e7d9      	b.n	800fd90 <_fflush_r+0xc>
 800fddc:	4b05      	ldr	r3, [pc, #20]	; (800fdf4 <_fflush_r+0x70>)
 800fdde:	429c      	cmp	r4, r3
 800fde0:	d101      	bne.n	800fde6 <_fflush_r+0x62>
 800fde2:	68ac      	ldr	r4, [r5, #8]
 800fde4:	e7df      	b.n	800fda6 <_fflush_r+0x22>
 800fde6:	4b04      	ldr	r3, [pc, #16]	; (800fdf8 <_fflush_r+0x74>)
 800fde8:	429c      	cmp	r4, r3
 800fdea:	bf08      	it	eq
 800fdec:	68ec      	ldreq	r4, [r5, #12]
 800fdee:	e7da      	b.n	800fda6 <_fflush_r+0x22>
 800fdf0:	08010f5c 	.word	0x08010f5c
 800fdf4:	08010f7c 	.word	0x08010f7c
 800fdf8:	08010f3c 	.word	0x08010f3c

0800fdfc <std>:
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	b510      	push	{r4, lr}
 800fe00:	4604      	mov	r4, r0
 800fe02:	e9c0 3300 	strd	r3, r3, [r0]
 800fe06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe0a:	6083      	str	r3, [r0, #8]
 800fe0c:	8181      	strh	r1, [r0, #12]
 800fe0e:	6643      	str	r3, [r0, #100]	; 0x64
 800fe10:	81c2      	strh	r2, [r0, #14]
 800fe12:	6183      	str	r3, [r0, #24]
 800fe14:	4619      	mov	r1, r3
 800fe16:	2208      	movs	r2, #8
 800fe18:	305c      	adds	r0, #92	; 0x5c
 800fe1a:	f7fb fdf5 	bl	800ba08 <memset>
 800fe1e:	4b05      	ldr	r3, [pc, #20]	; (800fe34 <std+0x38>)
 800fe20:	6224      	str	r4, [r4, #32]
 800fe22:	6263      	str	r3, [r4, #36]	; 0x24
 800fe24:	4b04      	ldr	r3, [pc, #16]	; (800fe38 <std+0x3c>)
 800fe26:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe28:	4b04      	ldr	r3, [pc, #16]	; (800fe3c <std+0x40>)
 800fe2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fe2c:	4b04      	ldr	r3, [pc, #16]	; (800fe40 <std+0x44>)
 800fe2e:	6323      	str	r3, [r4, #48]	; 0x30
 800fe30:	bd10      	pop	{r4, pc}
 800fe32:	bf00      	nop
 800fe34:	08010149 	.word	0x08010149
 800fe38:	0801016b 	.word	0x0801016b
 800fe3c:	080101a3 	.word	0x080101a3
 800fe40:	080101c7 	.word	0x080101c7

0800fe44 <_cleanup_r>:
 800fe44:	4901      	ldr	r1, [pc, #4]	; (800fe4c <_cleanup_r+0x8>)
 800fe46:	f000 b8af 	b.w	800ffa8 <_fwalk_reent>
 800fe4a:	bf00      	nop
 800fe4c:	0800fd85 	.word	0x0800fd85

0800fe50 <__sfmoreglue>:
 800fe50:	b570      	push	{r4, r5, r6, lr}
 800fe52:	2568      	movs	r5, #104	; 0x68
 800fe54:	1e4a      	subs	r2, r1, #1
 800fe56:	4355      	muls	r5, r2
 800fe58:	460e      	mov	r6, r1
 800fe5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fe5e:	f7fb fe27 	bl	800bab0 <_malloc_r>
 800fe62:	4604      	mov	r4, r0
 800fe64:	b140      	cbz	r0, 800fe78 <__sfmoreglue+0x28>
 800fe66:	2100      	movs	r1, #0
 800fe68:	e9c0 1600 	strd	r1, r6, [r0]
 800fe6c:	300c      	adds	r0, #12
 800fe6e:	60a0      	str	r0, [r4, #8]
 800fe70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fe74:	f7fb fdc8 	bl	800ba08 <memset>
 800fe78:	4620      	mov	r0, r4
 800fe7a:	bd70      	pop	{r4, r5, r6, pc}

0800fe7c <__sfp_lock_acquire>:
 800fe7c:	4801      	ldr	r0, [pc, #4]	; (800fe84 <__sfp_lock_acquire+0x8>)
 800fe7e:	f7ff bc9a 	b.w	800f7b6 <__retarget_lock_acquire_recursive>
 800fe82:	bf00      	nop
 800fe84:	20000934 	.word	0x20000934

0800fe88 <__sfp_lock_release>:
 800fe88:	4801      	ldr	r0, [pc, #4]	; (800fe90 <__sfp_lock_release+0x8>)
 800fe8a:	f7ff bc95 	b.w	800f7b8 <__retarget_lock_release_recursive>
 800fe8e:	bf00      	nop
 800fe90:	20000934 	.word	0x20000934

0800fe94 <__sinit_lock_acquire>:
 800fe94:	4801      	ldr	r0, [pc, #4]	; (800fe9c <__sinit_lock_acquire+0x8>)
 800fe96:	f7ff bc8e 	b.w	800f7b6 <__retarget_lock_acquire_recursive>
 800fe9a:	bf00      	nop
 800fe9c:	2000092f 	.word	0x2000092f

0800fea0 <__sinit_lock_release>:
 800fea0:	4801      	ldr	r0, [pc, #4]	; (800fea8 <__sinit_lock_release+0x8>)
 800fea2:	f7ff bc89 	b.w	800f7b8 <__retarget_lock_release_recursive>
 800fea6:	bf00      	nop
 800fea8:	2000092f 	.word	0x2000092f

0800feac <__sinit>:
 800feac:	b510      	push	{r4, lr}
 800feae:	4604      	mov	r4, r0
 800feb0:	f7ff fff0 	bl	800fe94 <__sinit_lock_acquire>
 800feb4:	69a3      	ldr	r3, [r4, #24]
 800feb6:	b11b      	cbz	r3, 800fec0 <__sinit+0x14>
 800feb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800febc:	f7ff bff0 	b.w	800fea0 <__sinit_lock_release>
 800fec0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fec4:	6523      	str	r3, [r4, #80]	; 0x50
 800fec6:	4b13      	ldr	r3, [pc, #76]	; (800ff14 <__sinit+0x68>)
 800fec8:	4a13      	ldr	r2, [pc, #76]	; (800ff18 <__sinit+0x6c>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	62a2      	str	r2, [r4, #40]	; 0x28
 800fece:	42a3      	cmp	r3, r4
 800fed0:	bf08      	it	eq
 800fed2:	2301      	moveq	r3, #1
 800fed4:	4620      	mov	r0, r4
 800fed6:	bf08      	it	eq
 800fed8:	61a3      	streq	r3, [r4, #24]
 800feda:	f000 f81f 	bl	800ff1c <__sfp>
 800fede:	6060      	str	r0, [r4, #4]
 800fee0:	4620      	mov	r0, r4
 800fee2:	f000 f81b 	bl	800ff1c <__sfp>
 800fee6:	60a0      	str	r0, [r4, #8]
 800fee8:	4620      	mov	r0, r4
 800feea:	f000 f817 	bl	800ff1c <__sfp>
 800feee:	2200      	movs	r2, #0
 800fef0:	2104      	movs	r1, #4
 800fef2:	60e0      	str	r0, [r4, #12]
 800fef4:	6860      	ldr	r0, [r4, #4]
 800fef6:	f7ff ff81 	bl	800fdfc <std>
 800fefa:	2201      	movs	r2, #1
 800fefc:	2109      	movs	r1, #9
 800fefe:	68a0      	ldr	r0, [r4, #8]
 800ff00:	f7ff ff7c 	bl	800fdfc <std>
 800ff04:	2202      	movs	r2, #2
 800ff06:	2112      	movs	r1, #18
 800ff08:	68e0      	ldr	r0, [r4, #12]
 800ff0a:	f7ff ff77 	bl	800fdfc <std>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	61a3      	str	r3, [r4, #24]
 800ff12:	e7d1      	b.n	800feb8 <__sinit+0xc>
 800ff14:	08010bc8 	.word	0x08010bc8
 800ff18:	0800fe45 	.word	0x0800fe45

0800ff1c <__sfp>:
 800ff1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff1e:	4607      	mov	r7, r0
 800ff20:	f7ff ffac 	bl	800fe7c <__sfp_lock_acquire>
 800ff24:	4b1e      	ldr	r3, [pc, #120]	; (800ffa0 <__sfp+0x84>)
 800ff26:	681e      	ldr	r6, [r3, #0]
 800ff28:	69b3      	ldr	r3, [r6, #24]
 800ff2a:	b913      	cbnz	r3, 800ff32 <__sfp+0x16>
 800ff2c:	4630      	mov	r0, r6
 800ff2e:	f7ff ffbd 	bl	800feac <__sinit>
 800ff32:	3648      	adds	r6, #72	; 0x48
 800ff34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	d503      	bpl.n	800ff44 <__sfp+0x28>
 800ff3c:	6833      	ldr	r3, [r6, #0]
 800ff3e:	b30b      	cbz	r3, 800ff84 <__sfp+0x68>
 800ff40:	6836      	ldr	r6, [r6, #0]
 800ff42:	e7f7      	b.n	800ff34 <__sfp+0x18>
 800ff44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ff48:	b9d5      	cbnz	r5, 800ff80 <__sfp+0x64>
 800ff4a:	4b16      	ldr	r3, [pc, #88]	; (800ffa4 <__sfp+0x88>)
 800ff4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ff50:	60e3      	str	r3, [r4, #12]
 800ff52:	6665      	str	r5, [r4, #100]	; 0x64
 800ff54:	f7ff fc2e 	bl	800f7b4 <__retarget_lock_init_recursive>
 800ff58:	f7ff ff96 	bl	800fe88 <__sfp_lock_release>
 800ff5c:	2208      	movs	r2, #8
 800ff5e:	4629      	mov	r1, r5
 800ff60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ff64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ff68:	6025      	str	r5, [r4, #0]
 800ff6a:	61a5      	str	r5, [r4, #24]
 800ff6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ff70:	f7fb fd4a 	bl	800ba08 <memset>
 800ff74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ff78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff80:	3468      	adds	r4, #104	; 0x68
 800ff82:	e7d9      	b.n	800ff38 <__sfp+0x1c>
 800ff84:	2104      	movs	r1, #4
 800ff86:	4638      	mov	r0, r7
 800ff88:	f7ff ff62 	bl	800fe50 <__sfmoreglue>
 800ff8c:	4604      	mov	r4, r0
 800ff8e:	6030      	str	r0, [r6, #0]
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d1d5      	bne.n	800ff40 <__sfp+0x24>
 800ff94:	f7ff ff78 	bl	800fe88 <__sfp_lock_release>
 800ff98:	230c      	movs	r3, #12
 800ff9a:	603b      	str	r3, [r7, #0]
 800ff9c:	e7ee      	b.n	800ff7c <__sfp+0x60>
 800ff9e:	bf00      	nop
 800ffa0:	08010bc8 	.word	0x08010bc8
 800ffa4:	ffff0001 	.word	0xffff0001

0800ffa8 <_fwalk_reent>:
 800ffa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffac:	4606      	mov	r6, r0
 800ffae:	4688      	mov	r8, r1
 800ffb0:	2700      	movs	r7, #0
 800ffb2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ffb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ffba:	f1b9 0901 	subs.w	r9, r9, #1
 800ffbe:	d505      	bpl.n	800ffcc <_fwalk_reent+0x24>
 800ffc0:	6824      	ldr	r4, [r4, #0]
 800ffc2:	2c00      	cmp	r4, #0
 800ffc4:	d1f7      	bne.n	800ffb6 <_fwalk_reent+0xe>
 800ffc6:	4638      	mov	r0, r7
 800ffc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffcc:	89ab      	ldrh	r3, [r5, #12]
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d907      	bls.n	800ffe2 <_fwalk_reent+0x3a>
 800ffd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	d003      	beq.n	800ffe2 <_fwalk_reent+0x3a>
 800ffda:	4629      	mov	r1, r5
 800ffdc:	4630      	mov	r0, r6
 800ffde:	47c0      	blx	r8
 800ffe0:	4307      	orrs	r7, r0
 800ffe2:	3568      	adds	r5, #104	; 0x68
 800ffe4:	e7e9      	b.n	800ffba <_fwalk_reent+0x12>

0800ffe6 <__swhatbuf_r>:
 800ffe6:	b570      	push	{r4, r5, r6, lr}
 800ffe8:	460e      	mov	r6, r1
 800ffea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffee:	4614      	mov	r4, r2
 800fff0:	2900      	cmp	r1, #0
 800fff2:	461d      	mov	r5, r3
 800fff4:	b096      	sub	sp, #88	; 0x58
 800fff6:	da07      	bge.n	8010008 <__swhatbuf_r+0x22>
 800fff8:	2300      	movs	r3, #0
 800fffa:	602b      	str	r3, [r5, #0]
 800fffc:	89b3      	ldrh	r3, [r6, #12]
 800fffe:	061a      	lsls	r2, r3, #24
 8010000:	d410      	bmi.n	8010024 <__swhatbuf_r+0x3e>
 8010002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010006:	e00e      	b.n	8010026 <__swhatbuf_r+0x40>
 8010008:	466a      	mov	r2, sp
 801000a:	f000 f903 	bl	8010214 <_fstat_r>
 801000e:	2800      	cmp	r0, #0
 8010010:	dbf2      	blt.n	800fff8 <__swhatbuf_r+0x12>
 8010012:	9a01      	ldr	r2, [sp, #4]
 8010014:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010018:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801001c:	425a      	negs	r2, r3
 801001e:	415a      	adcs	r2, r3
 8010020:	602a      	str	r2, [r5, #0]
 8010022:	e7ee      	b.n	8010002 <__swhatbuf_r+0x1c>
 8010024:	2340      	movs	r3, #64	; 0x40
 8010026:	2000      	movs	r0, #0
 8010028:	6023      	str	r3, [r4, #0]
 801002a:	b016      	add	sp, #88	; 0x58
 801002c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010030 <__smakebuf_r>:
 8010030:	898b      	ldrh	r3, [r1, #12]
 8010032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010034:	079d      	lsls	r5, r3, #30
 8010036:	4606      	mov	r6, r0
 8010038:	460c      	mov	r4, r1
 801003a:	d507      	bpl.n	801004c <__smakebuf_r+0x1c>
 801003c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010040:	6023      	str	r3, [r4, #0]
 8010042:	6123      	str	r3, [r4, #16]
 8010044:	2301      	movs	r3, #1
 8010046:	6163      	str	r3, [r4, #20]
 8010048:	b002      	add	sp, #8
 801004a:	bd70      	pop	{r4, r5, r6, pc}
 801004c:	466a      	mov	r2, sp
 801004e:	ab01      	add	r3, sp, #4
 8010050:	f7ff ffc9 	bl	800ffe6 <__swhatbuf_r>
 8010054:	9900      	ldr	r1, [sp, #0]
 8010056:	4605      	mov	r5, r0
 8010058:	4630      	mov	r0, r6
 801005a:	f7fb fd29 	bl	800bab0 <_malloc_r>
 801005e:	b948      	cbnz	r0, 8010074 <__smakebuf_r+0x44>
 8010060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010064:	059a      	lsls	r2, r3, #22
 8010066:	d4ef      	bmi.n	8010048 <__smakebuf_r+0x18>
 8010068:	f023 0303 	bic.w	r3, r3, #3
 801006c:	f043 0302 	orr.w	r3, r3, #2
 8010070:	81a3      	strh	r3, [r4, #12]
 8010072:	e7e3      	b.n	801003c <__smakebuf_r+0xc>
 8010074:	4b0d      	ldr	r3, [pc, #52]	; (80100ac <__smakebuf_r+0x7c>)
 8010076:	62b3      	str	r3, [r6, #40]	; 0x28
 8010078:	89a3      	ldrh	r3, [r4, #12]
 801007a:	6020      	str	r0, [r4, #0]
 801007c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010080:	81a3      	strh	r3, [r4, #12]
 8010082:	9b00      	ldr	r3, [sp, #0]
 8010084:	6120      	str	r0, [r4, #16]
 8010086:	6163      	str	r3, [r4, #20]
 8010088:	9b01      	ldr	r3, [sp, #4]
 801008a:	b15b      	cbz	r3, 80100a4 <__smakebuf_r+0x74>
 801008c:	4630      	mov	r0, r6
 801008e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010092:	f000 f8d1 	bl	8010238 <_isatty_r>
 8010096:	b128      	cbz	r0, 80100a4 <__smakebuf_r+0x74>
 8010098:	89a3      	ldrh	r3, [r4, #12]
 801009a:	f023 0303 	bic.w	r3, r3, #3
 801009e:	f043 0301 	orr.w	r3, r3, #1
 80100a2:	81a3      	strh	r3, [r4, #12]
 80100a4:	89a0      	ldrh	r0, [r4, #12]
 80100a6:	4305      	orrs	r5, r0
 80100a8:	81a5      	strh	r5, [r4, #12]
 80100aa:	e7cd      	b.n	8010048 <__smakebuf_r+0x18>
 80100ac:	0800fe45 	.word	0x0800fe45

080100b0 <_malloc_usable_size_r>:
 80100b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100b4:	1f18      	subs	r0, r3, #4
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	bfbc      	itt	lt
 80100ba:	580b      	ldrlt	r3, [r1, r0]
 80100bc:	18c0      	addlt	r0, r0, r3
 80100be:	4770      	bx	lr

080100c0 <_raise_r>:
 80100c0:	291f      	cmp	r1, #31
 80100c2:	b538      	push	{r3, r4, r5, lr}
 80100c4:	4604      	mov	r4, r0
 80100c6:	460d      	mov	r5, r1
 80100c8:	d904      	bls.n	80100d4 <_raise_r+0x14>
 80100ca:	2316      	movs	r3, #22
 80100cc:	6003      	str	r3, [r0, #0]
 80100ce:	f04f 30ff 	mov.w	r0, #4294967295
 80100d2:	bd38      	pop	{r3, r4, r5, pc}
 80100d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80100d6:	b112      	cbz	r2, 80100de <_raise_r+0x1e>
 80100d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80100dc:	b94b      	cbnz	r3, 80100f2 <_raise_r+0x32>
 80100de:	4620      	mov	r0, r4
 80100e0:	f000 f830 	bl	8010144 <_getpid_r>
 80100e4:	462a      	mov	r2, r5
 80100e6:	4601      	mov	r1, r0
 80100e8:	4620      	mov	r0, r4
 80100ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100ee:	f000 b817 	b.w	8010120 <_kill_r>
 80100f2:	2b01      	cmp	r3, #1
 80100f4:	d00a      	beq.n	801010c <_raise_r+0x4c>
 80100f6:	1c59      	adds	r1, r3, #1
 80100f8:	d103      	bne.n	8010102 <_raise_r+0x42>
 80100fa:	2316      	movs	r3, #22
 80100fc:	6003      	str	r3, [r0, #0]
 80100fe:	2001      	movs	r0, #1
 8010100:	e7e7      	b.n	80100d2 <_raise_r+0x12>
 8010102:	2400      	movs	r4, #0
 8010104:	4628      	mov	r0, r5
 8010106:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801010a:	4798      	blx	r3
 801010c:	2000      	movs	r0, #0
 801010e:	e7e0      	b.n	80100d2 <_raise_r+0x12>

08010110 <raise>:
 8010110:	4b02      	ldr	r3, [pc, #8]	; (801011c <raise+0xc>)
 8010112:	4601      	mov	r1, r0
 8010114:	6818      	ldr	r0, [r3, #0]
 8010116:	f7ff bfd3 	b.w	80100c0 <_raise_r>
 801011a:	bf00      	nop
 801011c:	20000040 	.word	0x20000040

08010120 <_kill_r>:
 8010120:	b538      	push	{r3, r4, r5, lr}
 8010122:	2300      	movs	r3, #0
 8010124:	4d06      	ldr	r5, [pc, #24]	; (8010140 <_kill_r+0x20>)
 8010126:	4604      	mov	r4, r0
 8010128:	4608      	mov	r0, r1
 801012a:	4611      	mov	r1, r2
 801012c:	602b      	str	r3, [r5, #0]
 801012e:	f7f6 fe62 	bl	8006df6 <_kill>
 8010132:	1c43      	adds	r3, r0, #1
 8010134:	d102      	bne.n	801013c <_kill_r+0x1c>
 8010136:	682b      	ldr	r3, [r5, #0]
 8010138:	b103      	cbz	r3, 801013c <_kill_r+0x1c>
 801013a:	6023      	str	r3, [r4, #0]
 801013c:	bd38      	pop	{r3, r4, r5, pc}
 801013e:	bf00      	nop
 8010140:	20000928 	.word	0x20000928

08010144 <_getpid_r>:
 8010144:	f7f6 be50 	b.w	8006de8 <_getpid>

08010148 <__sread>:
 8010148:	b510      	push	{r4, lr}
 801014a:	460c      	mov	r4, r1
 801014c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010150:	f000 f894 	bl	801027c <_read_r>
 8010154:	2800      	cmp	r0, #0
 8010156:	bfab      	itete	ge
 8010158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801015a:	89a3      	ldrhlt	r3, [r4, #12]
 801015c:	181b      	addge	r3, r3, r0
 801015e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010162:	bfac      	ite	ge
 8010164:	6563      	strge	r3, [r4, #84]	; 0x54
 8010166:	81a3      	strhlt	r3, [r4, #12]
 8010168:	bd10      	pop	{r4, pc}

0801016a <__swrite>:
 801016a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801016e:	461f      	mov	r7, r3
 8010170:	898b      	ldrh	r3, [r1, #12]
 8010172:	4605      	mov	r5, r0
 8010174:	05db      	lsls	r3, r3, #23
 8010176:	460c      	mov	r4, r1
 8010178:	4616      	mov	r6, r2
 801017a:	d505      	bpl.n	8010188 <__swrite+0x1e>
 801017c:	2302      	movs	r3, #2
 801017e:	2200      	movs	r2, #0
 8010180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010184:	f000 f868 	bl	8010258 <_lseek_r>
 8010188:	89a3      	ldrh	r3, [r4, #12]
 801018a:	4632      	mov	r2, r6
 801018c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010190:	81a3      	strh	r3, [r4, #12]
 8010192:	4628      	mov	r0, r5
 8010194:	463b      	mov	r3, r7
 8010196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801019a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801019e:	f000 b817 	b.w	80101d0 <_write_r>

080101a2 <__sseek>:
 80101a2:	b510      	push	{r4, lr}
 80101a4:	460c      	mov	r4, r1
 80101a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101aa:	f000 f855 	bl	8010258 <_lseek_r>
 80101ae:	1c43      	adds	r3, r0, #1
 80101b0:	89a3      	ldrh	r3, [r4, #12]
 80101b2:	bf15      	itete	ne
 80101b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80101b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80101ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80101be:	81a3      	strheq	r3, [r4, #12]
 80101c0:	bf18      	it	ne
 80101c2:	81a3      	strhne	r3, [r4, #12]
 80101c4:	bd10      	pop	{r4, pc}

080101c6 <__sclose>:
 80101c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101ca:	f000 b813 	b.w	80101f4 <_close_r>
	...

080101d0 <_write_r>:
 80101d0:	b538      	push	{r3, r4, r5, lr}
 80101d2:	4604      	mov	r4, r0
 80101d4:	4608      	mov	r0, r1
 80101d6:	4611      	mov	r1, r2
 80101d8:	2200      	movs	r2, #0
 80101da:	4d05      	ldr	r5, [pc, #20]	; (80101f0 <_write_r+0x20>)
 80101dc:	602a      	str	r2, [r5, #0]
 80101de:	461a      	mov	r2, r3
 80101e0:	f7f6 fe40 	bl	8006e64 <_write>
 80101e4:	1c43      	adds	r3, r0, #1
 80101e6:	d102      	bne.n	80101ee <_write_r+0x1e>
 80101e8:	682b      	ldr	r3, [r5, #0]
 80101ea:	b103      	cbz	r3, 80101ee <_write_r+0x1e>
 80101ec:	6023      	str	r3, [r4, #0]
 80101ee:	bd38      	pop	{r3, r4, r5, pc}
 80101f0:	20000928 	.word	0x20000928

080101f4 <_close_r>:
 80101f4:	b538      	push	{r3, r4, r5, lr}
 80101f6:	2300      	movs	r3, #0
 80101f8:	4d05      	ldr	r5, [pc, #20]	; (8010210 <_close_r+0x1c>)
 80101fa:	4604      	mov	r4, r0
 80101fc:	4608      	mov	r0, r1
 80101fe:	602b      	str	r3, [r5, #0]
 8010200:	f7f6 fe4c 	bl	8006e9c <_close>
 8010204:	1c43      	adds	r3, r0, #1
 8010206:	d102      	bne.n	801020e <_close_r+0x1a>
 8010208:	682b      	ldr	r3, [r5, #0]
 801020a:	b103      	cbz	r3, 801020e <_close_r+0x1a>
 801020c:	6023      	str	r3, [r4, #0]
 801020e:	bd38      	pop	{r3, r4, r5, pc}
 8010210:	20000928 	.word	0x20000928

08010214 <_fstat_r>:
 8010214:	b538      	push	{r3, r4, r5, lr}
 8010216:	2300      	movs	r3, #0
 8010218:	4d06      	ldr	r5, [pc, #24]	; (8010234 <_fstat_r+0x20>)
 801021a:	4604      	mov	r4, r0
 801021c:	4608      	mov	r0, r1
 801021e:	4611      	mov	r1, r2
 8010220:	602b      	str	r3, [r5, #0]
 8010222:	f7f6 fe46 	bl	8006eb2 <_fstat>
 8010226:	1c43      	adds	r3, r0, #1
 8010228:	d102      	bne.n	8010230 <_fstat_r+0x1c>
 801022a:	682b      	ldr	r3, [r5, #0]
 801022c:	b103      	cbz	r3, 8010230 <_fstat_r+0x1c>
 801022e:	6023      	str	r3, [r4, #0]
 8010230:	bd38      	pop	{r3, r4, r5, pc}
 8010232:	bf00      	nop
 8010234:	20000928 	.word	0x20000928

08010238 <_isatty_r>:
 8010238:	b538      	push	{r3, r4, r5, lr}
 801023a:	2300      	movs	r3, #0
 801023c:	4d05      	ldr	r5, [pc, #20]	; (8010254 <_isatty_r+0x1c>)
 801023e:	4604      	mov	r4, r0
 8010240:	4608      	mov	r0, r1
 8010242:	602b      	str	r3, [r5, #0]
 8010244:	f7f6 fe44 	bl	8006ed0 <_isatty>
 8010248:	1c43      	adds	r3, r0, #1
 801024a:	d102      	bne.n	8010252 <_isatty_r+0x1a>
 801024c:	682b      	ldr	r3, [r5, #0]
 801024e:	b103      	cbz	r3, 8010252 <_isatty_r+0x1a>
 8010250:	6023      	str	r3, [r4, #0]
 8010252:	bd38      	pop	{r3, r4, r5, pc}
 8010254:	20000928 	.word	0x20000928

08010258 <_lseek_r>:
 8010258:	b538      	push	{r3, r4, r5, lr}
 801025a:	4604      	mov	r4, r0
 801025c:	4608      	mov	r0, r1
 801025e:	4611      	mov	r1, r2
 8010260:	2200      	movs	r2, #0
 8010262:	4d05      	ldr	r5, [pc, #20]	; (8010278 <_lseek_r+0x20>)
 8010264:	602a      	str	r2, [r5, #0]
 8010266:	461a      	mov	r2, r3
 8010268:	f7f6 fe3c 	bl	8006ee4 <_lseek>
 801026c:	1c43      	adds	r3, r0, #1
 801026e:	d102      	bne.n	8010276 <_lseek_r+0x1e>
 8010270:	682b      	ldr	r3, [r5, #0]
 8010272:	b103      	cbz	r3, 8010276 <_lseek_r+0x1e>
 8010274:	6023      	str	r3, [r4, #0]
 8010276:	bd38      	pop	{r3, r4, r5, pc}
 8010278:	20000928 	.word	0x20000928

0801027c <_read_r>:
 801027c:	b538      	push	{r3, r4, r5, lr}
 801027e:	4604      	mov	r4, r0
 8010280:	4608      	mov	r0, r1
 8010282:	4611      	mov	r1, r2
 8010284:	2200      	movs	r2, #0
 8010286:	4d05      	ldr	r5, [pc, #20]	; (801029c <_read_r+0x20>)
 8010288:	602a      	str	r2, [r5, #0]
 801028a:	461a      	mov	r2, r3
 801028c:	f7f6 fdcd 	bl	8006e2a <_read>
 8010290:	1c43      	adds	r3, r0, #1
 8010292:	d102      	bne.n	801029a <_read_r+0x1e>
 8010294:	682b      	ldr	r3, [r5, #0]
 8010296:	b103      	cbz	r3, 801029a <_read_r+0x1e>
 8010298:	6023      	str	r3, [r4, #0]
 801029a:	bd38      	pop	{r3, r4, r5, pc}
 801029c:	20000928 	.word	0x20000928

080102a0 <log>:
 80102a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102a2:	4604      	mov	r4, r0
 80102a4:	460d      	mov	r5, r1
 80102a6:	f000 f837 	bl	8010318 <__ieee754_log>
 80102aa:	4b17      	ldr	r3, [pc, #92]	; (8010308 <log+0x68>)
 80102ac:	4606      	mov	r6, r0
 80102ae:	f993 3000 	ldrsb.w	r3, [r3]
 80102b2:	460f      	mov	r7, r1
 80102b4:	3301      	adds	r3, #1
 80102b6:	d01a      	beq.n	80102ee <log+0x4e>
 80102b8:	4622      	mov	r2, r4
 80102ba:	462b      	mov	r3, r5
 80102bc:	4620      	mov	r0, r4
 80102be:	4629      	mov	r1, r5
 80102c0:	f7f0 fc10 	bl	8000ae4 <__aeabi_dcmpun>
 80102c4:	b998      	cbnz	r0, 80102ee <log+0x4e>
 80102c6:	2200      	movs	r2, #0
 80102c8:	2300      	movs	r3, #0
 80102ca:	4620      	mov	r0, r4
 80102cc:	4629      	mov	r1, r5
 80102ce:	f7f0 fbff 	bl	8000ad0 <__aeabi_dcmpgt>
 80102d2:	b960      	cbnz	r0, 80102ee <log+0x4e>
 80102d4:	2200      	movs	r2, #0
 80102d6:	2300      	movs	r3, #0
 80102d8:	4620      	mov	r0, r4
 80102da:	4629      	mov	r1, r5
 80102dc:	f7f0 fbd0 	bl	8000a80 <__aeabi_dcmpeq>
 80102e0:	b140      	cbz	r0, 80102f4 <log+0x54>
 80102e2:	f7fb fb3d 	bl	800b960 <__errno>
 80102e6:	2322      	movs	r3, #34	; 0x22
 80102e8:	2600      	movs	r6, #0
 80102ea:	4f08      	ldr	r7, [pc, #32]	; (801030c <log+0x6c>)
 80102ec:	6003      	str	r3, [r0, #0]
 80102ee:	4630      	mov	r0, r6
 80102f0:	4639      	mov	r1, r7
 80102f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102f4:	f7fb fb34 	bl	800b960 <__errno>
 80102f8:	2321      	movs	r3, #33	; 0x21
 80102fa:	6003      	str	r3, [r0, #0]
 80102fc:	4804      	ldr	r0, [pc, #16]	; (8010310 <log+0x70>)
 80102fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010302:	f7ff ba01 	b.w	800f708 <nan>
 8010306:	bf00      	nop
 8010308:	20000214 	.word	0x20000214
 801030c:	fff00000 	.word	0xfff00000
 8010310:	08010f38 	.word	0x08010f38
 8010314:	00000000 	.word	0x00000000

08010318 <__ieee754_log>:
 8010318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801031c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010320:	4602      	mov	r2, r0
 8010322:	460b      	mov	r3, r1
 8010324:	460d      	mov	r5, r1
 8010326:	b087      	sub	sp, #28
 8010328:	da24      	bge.n	8010374 <__ieee754_log+0x5c>
 801032a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 801032e:	4304      	orrs	r4, r0
 8010330:	d108      	bne.n	8010344 <__ieee754_log+0x2c>
 8010332:	2200      	movs	r2, #0
 8010334:	2300      	movs	r3, #0
 8010336:	2000      	movs	r0, #0
 8010338:	49cb      	ldr	r1, [pc, #812]	; (8010668 <__ieee754_log+0x350>)
 801033a:	f7f0 fa63 	bl	8000804 <__aeabi_ddiv>
 801033e:	b007      	add	sp, #28
 8010340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010344:	2900      	cmp	r1, #0
 8010346:	da04      	bge.n	8010352 <__ieee754_log+0x3a>
 8010348:	f7ef ff7a 	bl	8000240 <__aeabi_dsub>
 801034c:	2200      	movs	r2, #0
 801034e:	2300      	movs	r3, #0
 8010350:	e7f3      	b.n	801033a <__ieee754_log+0x22>
 8010352:	2200      	movs	r2, #0
 8010354:	4bc5      	ldr	r3, [pc, #788]	; (801066c <__ieee754_log+0x354>)
 8010356:	f7f0 f92b 	bl	80005b0 <__aeabi_dmul>
 801035a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 801035e:	4602      	mov	r2, r0
 8010360:	460b      	mov	r3, r1
 8010362:	460d      	mov	r5, r1
 8010364:	49c2      	ldr	r1, [pc, #776]	; (8010670 <__ieee754_log+0x358>)
 8010366:	428d      	cmp	r5, r1
 8010368:	dd06      	ble.n	8010378 <__ieee754_log+0x60>
 801036a:	4610      	mov	r0, r2
 801036c:	4619      	mov	r1, r3
 801036e:	f7ef ff69 	bl	8000244 <__adddf3>
 8010372:	e7e4      	b.n	801033e <__ieee754_log+0x26>
 8010374:	2600      	movs	r6, #0
 8010376:	e7f5      	b.n	8010364 <__ieee754_log+0x4c>
 8010378:	152c      	asrs	r4, r5, #20
 801037a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801037e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8010382:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8010386:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 801038a:	4426      	add	r6, r4
 801038c:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8010390:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8010394:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8010398:	ea41 0305 	orr.w	r3, r1, r5
 801039c:	4610      	mov	r0, r2
 801039e:	4619      	mov	r1, r3
 80103a0:	2200      	movs	r2, #0
 80103a2:	4bb4      	ldr	r3, [pc, #720]	; (8010674 <__ieee754_log+0x35c>)
 80103a4:	f7ef ff4c 	bl	8000240 <__aeabi_dsub>
 80103a8:	1cab      	adds	r3, r5, #2
 80103aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80103ae:	2b02      	cmp	r3, #2
 80103b0:	4682      	mov	sl, r0
 80103b2:	468b      	mov	fp, r1
 80103b4:	f04f 0200 	mov.w	r2, #0
 80103b8:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 80103bc:	dc53      	bgt.n	8010466 <__ieee754_log+0x14e>
 80103be:	2300      	movs	r3, #0
 80103c0:	f7f0 fb5e 	bl	8000a80 <__aeabi_dcmpeq>
 80103c4:	b1d0      	cbz	r0, 80103fc <__ieee754_log+0xe4>
 80103c6:	2c00      	cmp	r4, #0
 80103c8:	f000 8122 	beq.w	8010610 <__ieee754_log+0x2f8>
 80103cc:	4620      	mov	r0, r4
 80103ce:	f7f0 f885 	bl	80004dc <__aeabi_i2d>
 80103d2:	a391      	add	r3, pc, #580	; (adr r3, 8010618 <__ieee754_log+0x300>)
 80103d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d8:	4606      	mov	r6, r0
 80103da:	460f      	mov	r7, r1
 80103dc:	f7f0 f8e8 	bl	80005b0 <__aeabi_dmul>
 80103e0:	a38f      	add	r3, pc, #572	; (adr r3, 8010620 <__ieee754_log+0x308>)
 80103e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e6:	4604      	mov	r4, r0
 80103e8:	460d      	mov	r5, r1
 80103ea:	4630      	mov	r0, r6
 80103ec:	4639      	mov	r1, r7
 80103ee:	f7f0 f8df 	bl	80005b0 <__aeabi_dmul>
 80103f2:	4602      	mov	r2, r0
 80103f4:	460b      	mov	r3, r1
 80103f6:	4620      	mov	r0, r4
 80103f8:	4629      	mov	r1, r5
 80103fa:	e7b8      	b.n	801036e <__ieee754_log+0x56>
 80103fc:	a38a      	add	r3, pc, #552	; (adr r3, 8010628 <__ieee754_log+0x310>)
 80103fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010402:	4650      	mov	r0, sl
 8010404:	4659      	mov	r1, fp
 8010406:	f7f0 f8d3 	bl	80005b0 <__aeabi_dmul>
 801040a:	4602      	mov	r2, r0
 801040c:	460b      	mov	r3, r1
 801040e:	2000      	movs	r0, #0
 8010410:	4999      	ldr	r1, [pc, #612]	; (8010678 <__ieee754_log+0x360>)
 8010412:	f7ef ff15 	bl	8000240 <__aeabi_dsub>
 8010416:	4652      	mov	r2, sl
 8010418:	4606      	mov	r6, r0
 801041a:	460f      	mov	r7, r1
 801041c:	465b      	mov	r3, fp
 801041e:	4650      	mov	r0, sl
 8010420:	4659      	mov	r1, fp
 8010422:	f7f0 f8c5 	bl	80005b0 <__aeabi_dmul>
 8010426:	4602      	mov	r2, r0
 8010428:	460b      	mov	r3, r1
 801042a:	4630      	mov	r0, r6
 801042c:	4639      	mov	r1, r7
 801042e:	f7f0 f8bf 	bl	80005b0 <__aeabi_dmul>
 8010432:	4606      	mov	r6, r0
 8010434:	460f      	mov	r7, r1
 8010436:	b914      	cbnz	r4, 801043e <__ieee754_log+0x126>
 8010438:	4632      	mov	r2, r6
 801043a:	463b      	mov	r3, r7
 801043c:	e0a2      	b.n	8010584 <__ieee754_log+0x26c>
 801043e:	4620      	mov	r0, r4
 8010440:	f7f0 f84c 	bl	80004dc <__aeabi_i2d>
 8010444:	a374      	add	r3, pc, #464	; (adr r3, 8010618 <__ieee754_log+0x300>)
 8010446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801044a:	4680      	mov	r8, r0
 801044c:	4689      	mov	r9, r1
 801044e:	f7f0 f8af 	bl	80005b0 <__aeabi_dmul>
 8010452:	a373      	add	r3, pc, #460	; (adr r3, 8010620 <__ieee754_log+0x308>)
 8010454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010458:	4604      	mov	r4, r0
 801045a:	460d      	mov	r5, r1
 801045c:	4640      	mov	r0, r8
 801045e:	4649      	mov	r1, r9
 8010460:	f7f0 f8a6 	bl	80005b0 <__aeabi_dmul>
 8010464:	e0a7      	b.n	80105b6 <__ieee754_log+0x29e>
 8010466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801046a:	f7ef feeb 	bl	8000244 <__adddf3>
 801046e:	4602      	mov	r2, r0
 8010470:	460b      	mov	r3, r1
 8010472:	4650      	mov	r0, sl
 8010474:	4659      	mov	r1, fp
 8010476:	f7f0 f9c5 	bl	8000804 <__aeabi_ddiv>
 801047a:	e9cd 0100 	strd	r0, r1, [sp]
 801047e:	4620      	mov	r0, r4
 8010480:	f7f0 f82c 	bl	80004dc <__aeabi_i2d>
 8010484:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801048c:	4610      	mov	r0, r2
 801048e:	4619      	mov	r1, r3
 8010490:	f7f0 f88e 	bl	80005b0 <__aeabi_dmul>
 8010494:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8010498:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801049c:	4602      	mov	r2, r0
 801049e:	9305      	str	r3, [sp, #20]
 80104a0:	460b      	mov	r3, r1
 80104a2:	4606      	mov	r6, r0
 80104a4:	460f      	mov	r7, r1
 80104a6:	f7f0 f883 	bl	80005b0 <__aeabi_dmul>
 80104aa:	a361      	add	r3, pc, #388	; (adr r3, 8010630 <__ieee754_log+0x318>)
 80104ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b0:	4680      	mov	r8, r0
 80104b2:	4689      	mov	r9, r1
 80104b4:	f7f0 f87c 	bl	80005b0 <__aeabi_dmul>
 80104b8:	a35f      	add	r3, pc, #380	; (adr r3, 8010638 <__ieee754_log+0x320>)
 80104ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104be:	f7ef fec1 	bl	8000244 <__adddf3>
 80104c2:	4642      	mov	r2, r8
 80104c4:	464b      	mov	r3, r9
 80104c6:	f7f0 f873 	bl	80005b0 <__aeabi_dmul>
 80104ca:	a35d      	add	r3, pc, #372	; (adr r3, 8010640 <__ieee754_log+0x328>)
 80104cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d0:	f7ef feb8 	bl	8000244 <__adddf3>
 80104d4:	4642      	mov	r2, r8
 80104d6:	464b      	mov	r3, r9
 80104d8:	f7f0 f86a 	bl	80005b0 <__aeabi_dmul>
 80104dc:	a35a      	add	r3, pc, #360	; (adr r3, 8010648 <__ieee754_log+0x330>)
 80104de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e2:	f7ef feaf 	bl	8000244 <__adddf3>
 80104e6:	4632      	mov	r2, r6
 80104e8:	463b      	mov	r3, r7
 80104ea:	f7f0 f861 	bl	80005b0 <__aeabi_dmul>
 80104ee:	a358      	add	r3, pc, #352	; (adr r3, 8010650 <__ieee754_log+0x338>)
 80104f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f4:	4606      	mov	r6, r0
 80104f6:	460f      	mov	r7, r1
 80104f8:	4640      	mov	r0, r8
 80104fa:	4649      	mov	r1, r9
 80104fc:	f7f0 f858 	bl	80005b0 <__aeabi_dmul>
 8010500:	a355      	add	r3, pc, #340	; (adr r3, 8010658 <__ieee754_log+0x340>)
 8010502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010506:	f7ef fe9d 	bl	8000244 <__adddf3>
 801050a:	4642      	mov	r2, r8
 801050c:	464b      	mov	r3, r9
 801050e:	f7f0 f84f 	bl	80005b0 <__aeabi_dmul>
 8010512:	a353      	add	r3, pc, #332	; (adr r3, 8010660 <__ieee754_log+0x348>)
 8010514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010518:	f7ef fe94 	bl	8000244 <__adddf3>
 801051c:	4642      	mov	r2, r8
 801051e:	464b      	mov	r3, r9
 8010520:	f7f0 f846 	bl	80005b0 <__aeabi_dmul>
 8010524:	460b      	mov	r3, r1
 8010526:	4602      	mov	r2, r0
 8010528:	4639      	mov	r1, r7
 801052a:	4630      	mov	r0, r6
 801052c:	f7ef fe8a 	bl	8000244 <__adddf3>
 8010530:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8010534:	9b05      	ldr	r3, [sp, #20]
 8010536:	3551      	adds	r5, #81	; 0x51
 8010538:	431d      	orrs	r5, r3
 801053a:	2d00      	cmp	r5, #0
 801053c:	4680      	mov	r8, r0
 801053e:	4689      	mov	r9, r1
 8010540:	dd48      	ble.n	80105d4 <__ieee754_log+0x2bc>
 8010542:	2200      	movs	r2, #0
 8010544:	4b4c      	ldr	r3, [pc, #304]	; (8010678 <__ieee754_log+0x360>)
 8010546:	4650      	mov	r0, sl
 8010548:	4659      	mov	r1, fp
 801054a:	f7f0 f831 	bl	80005b0 <__aeabi_dmul>
 801054e:	4652      	mov	r2, sl
 8010550:	465b      	mov	r3, fp
 8010552:	f7f0 f82d 	bl	80005b0 <__aeabi_dmul>
 8010556:	4602      	mov	r2, r0
 8010558:	460b      	mov	r3, r1
 801055a:	4606      	mov	r6, r0
 801055c:	460f      	mov	r7, r1
 801055e:	4640      	mov	r0, r8
 8010560:	4649      	mov	r1, r9
 8010562:	f7ef fe6f 	bl	8000244 <__adddf3>
 8010566:	e9dd 2300 	ldrd	r2, r3, [sp]
 801056a:	f7f0 f821 	bl	80005b0 <__aeabi_dmul>
 801056e:	4680      	mov	r8, r0
 8010570:	4689      	mov	r9, r1
 8010572:	b964      	cbnz	r4, 801058e <__ieee754_log+0x276>
 8010574:	4602      	mov	r2, r0
 8010576:	460b      	mov	r3, r1
 8010578:	4630      	mov	r0, r6
 801057a:	4639      	mov	r1, r7
 801057c:	f7ef fe60 	bl	8000240 <__aeabi_dsub>
 8010580:	4602      	mov	r2, r0
 8010582:	460b      	mov	r3, r1
 8010584:	4650      	mov	r0, sl
 8010586:	4659      	mov	r1, fp
 8010588:	f7ef fe5a 	bl	8000240 <__aeabi_dsub>
 801058c:	e6d7      	b.n	801033e <__ieee754_log+0x26>
 801058e:	a322      	add	r3, pc, #136	; (adr r3, 8010618 <__ieee754_log+0x300>)
 8010590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010598:	f7f0 f80a 	bl	80005b0 <__aeabi_dmul>
 801059c:	a320      	add	r3, pc, #128	; (adr r3, 8010620 <__ieee754_log+0x308>)
 801059e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a2:	4604      	mov	r4, r0
 80105a4:	460d      	mov	r5, r1
 80105a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105aa:	f7f0 f801 	bl	80005b0 <__aeabi_dmul>
 80105ae:	4642      	mov	r2, r8
 80105b0:	464b      	mov	r3, r9
 80105b2:	f7ef fe47 	bl	8000244 <__adddf3>
 80105b6:	4602      	mov	r2, r0
 80105b8:	460b      	mov	r3, r1
 80105ba:	4630      	mov	r0, r6
 80105bc:	4639      	mov	r1, r7
 80105be:	f7ef fe3f 	bl	8000240 <__aeabi_dsub>
 80105c2:	4652      	mov	r2, sl
 80105c4:	465b      	mov	r3, fp
 80105c6:	f7ef fe3b 	bl	8000240 <__aeabi_dsub>
 80105ca:	4602      	mov	r2, r0
 80105cc:	460b      	mov	r3, r1
 80105ce:	4620      	mov	r0, r4
 80105d0:	4629      	mov	r1, r5
 80105d2:	e7d9      	b.n	8010588 <__ieee754_log+0x270>
 80105d4:	4602      	mov	r2, r0
 80105d6:	460b      	mov	r3, r1
 80105d8:	4650      	mov	r0, sl
 80105da:	4659      	mov	r1, fp
 80105dc:	f7ef fe30 	bl	8000240 <__aeabi_dsub>
 80105e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105e4:	f7ef ffe4 	bl	80005b0 <__aeabi_dmul>
 80105e8:	4606      	mov	r6, r0
 80105ea:	460f      	mov	r7, r1
 80105ec:	2c00      	cmp	r4, #0
 80105ee:	f43f af23 	beq.w	8010438 <__ieee754_log+0x120>
 80105f2:	a309      	add	r3, pc, #36	; (adr r3, 8010618 <__ieee754_log+0x300>)
 80105f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105fc:	f7ef ffd8 	bl	80005b0 <__aeabi_dmul>
 8010600:	a307      	add	r3, pc, #28	; (adr r3, 8010620 <__ieee754_log+0x308>)
 8010602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010606:	4604      	mov	r4, r0
 8010608:	460d      	mov	r5, r1
 801060a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801060e:	e727      	b.n	8010460 <__ieee754_log+0x148>
 8010610:	2000      	movs	r0, #0
 8010612:	2100      	movs	r1, #0
 8010614:	e693      	b.n	801033e <__ieee754_log+0x26>
 8010616:	bf00      	nop
 8010618:	fee00000 	.word	0xfee00000
 801061c:	3fe62e42 	.word	0x3fe62e42
 8010620:	35793c76 	.word	0x35793c76
 8010624:	3dea39ef 	.word	0x3dea39ef
 8010628:	55555555 	.word	0x55555555
 801062c:	3fd55555 	.word	0x3fd55555
 8010630:	df3e5244 	.word	0xdf3e5244
 8010634:	3fc2f112 	.word	0x3fc2f112
 8010638:	96cb03de 	.word	0x96cb03de
 801063c:	3fc74664 	.word	0x3fc74664
 8010640:	94229359 	.word	0x94229359
 8010644:	3fd24924 	.word	0x3fd24924
 8010648:	55555593 	.word	0x55555593
 801064c:	3fe55555 	.word	0x3fe55555
 8010650:	d078c69f 	.word	0xd078c69f
 8010654:	3fc39a09 	.word	0x3fc39a09
 8010658:	1d8e78af 	.word	0x1d8e78af
 801065c:	3fcc71c5 	.word	0x3fcc71c5
 8010660:	9997fa04 	.word	0x9997fa04
 8010664:	3fd99999 	.word	0x3fd99999
 8010668:	c3500000 	.word	0xc3500000
 801066c:	43500000 	.word	0x43500000
 8010670:	7fefffff 	.word	0x7fefffff
 8010674:	3ff00000 	.word	0x3ff00000
 8010678:	3fe00000 	.word	0x3fe00000

0801067c <_init>:
 801067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801067e:	bf00      	nop
 8010680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010682:	bc08      	pop	{r3}
 8010684:	469e      	mov	lr, r3
 8010686:	4770      	bx	lr

08010688 <_fini>:
 8010688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801068a:	bf00      	nop
 801068c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801068e:	bc08      	pop	{r3}
 8010690:	469e      	mov	lr, r3
 8010692:	4770      	bx	lr
